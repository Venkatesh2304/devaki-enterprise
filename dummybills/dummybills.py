# Generated by Selenium IDE
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import numpy as np
import random
import pandas as pd
import math
def catcher() :
    try : 
     driver.execute_script(' var element = document.getElementsByTagName("a"); for (var i =0 ; i<element.length; i++){ var txt = element[i].innerText.toLowerCase(); if(txt.indexOf("Ok")!=-1 || txt.indexOf("ok")!=-1){ try { element[i].click(); } catch(err) { console.log(err);}} }' )   
     driver.execute_script(' var element = document.getElementsByTagName("button"); for (var i =0 ; i<element.length; i++){ var txt = element[i].innerText.toLowerCase(); if(txt.indexOf("Ok")!=-1 || txt.indexOf("ok")!=-1){ try { element[i].click(); } catch(err) { console.log(err);}} }' )   
    except :
       xx=0
    time.sleep(3)
def generate(shops,prod) :
    rand=[]
    for k in range(0,len(prod)):
     if prod[k][1] > shops*2*prod[k][3] : 
      rand.append(np.random.multinomial(prod[k][1],np.ones(shops)/shops))
     else :
        shopsfake=prod[k][1]//int((prod[k][3])*2)
        array1=np.random.multinomial(prod[k][1],np.ones(shopsfake)/shopsfake)
        array2=np.array([0]*(shops-shopsfake))
        #print(np.random.multinomial(prod[k][1],np.ones(shopsfake)/shopsfake))
        #print(np.array([0]*(shops-shopsfake)))
        rand.append(np.concatenate((array1,array2),axis=None ))
    for tk in range(0,len(prod)):
       for s in rand[tk] :
         if s <= prod[tk][3] and s!=0 :
             #print(s,prod[tk][3])             
             return generate(shops,prod)

    """for k1 in range(0,shops):
      total=0
      for k2 in range(0,len(prod)):
         total+=rand[k2][k1]*prod[k2][2]
      if total < 75 and total!=0:
         print(1)
         return generate(shops,prod)"""
    return rand

def waitlog(reason,timeout=20) :
  global driver
  for i in range(timeout) :
   x=driver.execute_script('return document.querySelector("#display-message").innerText')
   if reason.lower() in x.lower() :
       time.sleep(1)
   else :
       break
   if i==20 :
    print('failed please wait timeout')
    return 1/0
def waituntil(x,y=60) :
 global driver
 for i in range(y):
  try :
    driver.execute_script(x)
    break
  except:
    time.sleep(1)
    print(1,x)
 if i==y:
   try :
     driver.execute_script('document.querySelector("body > div.panel.window.ui-draggable.ui-resizable.ui-resizable-disabled.messager-window > div.dialog-button.messager-button > a").click();')    
     time.sleep(1)
     driver.execute_script(x)
   except :
    x=1/0
def waitclick(x) :
    for i in range(60) :
      try :
         driver.find_element(By.ID,x).click()
         break
      except :
         time.sleep(1)
def main(array) :
    global driver
    #user,password,rs='SA','Mosl1234@@','41A392'
    user,password,rs='CREDIT','Ven2004@','41A392'
    options = webdriver.ChromeOptions()
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--start-maximized")
    prefs = {'profile.managed_default_content_settings.images':2,'disk-cache-size':4096}
    options.add_experimental_option('prefs', prefs)
    driver = webdriver.Chrome(r'chromedriver.exe',options=options)
    driver.maximize_window()
    driver.get('https://leveredge102.hulcd.com/rsunify/')
    searchbox = driver.find_element_by_xpath('//*[@id="userName"]')
    searchbox.send_keys(user)
    searchbox1 = driver.find_element_by_xpath('//*[@id="password"]')
    searchbox1.send_keys(password)
    searchbox = driver.find_element_by_xpath('//*[@id="databaseName"]')
    searchbox.send_keys(rs)
    but = driver.find_element_by_xpath('//*[@id="gologin"]')
    but.click()
    #checking for captcha and fro login loading main page 
    while True:
     try :
      driver.find_element(By.ID,"ikea_home_menu_search").send_keys("BILLING")
      break
     except :
      captcha=driver.find_element(By.ID,'cap_question')
      captcha=captcha.get_attribute('innerText')
      captcha=captcha.replace('=','')
      captcha=captcha.split('+')
      try :
       captcha=[int(i.strip()) for i in captcha]
      except :
        time.sleep(0.5)
        continue
      value=sum(captcha)
      driver.execute_script('document.getElementById("cap_answer").value='+str(value))
      driver.execute_script('confirmSubmission();')
      WebDriverWait(driver,15).until(EC.element_to_be_clickable((By.ID,"ikea_home_menu_search"))).send_keys("BILLING")
      break
    waituntil('document.querySelector("#search_menu_item_container > div:nth-child(1)").click();')
    element = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.ID, "bill_salesman"))) 
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    driver.find_element(By.ID, "inputSrId").send_keys(array[0])
    time.sleep(2)
    driver.find_element(By.ID, "inputSrId").send_keys(Keys.ENTER)
    time.sleep(1)
    element = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.ID, "bill_beat")))
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    driver.find_element(By.ID, "inputSrId").send_keys(array[1])
    time.sleep(2)
    driver.find_element(By.ID, "inputSrId").send_keys(Keys.ENTER)
    time.sleep(1)
    driver.find_element(By.LINK_TEXT, "Ok").click()
    WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.ID, "Ok"))).click() 
    driver.execute_script('document.querySelector("body > div.rsu-probe-container.rsu-box-shadow.ui-draggable").style.left="100px";document.querySelector("body > div.rsu-probe-container.rsu-box-shadow.ui-draggable").style.top="420px"')
    #paty select trial
    element = driver.find_element(By.ID, "billPartyName")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    #driver.find_element(By.ID, "inputSrId").click()
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "#rsu-popup-party_name-grid-area tr:nth-child("+str(1)+") > td:nth-child(2)")))
    i=0
    shops=[]
    blockedshops=array[3]
    blockedshops=[l.strip() for l in blockedshops]
    shopnames=[]
    while True :
     i+=1
     try :
      y=driver.find_element(By.CSS_SELECTOR, "#rsu-popup-party_name-grid-area tr:nth-child("+str(i)+") > td:nth-child(2)").get_attribute('innerText')
      if y.strip() not in blockedshops  :
       shops.append(i)
       shopnames.append(y)
     except :
         break
    waituntil('document.querySelector("#rsu-popup-party_name > div.rsu-popup-title-bar > div > a.rsu-popup-control-close-btn").click();')
    global prod
    prod=array[2]
    #prod=[['VIM BAR 75',180,5,6] , ['VIM BAR 135',120,10,4],['BRU RS2',120,10,4],['BRU MRP5',100,10,5]]
    print(prod)
    x=input()
    checkprod=[x[1]*x[2] for x in prod]
    print(shops,shopnames)
    global randfinal
    randfinal=generates(len(shops),prod)
    exceldf=[]
    #excel prep : 
    for t1 in range(0,len(shops)) :
        for t2 in range(0,len(randfinal)):
            exceldf.append([shopnames[t1],prod[t2][0],randfinal[t2][t1],prod[t2][2],randfinal[t2][t1]*prod[t2][2]])
    exceldf=pd.DataFrame(exceldf,columns=['Party Name','Product','Quantity','MRP','Total Price'])
    groupexcel=exceldf.groupby(['Party Name']).sum()
    pivotexcel=pd.pivot_table(exceldf,index=['Product'],values=['Quantity'],aggfunc=np.sum)
    with pd.ExcelWriter('dummybills.xlsx') as writer:
      pivotexcel.to_excel(writer,sheet_name='Product wise')
      groupexcel.to_excel(writer,sheet_name='Party Wise')
      exceldf.to_excel(writer,sheet_name='details')
    for p in range(0,len(shops)) :
        anyprod=0
        for j in range(0,len(prod)) :
           if randfinal[j][p] != 0 :
               anyprod=1
        if anyprod==1 :
           while True :
            try :
             eachparty(p+1,p)
             break
            except Exception as e:
                print(e,1)
                #catcher()
def eachprod(prods,rands,ele) :
    global randfinal
    global prod
    element = driver.find_element(By.CSS_SELECTOR, "#rsu-popup-billing_main_window-grid-area > table > tbody > tr:nth-child("+str(ele)+") > td:nth-child(2)")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    time.sleep(1)
    while True :
     try :
      driver.find_element(By.ID, "inputSrId").send_keys(prods)
      break
     except :
      time.sleep(1)
      ele-=1
      element = driver.find_element(By.CSS_SELECTOR, "#rsu-popup-billing_main_window-grid-area > table > tbody > tr:nth-child("+str(ele)+") > td:nth-child(2)")
      actions = ActionChains(driver)
      actions.double_click(element).perform()
      time.sleep(1)
    for j in range(30) :
     try :
      if prods in WebDriverWait(driver,10).until(EC.presence_of_element_located((By.XPATH,'//*[@id="rsu-popup-product_list_mrp-grid-area"]/table/tbody/tr[1]/td[2]'))).get_attribute('innerText') :
        break
      else :
       time.sleep(0.5)
     except :
        driver.execute_script("document.getElementById('inputSrId').value='';")
        time.sleep(1)
        driver.find_element(By.ID, "inputSrId").send_keys(prods)
        time.sleep(1)
        continue
    WebDriverWait(driver,15).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".rsu-embed-footer-action-bar > .rsu-popup-action-ok"))).click()
    WebDriverWait(driver,15).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".active:nth-child(7)"))).send_keys(str(rands))
    
def eachparty(p,index) :
    global driver
    global randfinal
    global prod
    element = driver.find_element(By.ID, "billPartyName")
    print('eachparty')
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    while True :
     try :
      WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#rsu-popup-party_name-grid-area tr:nth-child("+str(p)+") > td:nth-child(2)"))).click()
      break
     except :
        time.sleep(1)
        try :
         driver.find_element(By.LINK_TEXT, "Ok").click()
        except :
            print(1)
        try :
         driver.find_element(By.ID, "Ok").click()
        except :
            print(1)
    time.sleep(1)
    driver.find_element(By.CSS_SELECTOR, ".rsu-embed-footer-action-bar > .rsu-popup-action-ok").click()
    WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.ID,"par_cpl_ok"))).click()
    #item add
    s1=0
    for j1 in range(0,len(randfinal)):
     time.sleep(0.5)
     if randfinal[j1][index]!=0 :
      s1+=1
      eachprod(prod[j1][0],randfinal[j1][index],s1)
    time.sleep(0.5) 
    waituntil('document.querySelector("#rsu-popup-billing_main_window > div.rsu-popup-action-bar > div > div > div > a.rsu-btn.rsu-btn-small.rsu-popup-action-btn.rsu-popup-action-ok.horizontal").click()')
    WebDriverWait(driver,15).until(EC.element_to_be_clickable((By.CSS_SELECTOR,"#bill_price_tur_ok"))).click()
    waitlog('please')
    time.sleep(0.5)
def generates(shops,prod) :
    rand=[]
    shopreal=shops
    for i in prod :
        if math.ceil(shops*i[3]*1.5) < i[1] :
        #excess quantity
            mini=i[3]
            sums=2*i[1]//shops
            randi=[random.randint(mini,sums - mini) for dummy in range(shops//2)]
            randus=[sums-dummy for dummy in randi]
            randi=randi+[i[1]-sum(randi)-sum(randus)]+randus
            rand.append(randi)
        else :
            mini=i[3]
            shops=i[1]//math.ceil(i[3]*1.5)
            randi=[random.randint(i[3],(i[3]*3) - mini) for dummy in range(shops//2)]
            randus=[(mini*3)-dummy for dummy in randi]
            randi=randi+[i[1]-sum(randi)-sum(randus)]+randus
            randux=randi+[0]*(shopreal-len(randi))
            random.shuffle(randux)
            rand.append(randux)
    maxi=150
    mini=75
    maxis=[]
    minis=[]
    extra=[]
    for j in range(0,shops) :
     sums=0
     for i in range(0,len(prod)) :
       sums+=rand[i][j]*prod[i][2]
       if sums > maxi :
           extra.append([i,rand[i][j]])
           rand[i][j]=0
     if sums > maxi :
         maxis.append(j)
     elif sums < mini :
         minis.append([j,sums])
     else :
       continue
    for i1 in minis :
      i=i1[0]
      sums=i1[1]
      for j in range(0,len(extra)) :
        if sums > mini : 
            break
        if extra[j][1]!=0 :
          rand[extra[j][0]][i]+=extra[j][1]
          sums+=extra[j][1]*prod[extra[j][0]][2]
          extra[j][1]=0
    print(extra)
    return rand
#x=generates(30,[['a',288,10,20],['b',100,15,8]])
#print(x)m
main(['g.b','ds-beema',[['HAMAM SOAP 43G',100,10,10] ],[]])


    
    
 

  
  