/**
 * #author  	: Saravana Kumar K
 * #author url  : http://iamsark.com
 * #purpose 	: Master control object, which initiate all context objects and maintain their life cycle
 * 				: Creating windows, initiating popups, form & grid generations, form validation & behavior modeling, navigations. 				  
 * 				: Manages all event handling and common functionalities like Close, Minimize, Help, Ok, Print and many more. 
 * 				  also handles all communication with Server Side Module (Ajax).
 * #version		: 1.0.0
 */

/* rsunify controller object ( main module ) */
var rSuControllerObj = null;
/* These are used by CLICK & DOUBLE click event handlers - ( to distinguish between click & double click ) */
var RSU_CLICKS = 0,
RSU_CLICK_DELAY = 250, 
RSU_CLICK_TIMER = null;
/* rSunify Action Controller Implementation */
var rsuController = function(){
	/* Holds the current name of the context */
	this.context = null;
	/* Add by Sark
	 * Since : 28/07/2016
	 * Holds the context objects ( controller may have N number of active context, earlier it was as singleton ) */
	this.contexts = {};
	/* object which manage all action for current context */
	this.contextObj = null;
	/* Used to holds the last active context name */
	this.lastContext = null;
	/* Counter property to count the child popup's count */
	this.subPopupCount = 0;	
	/* Counter property to count the number of switch view actions */
	this.switchViewCount = 0;
	/* Used to hold the top z-index value ( which would be incremented as it gets min max repeatedly ) */
	this.currentZIndex = 2000;
	/* used to holds last operation's response from server */
	this.response = null;
	/* used to holds next request's data (most likely to be transported to server) */
	this.request = null;
	/* used to holds previous request object - ( but we havn't had any real use of it, so far ) */
	this.lastRequest = null;
	/* prevent user from doing anything while any communication between server & client is active. */
	this.ajaxFlaQ = true;
	/* Element Id of the top main menu container */
	this.menuHolder = "rsu-main-menu-container";
	/* Element Id of the top main app container */
	this.appHolder = "rsu-transaction-app-container";	
	/* It holds the current focused element's reference */
	this.selectedGrid = null;
	/* Holds the last active popup object */
	this.lastPopup = null;
	/* Holds currently focused element's reference */
	this.currentElement = null;
	/* It holds last active element's reference */
	this.lastActive = null;
	/* find button last active target */
	this.tempLastActive = null;
	/* flag for whether allow user to make next move 
	 * if he enter some invalid value and try to go to next field, set this flag false */
	this.allowNext = true;
	/* Used to fix a focus issue in pagination popup filter functionality */
	this.isPaginationFilter = false;
	this.ispgfilterNw = false;
	/* Close Popup dblclick check*/
	this.closePopupFlg = true;
	/* Used to fix a focus issue in pagination popup pager functionality */
	this.isPaginationPager = false;
	/* Used for local cache management - especially for pagination popup */
	this.pageCache = {};
	/* Used to holds the currently cliked transaction menu item's object */
	this.menuItem = null;
	/* Counter  property for loading module dependencies */
	this.scriptIndex = 0;
	/* Used to holds the last searched text ( used for pagination popup ) */
	this.lastSearchTxt = "";
	/* Used to holds timer object, which will be used by pagination popup searcher */
	this.searchTimer = null;
	/* Key press waiting delay ( Used by pagination popup searcher ) */
	this.searchKeyTimeOut = 400;
	/* Used to perform copy paste operation */
	this.clipBoard = "";	
	/* Holds behavior module instance */
	this.behaviour = new rs_behaviour( this );
	/* used to store prob message */
	this.probeErrorMsg = "";
	/* nav click restore window flag */
	this.isrestoreWindow = false;
	this.isNewBilling = tr_block_bill_edit;
	this.isTodaysCollection = tr_enable_today_collection;
	this.enablePaymentType = block_payment_type;
	this.istriggerWindow = false;
	this.paginationCurrentSearchField = "";
	this.lastDateElem = "";
	/* press keydown  flag is enabled keyup flag disable */
	/* pagination before open content */
	this.pageText = "";
	/* pagination before open column */
	this.pageSearchColumn = "";
	/* pagination before open content */
	this.pagenationTime = "";
	/*hot search table data cache*/
	this.hotSearchCache = {};
	// Flag for when grid have text field
	this.okBtnGridHaveField = false;
	//flag for pagination last search
	this.isLastSearchFocus = false;
	// current clicked is menu item
	this.currentClicked = false;
	
	this.keyDownUp = false;
	this.ikea_grid_loaded = false;
	this.fromFreezerWidget = false;
	
	this.window_doc_path =  null;
	this.limenAlertTime = 0;
	this.limenAlertInterval = null;
	this.limenAlertMessage = null;
	this.forceSessionClose = null;
	this.ikeaServerTime = null;
	
	this.branchCode = 0;
	this.userId = 0;
	this.dateOfFinalBill = "";
	this.isCrossDockLspUsers = false;
	this.shikharDelivery = 0;
	this.shikharQtmEnable = 0;
	this.onlinePaymentEnable = 0;
	this.shikharDiscardEnable  =0;
	
	/* that referance of this */
	var that = this;
	/* regEx patterns */
	this.pattern = {
		alpha: /^[a-zA-Z ]*$/,
		alphanumeric: /^[a-z0-9 ]+$/i,
		number: /^\d+$/,
		decimal: /^[\d.]+$/,
		date: /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,
		email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
	};

	this.mutex = {		
		"collection": ["POST_SAVE"],
		"salesreturn": ["POST_SAVESALESRETURN"],
		"quantum_import": ["POST_importSelected","POST_importSelectedCollection"],
		"billing": ["POST_BILLSAVE", "POST_CANCELBILL"],
		"cheque_maintenance": ["POST_SAVE"],
		"cheque_bounce": ["POST_SAVE"]
	};
		
	/* well initiate the controller and make it ready for loading context object ( whenever user changes page on main menu ) */
	this.initialize = function() {
		/* get the menu holder element's object */
		this.appHolder = $( "#" + this.appHolder );
		/* get the application holder element's object */
		this.menuHolder = $( "#" + this.menuHolder );
		/* Render the top main menu */
		//this.builtMainNavFrame();
		/* Register all common JS actions */
		this.registerEvents();	
		/* Register shortcuts */
		this.registerShortcut();
		rSuControllerObj.callLimenAjax();//run for first login immediatly
		this.limenAlertAjaxInterval = setInterval(rSuControllerObj.callLimenAjax,300000);//5 minutes // 5*60*1000
	};
	
	this.registerShortcut = function() { 	
		/* Registering common shortcut combo keys */
		shortcut.add( "Ctrl+Shift+F", function(e) {
			$("#search_menu_item_container").show();
			$("#ikea_home_menu_search").val("");
			$("#ikea_menu_search_quick_links").slideDown();
			$("#ikea_home_menu_search").focus();
		});
		
		shortcut.add( "Ctrl+F", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlF" );
			}			
		});
		shortcut.add( "Ctrl+U", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlU" );
			}			
		});
		
		shortcut.add( "Ctrl+R", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlR" );
			}			
		});
		
		shortcut.add( "Ctrl+I", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlI" );
			}			
		});
		
		shortcut.add( "Ctrl+O", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlO" );
			}			
		});
		shortcut.add( "Ctrl+N", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlN" );
			}			
		});
		shortcut.add( "Ctrl+P", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlP" );
			}			
		});
		shortcut.add( "Ctrl+S", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlS" );
			}			
		});
		shortcut.add( "Ctrl+M", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlM" );
			}			
		});
		shortcut.add( "Ctrl+Q", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlQ" );
			}			
		});
		shortcut.add( "Ctrl+Enter", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlEnter" );
			}			
		});
		shortcut.add( "Ctrl+Delete", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlDelete" );
			}
		});	
		shortcut.add( "Ctrl+G", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlG" );
			}
		});
		shortcut.add( "Alt+E", function() {
			 if( rSuControllerObj.contextObj ) {
			    rSuControllerObj.contextObj.onShortCut( "AltE" );
			 }   
		});
		/* Ctrl + X is for closing the current popup */
		
		/* Registering shortcut combo for Pagination popup column change */
		shortcut.add( "Ctrl+B", function() {
			rSuControllerObj.onCtrlB();
		});		
		/* Registering shortcut handler for all Function Keys */
		shortcut.add( "F1", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F1" );
			}
		});
		shortcut.add( "F2", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F2" );
			}
		});
		shortcut.add( "F3", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F3" );
			}
		});
		shortcut.add( "F4", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F4" );
			}
		});
		shortcut.add( "F5", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F5" );
			}
		});
		shortcut.add( "F6", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F6" );
			}
		});
		shortcut.add( "F7", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F7" );
			}
		});
		shortcut.add( "F8", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F8" );
			}
		});
		shortcut.add( "F9", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F9" );
			}
		});
		shortcut.add( "F10", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F10" );
			}
		});
		shortcut.add( "F11", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F11" );
			}
		});
		shortcut.add( "F12", function() {			
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "F12" );
			}
		});
		shortcut.add( "Insert", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "Insert" );
			}			
		});
		
		shortcut.add( "Ctrl+Shift+P", function() {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.contextObj.onShortCut( "CtrlShiftP" );
			}			
		});
		
		shortcut.add( "Ctrl+Home", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "CtrlHome", e.target );
			}			
		});
		shortcut.add( "Ctrl+End", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "CtrlEnd", e.target );
			}			
		});
		shortcut.add( "End", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "End", e.target );
			}			
		});
		shortcut.add( "Home", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "Home", e.target );
			}			
		});
		shortcut.add( "Ctrl+up", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "CtrlUp", e.target );
			}			
		});
		shortcut.add( "Ctrl+down", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "CtrlDown", e.target );
			}			
		});
		shortcut.add( "f1", function(e) {
			if( rSuControllerObj.contextObj ) {
				rSuControllerObj.onShortCut( "f1", e.target );
			}			
		});
		
		/* Added by Sark for dashboard module */
		shortcut.add( "Ctrl+Shift+D", function() {
			window.open( '/rsunify/views/dashboard/admin.jsp', '_blank' ); 
		});
		
		shortcut.add( "Alt+E", function() {
			if(ikeaDashboardManagerObj)
				if(isCrossDock_User == "false" && !$("#rsu-dashboard-edit-btn").hasClass("disabled") && !$(".messager-window").is(":visible"))
					ikeaDashboardManagerObj.enableEditMode();	
		});
		
		shortcut.add( "Alt+S", function() {
			if(ikeaDashboardManagerObj)
				ikeaDashboardManagerObj.disableEditMode();
		});
		
		shortcut.add( "Esc", function() {
			if(ikeaDashboardManagerObj)
				ikeaDashboardManagerObj.handleEscKey();
				
		});
	};
	
	this.onShortCut = function( _key, target ){
		target = $( target );
		
		
		if(typeof rSuControllerObj.contextObj != "undefined" && rSuControllerObj.contextObj != null && rSuControllerObj.contextObj.popup != null && rSuControllerObj.contextObj.popup.meta.type == "pagination"){
			if( _key == "CtrlHome" ) {
					this.triggerSearch();
			} else if( _key == "CtrlEnd" ){
					this.triggerSearchLastPage();
			}
			return;
		} 
		if( rSuControllerObj.isGridItem( target ) || target.hasClass('rsu-grid-cell-editor-box') ){
			target = target.hasClass('rsu-grid-cell-editor-box') ? rSuControllerObj.contextObj.popup.grid.gridTable.find('td.active') : target;
			rSuControllerObj.contextObj.onFieldOutFocus( target);
			if( rSuControllerObj.contextObj.onSelectNextGrid( _key, target, target, "controller" ) ){
				var popup = rSuControllerObj.contextObj.popup.meta.name;
				$('#rsu-popup-'+popup+'-grid-area tbody').find('td.active').removeClass('active');
				if( _key == "CtrlHome" ) {
					if( rSuControllerObj.contextObj.popup.grid.records == null ){
						target.closest( "tbody" ).find(  "tr:first td[data-field="+ target.data( "field" ) +"]" ).addClass( "active" ).focus();
					} else {
						rSuControllerObj.setGridFocus( 0, target.data( "field" ) );
					}
					
				} else if( _key == "CtrlEnd" ){
					if( rSuControllerObj.contextObj.popup.grid.records == null ){
						target.closest( "tbody" ).find(  "tr:last td[data-field="+ target.data( "field" ) +"]" ).addClass( "active" ).focus();
					} else {
						rSuControllerObj.setGridFocus( rSuControllerObj.contextObj.popup.grid.records.length - 1, target.data( "field" ) );
					}
				} else if( _key == "Home" ){
					target.closest( "tr" ).find( "td:first" ).nextAll( ":visible:first" ).addClass( "active" ).focus();
				} else if( _key == "End" ){		
					target.closest( "tr" ).find( "td:visible:last" ).addClass( "active" ).focus();
				} else if( _key == "CtrlUp" ){		
					if( rSuControllerObj.contextObj.popup.grid.records == null ){
						target.closest( "tbody" ).find(  "tr:first ").find( "td:first" ).nextAll( ":visible:first" ).addClass( "active" ).focus();
					} else {
						rSuControllerObj.setGridFocus( 0, target.closest( "tbody" ).find(  "tr:first ").find( "td:first" ).nextAll( ":visible:first" ).data("field") );
					}
				}else if( _key == "CtrlDown" ){		
					if( rSuControllerObj.contextObj.popup.grid.records == null ){
						target.closest( "tbody" ).find(  "tr:last ").find( "td:visible:last" ).addClass( "active" ).focus();
					} else {
						rSuControllerObj.setGridFocus( rSuControllerObj.contextObj.popup.grid.records.length - 1, target.closest( "tbody" ).find(  "tr:last ").find( "td:visible:last" ).data( "field" ) );
					}
				} 
			}
		} else {
			if( _key == "CtrlHome" ) {
					$( "#rsu-popup-"+rSuControllerObj.contextObj.popup.meta.name ).find( ".ikea-most-first-field:visible" ).focus().select();
			} else if( _key == "CtrlEnd" ){
					$( "#rsu-popup-"+rSuControllerObj.contextObj.popup.meta.name ).find( ".ikea-most-last-field:visible:not(.disable)" ).focus();
			} else if( _key == "f1" ){
				if( dlg.is( ":visible" ) && dlg[0].innerText.trim() == "Please post all the bills of previous TDP to continue Press [F1] for Help." ){
					this.showPopupHelp( $( '<div class="" data-doc_context="posting_bill_previous_tdp"></div>' ) );
				} else {
					this.showPopupHelp( $( "#rsu-popup-"+rSuControllerObj.contextObj.config.main_window ).find( ".rsu-popup-control-help-btn" ) );
				}
			} 
		} 
	}
	
	this.moveControlGridFocus = function(_key,index,field){
		$('#rsu-popup-'+popup+'-grid-area tbody').find('td.active').removeClass('active');
		var popup = rSuControllerObj.contextObj.popup.meta.name;
		if( _key == "CtrlHome" ) {
			if( rSuControllerObj.contextObj.popup.grid.records == null ){
				$('#rsu-popup-'+popup+'-grid-area tbody').find( "tr:first td[data-field="+ field +"]" ).addClass( "active" ).focus();
			} else {
				rSuControllerObj.setGridFocus( 0, field );
			}
			
		} else if( _key == "CtrlEnd" ){
			if( rSuControllerObj.contextObj.popup.grid.records == null ){
				$('#rsu-popup-'+popup+'-grid-area tbody').find(  "tr:last td[data-field="+ field +"]" ).addClass( "active" ).focus();
			} else {
				rSuControllerObj.setGridFocus(   rSuControllerObj.contextObj.popup.grid.records.length - 1, field );
			}
		} else if( _key == "Home" ){
			$('#rsu-popup-'+popup+'-grid-area tbody').find('tr:eq('+index+')').find( "td:first" ).nextAll( ":visible:first" ).addClass( "active" ).focus();
		} else if( _key == "End" ){		
			$('#rsu-popup-'+popup+'-grid-area tbody').find('tr:eq('+index+')').find( "td:visible:last" ).addClass( "active" ).focus();
		} else if( _key == "CtrlUp" ){		
			if( rSuControllerObj.contextObj.popup.grid.records == null ){
				$('#rsu-popup-'+popup+'-grid-area tbody').find('tr:eq(0)').find( "td:first" ).nextAll( ":visible:first" ).addClass( "active" ).focus();
			} else {
				rSuControllerObj.setGridFocus( 0, $('#rsu-popup-'+popup+'-grid-area tbody').find('tr:eq(0)').find( "td:first" ).nextAll( ":visible:first" ).data("field") );
			}
		} else if( _key == "CtrlDown" ){		
			if( rSuControllerObj.contextObj.popup.grid.records == null ){
				$('#rsu-popup-'+popup+'-grid-area tbody').find(  "tr:last ").find( "td:visible:last" ).addClass( "active" ).focus();
			} else {
				rSuControllerObj.setGridFocus( rSuControllerObj.contextObj.popup.grid.records.length - 1 , $('#rsu-popup-'+popup+'-grid-area tbody').find(  "tr:last ").find( "td:visible:last" ).data( "field" ) );
			}
		} else if( _key == 33 ){
			rSuControllerObj.setGridFocusForPageKeys( Math.max((index - 7), 0), field);
			return false;
		} else if( _key == 34 ){
			var maxIndex = Math.max(99, rSuControllerObj.contextObj.popup.grid.records != null ? rSuControllerObj.contextObj.popup.grid.records.length:0);
			rSuControllerObj.setGridFocusForPageKeys(Math.min((index + 7),maxIndex), field);
			return false;
		} else if( _key == 13 ){
			rSuControllerObj.setGridFocus( index, field );
			var tr = $('#rsu-popup-'+popup+'-grid-area tbody').find(  "tr td[data-tr_index='"+index+"'] ").parent();
			if( tr.find( "td[data-field="+field+"]" ).nextAll(":visible").length() != 0 ){
				tr.find( "td[data-field="+field+"]" ).nextAll(":visible:first").addClass( "active" ).focus();
			} else {
				tr.next().find( "td:first" ).nextAll( ":visible:first" ).addClass( "active" ).focus();
			}
		} else if( _key == 38 ){
			rSuControllerObj.setGridFocus( (index+1), field);
		} else if( _key == 40 ){
			rSuControllerObj.setGridFocus( Math.max((index - 1), 0), field);
		}
	}
	
	this.handle_nav_item_click = function( mitem ) {
		/* Store the currently clicked menu item reference */
		this.menuItem = mitem;
		//if iss restore menu item click added by pj
		if( !(mitem.parent().parent().is("#mm9")) ){
			this.clickMenuName = this.menuItem.text();
		}
		
		if( mitem.parent().parent().is("#mm9") || this.istriggerWindow == true ){
			this.isrestoreWindow = true;
		}else{
			this.isrestoreWindow = false;
		}		
		/*
		if( this.menuItem.text() == "New Billing" ||  this.menuItem.text().slice( 3, this.menuItem.text().length ) == "New Billing" ){
			this.isNewBilling = true;
		} else{
			this.isNewBilling = false;
		}
		if( this.menuItem.text() == "Today's Collection" ||  this.menuItem.text().slice( 3, this.menuItem.text().length ) == "Today's Collection" ){
			this.isTodaysCollection = true;
		} else{
			this.isTodaysCollection = false;
		}
*/
		
		/* Do not proceed if any ajax operation is in progress
		 * Also don't allow to access main menu when there are child popups opened */
		if( this.subPopupCount > 0 ) {
			this.probeUser( "Please close all child popup before switching.!", "info" );
			return;
		}
		
		if( ! this.ajaxFlaQ ) {
			this.probeUser( "Please wait while finishing the current operation.!", "info" );
			return;
		}
		
		
		
		/* Check whether this is a Transaction menu item */
		var context =  mitem.attr('data-context');		
		if (typeof context == 'undefined' || context === false) {
			/* menu that has been clicked is not belongs to transaction */
			$( "#rsu-transaction-body-wrapper" ).hide();
			//$( ".middle-content" ).show();
			//$( "#loadPage" ).show();
			
			$("#loadPage").hide();
			$("div.rsu-probe-container").hide();
			//$("#rsu-transaction-body-wrapper").hide();
			$("#rsu-dashboard-container").show();
			$("div.ikea-acm-info-marquee").show();
			if( ikeaDashboardManagerObj != null &&
				typeof ikeaDashboardManagerObj != 'undefined' &&
				ikeaDashboardManagerObj.getUserAlertMessage != "undefined" ){
				ikeaDashboardManagerObj.getUserAlertMessage();
			}
			
			return;
		}
		/* Hide master section - if it is opened already */
		$( "#loadPage" ).hide();
		//$( ".middle-content" ).hide();
		/* Make sure Transaction body is opened */
		$( "#rsu-transaction-body-wrapper" ).show();	
		
		/* Make sure the probe container is visible */
		$("div.rsu-probe-container").show();
		/* Hide the dashboard */
		$("#rsu-dashboard-container").hide();
		$(".ikea-acm-info-marquee").hide();
		
		$("div.widget-holder").html("");
		/**/
		//$("#rsu-dashboard-menu-item").find("span.l-btn-text").html("Dashboard");
		//$("#rsu-dashboard-menu-item").attr("data-context", "dashboard");
		
		/* Check whether the menu is for maximizing */
		if( mitem.attr( "data-task" ) == "restore" ) {
			this.maximizePopup( mitem );
		} else {
			/* Initiate the dependencies loading operation */
			var dependencies = [];
			var context = this.menuItem.attr( "data-context" );
			if( typeof rsuDependency[ context ] != 'undefined' ) {
				/* Reset the Script Loader counter ( just in case ) */
				this.scriptIndex = 0;
				dependencies = rsuDependency[ context ];				
				if( dependencies[0] != "" ) {
					this.loadScript( dependencies[ this.scriptIndex ] );
				}				
			} else {
				alert( "Module dependencies configuration not found" );
			}											
		}
	};
	
	//This handler is responsible for registering all common JS events.	
	this.registerEvents = function() {	
		$(document).on('focus', ':input', function() {
		      $(this).attr('autocomplete', 'off');
		});
		// Context menu navication
		document.addEventListener(
				'keydown',
				function( event ){   
					if ( $('object').length == 0 ) {
						var contextMenuwrapper = $( "#rsu-context-menu-box" );
						var contextMenu		   = contextMenuwrapper.find( ".active_context" )
						if( contextMenuwrapper.is( ":visible" ) ){				
							if( event.keyCode == 40 ){
								if( contextMenu.parent().next().find( "a" ).length != 0 ){
									contextMenu.parent().next().find( "a" ).addClass( "active_context" ).focus();
									contextMenu.removeClass( "active_context" );
								} else{
									contextMenuwrapper.find( "li:first-child a" ).addClass( "active_context" ).focus();
									contextMenu.removeClass( "active_context" );
								}
							} else if( event.keyCode == 38 ){
								if( contextMenu.parent().prev().find( "a" ).length != 0 ){
									contextMenu.parent().prev().find( "a" ).addClass( "active_context" ).focus();
									contextMenu.removeClass( "active_context" );
								} else{
									contextMenuwrapper.find( "li:last-child a" ).addClass( "active_context" ).focus();
									contextMenu.removeClass( "active_context" );
								}
							} else if( event.keyCode == 13 ){
								$( ".active_context" ).trigger( "click" );
							}
							event.preventDefault();
							event.stopImmediatePropagation();
						} 
					}
				});
			
		/* Registering click event for secondary popup's restore buttons 
		 * ( which would be located at bottom right part of the screen ) */
		$( document ).on( "click", "a.rsu-sec-popup-restore-btn", this, function(e){
			/* do not proceed if any ajax operation is in progress */
			if(	! e.data.ajaxFlaQ ) {
				return;
			}
			
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			
			var _popup = $( this ).attr( "data-popup" );
			var _context = $( this ).attr( "data-context" );
			
			/* Switch the context object, if it is not belong to the popup that being restored ( very unlikely ) */
			if( e.data.context != _context ) {
				e.data.context = _context;
				e.data.contextObj = e.data.contexts[ _context ];
			}
			
			e.data.lastPopup = e.data.contextObj.popup.meta.name;
			/* Switch the current popup object of the context to the popup that is being restored  */
			e.data.contextObj.popup = e.data.contextObj.popups[ _popup ];
			/* Show the popup */
			e.data.contextObj.popup.window.find("div.rsu-popup").fadeIn("normal");			
			/* increment the switch view counter */
			e.data.switchViewCount++;			
			/* Update the z-index property */			
			e.data.contextObj.popup.window.css( "z-index", e.data.currentZIndex + ( 10 * e.data.switchViewCount ) );
			/* Update the currentZIndex property */
			e.data.currentZIndex = parseInt( e.data.contextObj.popup.window.css( "z-index" ) );			
			/* Remove the restore link from bottom right corner, which is no longer required */
			$( this ).remove();
			if( e.data.paginationCurrentSearchField != "" ){
				e.data.paginationCurrentSearchField.trigger( "focus" );
			}
			e.preventDefault();
		});	
		
		/**
		 * Context menu specific event registrations ( when user right click on the page )
		 */
		
		//Trigger action when the context menu is about to be shown
		$( document ).on( "contextmenu", "div.rsu-popup", this, function(e) {		    
		    e.preventDefault();	  
			e.data.initContextMenu();
		    if( $( "#rsu-transaction-body-wrapper" ).css( 'display' ) === 'none' ) {
		    	/* Don't response for right click action for non Transaction modules */
		    	return;
		    }		    
	    	if( e.data.contextObj && e.data.contextObj.popup.meta.type != "pagination" && e.data.contextObj.popup.meta.type != "landscape-small" ) {		    
		    	$( "#rsu-context-menu-box" ).finish().toggle( 100 ).css({
			        top: e.pageY + "px",
			        left: e.pageX + "px"
			    });
		    	$( "#rsu-context-menu-box li:first-child a" ).addClass( "active_context" ).focus();
		    }	    		     
		});

		/* Close our custom context menu if mouse button clicked anywhere on the document */
		var me = this;
		$( document ).on( "mousedown", function (e) {		
			if( !rSuControllerObj.ajaxFlaQ ){
				return;
			} 			
		    if ( !$( e.target ).parents( "#rsu-context-menu-box" ).length > 0 ) {			        
		        $("#rsu-context-menu-box").hide();
		    }
		});
		/* Handle context menu item click event */
		$(document).on( "click contextmenu", "#rsu-context-menu-box li a", this, function(e){		    
		    // Hide it AFTER the action was triggered
			if( e.type == "contextmenu" ){
				$( this ).click();
			}
		    $( "#rsu-context-menu-box" ).hide();
		    e.preventDefault();
		});
		
		$( document ).on( "click", "a.rsu-print-dialog-close-btn", this, function(e) {
			$( "#rsu-context-menu-box" ).hide();
			$( "div.rsu-popup-print-dialog-ghost-back" ).remove();
		});
		
		/**
		 * Global event registration for Popup Controls ( Help, MinMax & Close )
		 */	
		
		// Registering click event for Help button
		$( document ).on( "click", "a.rsu-popup-control-help-btn", this, function(e) {
			e.data.showPopupHelp( $( this ) );
			e.preventDefault();
		});
		
		// Registering click event for MinMax button
		$( document ).on( "click", "a.rsu-popup-control-minmax-btn", this, function(e) {
			/* do not proceed if any ajax operation is in progress */
			if(	! e.data.ajaxFlaQ ) {
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			e.data.minimizePopup( $( this ),1 );
			e.preventDefault();
		});
		
		// Registering click event for Close button
		$( document ).on( "click", "a.rsu-popup-control-close-btn", this, function(e) {
			e.data.closeFlagChanger();
			if( e.data.closePopupFlg ){
				e.data.closePopupFlg = false;	
				/* Do not proceed if any ajax operation is in progress */
				if(	! e.data.ajaxFlaQ ) {
					return;
				}
				var type =  e.data.contextObj.popup.meta.type;
				e.data.closePopup( false );	
				e.data.paginationPopupCloseMsg(type);
				e.preventDefault();
			}
		});
		
		/**
		 * Global event registration for Popup Bottom Action Bar ( New, Find, Ok, Close & Print )
		 */		
	
		// Registering click event for Popup Bottom Action Bar Close button
		$( document ).on( "click", "a.rsu-popup-action-ok", this, function(e) {	
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			// check ajax call
			if(	! e.data.ajaxFlaQ ) {
				e.data.probeUser( "Please wait while processing", "warning" );
				return;
			}
			e.data.closeFlagChanger();
			if( e.data.closePopupFlg ){
				e.data.closePopupFlg = false;			
				$( "#rsu-context-menu-box" ).hide();
				if( $( this ).hasClass("disable") ) {
					return;
				}
				if( e.data.contextObj.popup.meta.type == "pagination" && !$( this ).hasClass( "rsu-pagination-btn" ) ) {
					if( e.data.contextObj.popup.grid.gridTable ) {
						var active = e.data.contextObj.popup.grid.gridTable.find( "tbody td.active" );
						if( active.length != 0 && e.data.contextObj.popup.grid.records ) {
							var popup_name = e.data.contextObj.popup.meta.name,
							record = JSON.parse( decodeURI( active.parent().find( "td:first-child" ).data( "record" ) ) );
							if( ! record ) {
								record = {};
							}
							e.data.closePopup( false );
							e.data.contextObj.onPageRecord( record, popup_name );					
						} else {
							e.data.probeUser( "Please select a value.!", "info" );
						}
					} else {
						// Just close it - no record
						e.data.closePopup( false );
					}				
					return;
				}
				if( typeof e.data.contextObj.onBtnOkClick != 'undefined' ) {
					// If the current context's object has handler for this event then call it.
					e.data.contextObj.onBtnOkClick( $( this ) );
				} else {
					// If the current context's object doesn't have have handler for this event then this event at Document level
					$( document ).trigger( "rsuBtnOkClick", [ $( this ) ] );
				}					
				e.preventDefault();
			}
		});
		
		// Registering click event for Popup Bottom Action Bar New button
		$( document ).on( "click", "a.rsu-popup-action-new", this, function(e) {
			$( "#rsu-context-menu-box" ).hide();
			if( $( this ).hasClass("disable") && ! e.data.ajaxFlaQ ) {
				return;
			}
			
			/* Reload mutex lock */		
			if (e.data.mutex[e.data.context] && Array.isArray(e.data.mutex[e.data.context])) {			
				for (let i = 0; i < e.data.mutex[e.data.context].length; i++) {
					e.data.contextObj[e.data.mutex[e.data.context][i]] = Date.now().toString(36) + Math.random().toString(36).substr(2);
				}			
			}
			
			e.data.resetPopup( false );
			e.preventDefault();
		});
		
		// Registering click event for Popup Bottom Action Bar Find button
		$( document ).on( "click", "a.rsu-popup-action-find", this, function(e) {
			$( "#rsu-context-menu-box" ).hide();
			if( $( this ).hasClass("disable") && ! e.data.ajaxFlaQ ) {
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			if( typeof e.data.contextObj.onBtnFindClick != 'undefined' ) {
				// If the current context's object has handler for this event then call it.
				e.data.contextObj.onBtnFindClick( $( this ) );
			} else {
				// If the current context's object doesn't have have handler for this event then this event at Document level
				$( document ).trigger( "rsuBtnFindClick", [ $( this ) ] );
			}
			e.preventDefault();
		});
		
		// Registering click event for Popup Bottom Action Bar Close button
		$( document ).on( "click", "a.rsu-popup-action-close", this, function(e) {			
			$( "#rsu-context-menu-box" ).hide();
			/* Do not proceed if any ajax operation is in progress */
			if(	! e.data.ajaxFlaQ || $( this ).hasClass("disable") ) {
				return;
			}
			e.data.closePopup( false );
			// If the current context's object doesn't have have handler for this event then this event at Document level
			$( document ).trigger( "rsuBtnCloseClick", [ $( this ) ] );		
			//change the flag close popup				
			e.preventDefault();			 
					
		});		
		
		// Registering click event for Popup Bottom Action Bar Cancel button
		$( document ).on( "click", "a.rsu-popup-action-cancel", this, function(e) {	
			e.data.closeFlagChanger();
			if( e.data.closePopupFlg ){
				e.data.closePopupFlg = false;
				$( "#rsu-context-menu-box" ).hide();	
				
				/* Do not proceed if any ajax operation is in progress */
				if(	! e.data.ajaxFlaQ || $( this ).hasClass("disable") ) {
					return;
				}
				var type =  e.data.contextObj.popup.meta.type;
				e.data.closePopup( false );
				e.data.paginationPopupCloseMsg(type);
				// If the current context's object doesn't have have handler for this event then this event at Document level
				$( document ).trigger( "rsuBtnCancelClick", [ $( this ) ] );
				e.preventDefault();		
			}
		});		
		
		// Registering click event for Popup Bottom Action Bar Print button
		$( document ).on( "click", "a.rsu-popup-action-print", this, function(e) {
			$( "#rsu-context-menu-box" ).hide();
			if( $( this ).hasClass("disable") ) {
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			if( typeof e.data.contextObj.onBtnPrintClick !=' undefined' ) {
				// If the current context's object has handler for this event then call it. 
				e.data.contextObj.onBtnPrintClick( $( this ) );
			} else {
				// If the current context's object doesn't have have handler for this event then this event at Document level
				$( document ).trigger( "rsuBtnPrintClick", [ $( this ) ] );
			}
			e.preventDefault();
		});
		
		$( document ).on( "click", "a.rsu-pagination-btn", this, function(e) {
			
			if(	! e.data.ajaxFlaQ ) {
				e.data.probeUser( "Please wait while processing", "warning" );
				return;
			}
			
			var flaQ = false; 
			
			if( $( this ).hasClass( "rsu-pagination-prev" ) ) {
				if( $("#rsu-pagination-popup-page").val() > 1 ) {
					flaQ = true; 
					e.data.contextObj.popup.pageNumber--;
					$("#rsu-pagination-popup-page").val( e.data.contextObj.popup.pageNumber );					
				}				
			}
			if( $( this ).hasClass("rsu-pagination-next") ) {
				if( $("#rsu-pagination-popup-page").val() < e.data.contextObj.popup.totalPages ) {
					flaQ = true;
					e.data.contextObj.popup.pageNumber++;
					$("#rsu-pagination-popup-page").val( e.data.contextObj.popup.pageNumber );	
				}
			}	
			if( $( this ).hasClass("rsu-pagination-first") ) {
				flaQ = true; 
				e.data.contextObj.popup.pageNumber = 1;
				$("#rsu-pagination-popup-page").val( e.data.contextObj.popup.pageNumber );		
			}
			if( $( this ).hasClass("rsu-pagination-last") ) {
				flaQ = true; 
				e.data.contextObj.popup.pageNumber = e.data.contextObj.popup.totalPages;
				$("#rsu-pagination-popup-page").val( e.data.contextObj.popup.pageNumber );
			}

			if( flaQ ) {			
				e.data.isPaginationPager = true;
				if( !$.isEmptyObject( rSuControllerObj.pageCache ) && typeof rSuControllerObj.pageCache[e.data.context] != "undefined" && typeof rSuControllerObj.pageCache[e.data.context][e.data.contextObj.popup.meta.name] != "undefined" &&    !$.isEmptyObject( rSuControllerObj.pageCache[e.data.context][e.data.contextObj.popup.meta.name] ) ){
					var searchRec = e.data.doLocalPageSearch( e.data.lastSearchTxt, $( "#selectOnId" ).val(), $( "#selectTypeId" ).val() );
					if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) && $( "#inputSrId_1" ).val() != "" ){
						searchRec = e.data.doLocalPageSearch( $( "#inputSrId_1" ).val(), $( "#selectOnId_1" ).val(), $( "#selectTypeId_1" ).val(), searchRec );
					}
					var filterpagerec = e.data.filterPage( searchRec, $("#rsu-pagination-popup-page").val() );
					e.data.contextObj.popup.handlePaginationResponse( filterpagerec );

				}else{
					var params = e.data.prepareRequestParams( null, e.data.contextObj.popup.meta.actions.rsu_post.data );
					var params_2 = "";
					if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) ){
						params["additionalJsonParam"]={"additionalColumnToSearch": $( "#selectOnId_1" ).val() ,"additionalColumnSearchText": $( "#inputSrId_1" ).val() ,"additionalTextSearchType":$( "#selectTypeId_1" ).val() };
					}	
					params["columnSearchText"] = $( "#inputSrId" ).val();
					e.data.request = e.data.prepareRequest( "POST", e.data.contextObj.popup.meta.actions.rsu_post.action,params, "json", "LIST" );
					e.data.ajaxFlaQ = true;
					e.data.dock();
				}
				
				
			}			
			
			e.preventDefault();
			
		});	
		
		/* Register handler for global keydown event - which will be used to close the popups */
		$( document ).on( "keydown", this, function(e) {	
			if ( $('object').length == 0 ) {
				var keyCode = e.data.getKeyCode( e );
				if( !e.data.ajaxFlaQ ){
					return;
				}
				if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
					dateValidErrorlastDateElem.focus();
					e.data.probeUser( "Please enter valid date", "warning" );
					return;
				}

				if( $( ".messager-window" ).is( ":visible" ) && ( keyCode != 32 && keyCode != 13) ){
					e.stopPropagation();
					return;		
				}

				//enterKey press when menu is hover open window
				if ( keyCode == 13 ){
					$( ".menu-active" ).trigger( "click" );    
				}

				var masterflg = true;
				if( typeof mainTablFlags != "undefined" )
					masterflg = mainTablFlags.masterScreenOpened;

				if(  !masterflg && ( rSuControllerObj.contextObj == null ) || e.data.contextObj && e.data.contextObj.popup && e.data.contextObj.popup.meta.type == "pagination" && keyCode == 9 ) {
					return false;
				}
				/* Check if it is ESC key */
				if( keyCode == 27 ) {
					
					if( $("#rsu-context-menu-box").is(":visible") ){
						$("#rsu-context-menu-box").hide();
						e.stopPropagation();
						return false;
					}
					
					if( $( ".messager-window" ).is( ":visible" ) ) {
						e.stopPropagation();
						return false;
					}
					/* do not handle if any grid cell editing operation is being happening */
					if( $( this ).hasClass( "rsu-grid-cell-editor-box" ) ) {
						e.stopPropagation();
						return;					
					}			
					e.data.closePopup( false );
					return false;
				}	
				if( $( ".messager-window" ).is( ":visible" ) && keyCode == 32 ){
					$( ".l-btn-focus" ).click();
				}
				if( typeof e.data.contextObj != "undefined" && e.data.contextObj != null && e.data.contextObj.popup != null ){
					if(  !masterflg  && typeof e.data[ e.data.contextObj.popup.meta.name ] != "undefined" && ( keyCode == 40 || keyCode == 39 || keyCode == 38 || keyCode == 37 || keyCode == 33 || keyCode == 34 ) ){
						var scrollerInF = e.data[ e.data.contextObj.popup.meta.name ].scrollerAct;
						if( scrollerInF.isScrolled && e.data.contextObj.popup.meta.type != "pagination" ){						
							var current   = $( "#rsu-popup-"+ e.data.contextObj.popup.meta.name +"-grid-area tbody tr td[data-tr_index="+ scrollerInF.scrolledIndex +"]" ).parent().find( "td[data-field="+scrollerInF.scrolledField+"]" );
							
							
							if( keyCode == 40 && !e.ctrlKey ){
								e.data.navigateGrid( keyCode, current, "down" );
							}
							if( keyCode == 39 ){
								e.data.navigateGrid( keyCode, current, "next" );
							}
							if( keyCode == 38 && !e.ctrlKey  ){
								e.data.navigateGrid( keyCode, current, "up" );
							}
							if( keyCode == 37 ){
								e.data.navigateGrid( keyCode, current, "prev" );
							}
							if( keyCode == 33 ){
								e.data.navigateGrid( keyCode, current, "pageUp" );
							}
							if(keyCode == 34 ){
								e.data.navigateGrid( keyCode, current, "pageDown" );
							}
							scrollerInF.isScrolled = false;
						}
					}
					if( e.data.contextObj.popup.meta.type == "pagination" ){
						var elem = $( ".rsu-popup-pagination .rsu-popup-content-section" );	
						var LstPage = parseInt( $( "#rsu-pagination-popup-page" ).val() );
						e.stopImmediatePropagation();

						if( !(  e.keyCode < 37 || e.keyCode > 40 ) ||  e.keyCode == 34 || e.keyCode == 33  ){
							if( ( e.keyCode == 40 || e.keyCode == 39|| e.keyCode == 34 )  && elem.find( "td.active" ).parent().is( 'tr:last-child' ) ) {
								if( parseInt( e.data.contextObj.popup.totalPages ) >= parseInt( e.data.contextObj.popup.pageNumber )+1 ){
									$( "#rsu-pagination-popup-page" ).val( parseInt( e.data.contextObj.popup.pageNumber )+1 );
									$("#rsu-pagination-popup-page").trigger( "keyup" );
								}
							} else if( ( e.keyCode == 37 || e.keyCode == 38 ||  e.keyCode == 33 ) && elem.find( "td.active" ).parent().is( 'tr:first-child' ) ){
								if( parseInt( e.data.contextObj.popup.pageNumber ) != 1 ){
									$( "#rsu-pagination-popup-page" ).val( parseInt( e.data.contextObj.popup.pageNumber )-1 );
									$("#rsu-pagination-popup-page").trigger( "keyup" );
								}
							}
							e.preventDefault();						
						}  

						if( e.ctrlKey && e.keyCode == 39 && !isNaN( LstPage ) ){		
							$("#rsu-pagination-popup-page").val( LstPage+1 );
							$("#rsu-pagination-popup-page").trigger( "keyup" );
						} else if( e.ctrlKey && e.keyCode == 37 && LstPage != 1 ){
							$("#rsu-pagination-popup-page").val( LstPage-1 );
							$("#rsu-pagination-popup-page").trigger( "keyup" );
						} else if( e.keyCode == 34 || e.keyCode == 33 ){					
							elem = $( ".rsu-popup-pagination .rsu-popup-content-wrapper-auto-width" ).length == 1 ? $( ".rsu-popup-pagination .rsu-popup-content-wrapper-auto-width" ) : elem;	
							cellCount  = elem.find( "tr" ).length;
							if( e.keyCode == 34 ){
								if( !( elem.scrollTop() + elem.innerHeight() >= elem[0].scrollHeight ) ){						
									var page = elem.find( ".active" ).parent().index() + 20;
									elem.find( ".active" ).removeClass( "active" );
									page = cellCount <= page ? "last" : page;
									if( page != "last" ){
										elem.find( "tr:nth-child( "+ page +" ) td:nth-child(2)" ).addClass( "active" ).focus();
									} else {
										elem.find( "tr:last-child td:nth-child(2)" ).addClass( "active" ).focus();
									}
								} else {
									elem.find( ".active" ).removeClass( "active" );
									elem.find( "tr:last-child td:nth-child(2)" ).addClass( "active" ).focus();
								}
							} else {
								if( elem.scrollTop != 0 ){
									var page = elem.find( ".active" ).parent().index() - 20;
									elem.find( ".active" ).removeClass( "active" );
									page = page <= 0 ? 1 : page;							
									elem.find( "tr:nth-child( "+ ( page ) +" ) td:nth-child(2)" ).addClass( "active" ).focus();						
								} else {
									elem.find( ".active" ).removeClass( "active" );
									elem.find( "tr:first-child td:nth-child(2)" ).addClass( "active" ).focus();						
								}
							}
							e.preventDefault();
						} 

					} else {
						if( e.data.contextObj != null && ( e.keyCode == 33 || e.keyCode == 34 ) ){
							if( e.data.contextObj.popup != null && typeof e.data.contextObj.popup.grid.meta.scroller_performance != "undefiend" && e.data.contextObj.popup.grid.meta.scroller_performance ){
								//e.data.pageDownUpcall( e.keyCode, "" );
								e.preventDefault();
							}
						}
						/*if( e.keyCode == 36 ){
						rSuControllerObj.contextObj.popup.window.find( "input:visible:first" ).focus();
					}else if( e.keyCode == 35 ) {
						rSuControllerObj.contextObj.popup.window.find( "a:not(.disable):visible:last" ).focus();
					}*/
					}
				}
			}
			
		});
		
		/**		 
		 * Since Sep/08/2016
		 * Backspace won't work ( and lot of other issues ), So we opted to inject input text box
		 * inside the table cell for editing purpose
		 * Dedicated Event Handler for Table Cell Editing Starts here
		 */
		/* Dedicated key down event handler registration for cell grid editing */
		$( document ).on( "keydown", "input.rsu-grid-cell-editor-box", this, function( e ) {
			if(	! e.data.ajaxFlaQ ) {
				return;
			}
			var keyCode = e.data.getKeyCode( e );
			/* Ok now forward the event to Context Object */
			if( typeof e.data.contextObj.onFieldKeyDown != 'undefined'  && !$(".menu-top").is(":visible")) {
				// If the current context's object has handler for this event then call it. 
				e.data.contextObj.onFieldKeyDown( keyCode, $( this ) );
			}
			/* Prevent  */
			if( keyCode == 27 ) {
				e.data.closePopup( false );	
				e.stopPropagation();
			}
			if( $( this ).attr( "data-behaviour" ) == "number" ) {	
				if( keyCode == 32 ){
					return false;
				}
			}
			if( $( this ).attr( "data-behaviour" ) == "decimal" ) {	
				if( keyCode == 32 ){
					return false;
				}
				e.data.applyDecimalFractionalBehaviour( $( this ), keyCode, e );				
			}	
			if( keyCode == 9 ){
				if(e.data.context != "payment"){
					e.data.navigateGrid( 9, $( this ).parent(), "tab" );	
				}else{
					e.data.navigateGrid( 9, $( this ), "tab" );	
				}
			}
			
			if( keyCode == 33  ){
				e.data.navigateGrid( keyCode, $( this ).parent(), "pageUp" );				
			}
			if( keyCode == 34  ){
				e.data.navigateGrid( keyCode, $( this ).parent(), "pageDown" );				
			}
			
			
			if( e.data.contextObj != null && ( e.keyCode == 33 || e.keyCode == 34 ) ){
				if( e.data.contextObj.popup != null && typeof e.data.contextObj.popup.grid.meta.scroller_performance != "undefiend" && e.data.contextObj.popup.grid.meta.scroller_performance ){
					//e.data.pageDownUpcall( e.keyCode, $( this ).closest( "td" ) );
					e.preventDefault();
				}
			}
			
			/* If enter or esc key is pressed then trigger the blur event */
			if( keyCode == 13 || keyCode == 27 || keyCode == 38 || keyCode == 40 || keyCode == 33 || keyCode == 34 ) {
				/* Restore the lastActive element to the parent ( TD ), so that rest of the logic won't break */
				e.data.lastActive = $( this ).parent();
				/* Put the edited vale back to the TD */
				$( e.target ).parent().html( e.target.value );				
				var eve = $.Event( 'keydown' );
				eve.which = 13;
				//parent.trigger( eve );	
			} else {
				if( ( keyCode != 37 && keyCode != 39 ) || $( this ).val() != "" ) {
					e.stopPropagation();								
					if( keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 45 && keyCode != 32 && keyCode != 46 ) {						
						return e.data.behaviour.checkBehaviour( $(this), e, keyCode, true );					
					}	
				}							
			}			
			// Trigger the common 'rsuFieldKeyDown' for other scripts to hook up
			$( document ).trigger( "rsuFieldKeyDown", e, keyCode, e.data, $( this ) );
		});
		
		$(document).on("keydown","#ikea_home_menu_search",this,function(e){
			var value = $(this).val();
			var spclCharArray = [ 187,189,191 ];
			var spclCharObj = { 187 : "+",189:"-",191:"/" };
			if( !e.altKey && ( (e.keyCode >= 65 && e.keyCode <= 90) ||   (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == 8 || e.keyCode == 32 || spclCharArray.indexOf( e.keyCode ) != -1) ){
				if( e.keyCode == 8 ){
					value = value.substr( 0,value.length-1);
				}else{
					if( e.keyCode == 32 ){
						value = value+" ";
					}else if( spclCharArray.indexOf( e.keyCode ) != -1 ){
						if( e.keyCode == 187){
							if( e.shiftKey )
								value = value+spclCharObj[e.keyCode];
						}else{
							value = value+spclCharObj[e.keyCode];
						}
					}else{
						value = value+String.fromCharCode(e.keyCode);
					}
					//console.log(typeof String.fromCharCode(e.keyCode) );
					
				}
				$(this).val(value);
				e.data.searchMenuItems(value.toLowerCase());
				e.stopPropagation();
				e.preventDefault();
			}else
			
			if( e.keyCode == 27 || e.altKey ){
				$("#ikea_home_menu_search").val("");
				$("#ikea_home_menu_search").blur();
			//	$("#quantum_menu_change_msg").trigger("click");
			}
			
			
		});
		
		$(document).on("click","#search_menu_item_container",function(e){
		//	setTimeout(function(e){
				$("#search_menu_item_container").html("");
				$("#search_menu_item_container").hide();
				$("#ikea_home_menu_search").val("");
				//$("#ikea_home_menu_search").focus().select();
			//},100);
		});		
		/* Dedicated key up event handler registration for cell grid editing */
		$( document ).on( "keyup", "input.rsu-grid-cell-editor-box", this, function( e ) {
			if(	! e.data.ajaxFlaQ ) {
				return;
			}
			e.stopPropagation();
			var keyCode = e.data.getKeyCode( e );
			/* Decimal field behavior handler ( when key pressed, select all numbers after "." key pressed ) [ Second Part ] */				
			if( $( this ).attr( "data-behaviour" ) == "decimal" ) {				
				e.data.applyDecimalFractionalBehaviour( $( this ), keyCode, e );				
			} 
			/* Ok, forward the event to current context object */
			if( typeof e.data.contextObj.onFieldKeyUp != 'undefined' && !$(".menu-top").is(":visible") ) {			
				// If the current context's object has handler for this event then call it. 
				e.data.contextObj.onFieldKeyUp( keyCode, $( this ) );				
			}
			// Trigger the common 'rsuFieldKeyUp' for other scripts to hook up
			$( document ).trigger( "rsuFieldKeyUp", e, keyCode, e.data, $( this ) );
		});
		
		/* Dedicated focus event handler registration for cell grid editing */
		$( document ).on( "focus", "input.rsu-grid-cell-editor-box", this, function( e ) {
			
			e.stopPropagation();
			if( !e.data.ajaxFlaQ ){
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				that.probeUser( "Please enter valid date", "warning" );
				return;
			}
			/* display message on the Prober */
			
			if( ! $( this ).hasClass("rsu-mute-notification") ) {			
				e.data.probeUser( $(this).data( "message" ), "info" );
			}
		
			/* forward focus event to context object */
			if( typeof e.data.contextObj.onFieldInFocus != 'undefined' ) {
				// If the current context's object has handler for this event then call it. 
				e.data.contextObj.onFieldInFocus( $( this ) );
			}			
			// Trigger the common 'rsuFieldOutFocus' for other scripts to hook up
			$( document ).trigger( "rsuFieldInFocus", e, e.data, $( this ) );			
		});
		
		/* Dedicated blur event handler registration for cell grid editing */
		$( document ).on( "focusout", "input.rsu-grid-cell-editor-box", this, function( e ) {
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				that.probeUser( "Please enter valid date", "warning" );
				e.preventDefault();
				return;
			}
		});
		
		
		/* Dedicated blur event handler registration for cell grid editing */
		$( document ).on( "blur", "input.rsu-grid-cell-editor-box", this, function( e ) {
			e.stopPropagation();
			if( !e.data.ajaxFlaQ ){
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				that.probeUser( "Please enter valid date", "warning" );
				return;
			}
			
			/* Restore the lastActive element to the parent ( TD ), so that rest of the logic won't break */
			e.data.lastActive = $( this ).parent();		         
            // Trigger the common 'rsuFieldOutFocus' for other scripts to hook up
            $( document ).trigger( "rsuFieldOutFocus", e, e.data, $( this ) );
			/* forward blur event  to context object */
            if( typeof e.data.contextObj.onFieldOutFocus != 'undefined' && !e.data.currentClicked ) {
            	// Remove Menu item clicked
                e.data.currentClicked = false;
                // If the current context's object has handler for this event then call it. 
                e.data.contextObj.onFieldOutFocus( $( this ) );
            }   
         // Remove Menu item clicked
            e.data.currentClicked = false;
			$( e.target ).parent().html( e.target.value );	
		});
		
		/**
		 * Dedicated Event Handlers for Table Cell Editing Ends here
		 **/		 
		
		/**
		 * Global popup fields event registrations ( for both popup fields and grid items )
		 */		
		
		$( document ).on( "click", ".rsu-popup-field, table.rsu-grid-table td", this, function( e ) {
			var isGridItem = e.data.isGridItem( $( this ) );

			if(	! e.data.ajaxFlaQ ) {
				e.data.probeUser( "Please wait while processing", "warning" );
				e.preventDefault();
				return;
			}		
			
			
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			var me = e.data;
			var target = $( this );
			RSU_CLICKS++;
	        if(RSU_CLICKS === 1) {
	        	RSU_CLICK_TIMER = setTimeout( function() {
	                RSU_CLICKS = 0;	                
	                if( target.hasClass( "disable" ) ) {
	                	me.probeUser( "Please wait while finishing current operation.!", "error" );
	                	return;
	                }
	                if( isGridItem && $( e.target ).prop( "tagName" ) == "INPUT" && $( e.target ).parent().hasClass( "active" ) ) {
		   				 return;
	                }
	                if( isGridItem && $( e.target ).prop( "tagName" ) == "TD" && $( e.target ).hasClass( "active" ) && $( e.target ).is( "[editable=true]" ) ) {	    				 
		   				 me.triggerEditable( $( e.target ), e, true );
		   				 return;
	                }
	                if( me.isGridItem( target ) ) {
	                	// If it is coming from GRID items sent to navigate grid
	                	me.navigateGrid( "click", target, "arbitrary" );
	                }	
	                if( !me.isGridItem( target ) && target.attr( "data-behaviour" ) == "decimal" ){
	                	me.applyDecimalFractionalBehaviour( target, "click", e );
	                }
	              
	                
                	// forward event to context object
                	if( typeof me.contextObj.onFieldClick != 'undefined' ) {
 	    				// If the current context's object has handler for this event then call it. 
                		me.contextObj.onFieldClick( target, e );
                	}	                              
	    			
	    			  
	            }, RSU_CLICK_DELAY );
	        } else if( RSU_CLICKS = 2 ) {
	        	RSU_CLICKS = 0; 
	            clearTimeout( RSU_CLICK_TIMER );
	            if( target.hasClass( "disable" ) ) {
                	e.data.probeUser( "Please wait while finishing current operation.!", "error" );
                	return;
                }	            	
	            if( e.data.isGridItem( target ) && $( e.target ).prop( "tagName" ) == "TD"  ) {
                	// If it is coming from GRID items sent to navigate grid
                	e.data.navigateGrid( "click", target, "arbitrary" );
                }
	            if( isGridItem && target.attr( "editable" ) == "true" && $( e.target ).prop( "tagName" ) != "INPUT" && $( target ).find( "input" ).length == 0 && $( target ).is( ".active" ) ) {
	            	e.data.triggerEditable( $( e.target ), e, true );
	            }
	            if( e.data.contextObj.popup.meta.type == "pagination" && !target.hasClass( "rsu-pagination-btn" ) && !target.hasClass( "rsu-popup-field" ) && !target.hasClass( "rsu-pagination-filter-field" ) && !target.hasClass( "rsu-pagination-page-index" ) ) {	            	
	            	var popup_name = e.data.contextObj.popup.meta.name,
                	record = JSON.parse( decodeURI( target.parent().find("td:first-child").data( "record" ) ) );
                	e.data.closePopup( true );                	
                	e.data.contextObj.onPageRecord( record, popup_name );                	
                }
	            // forward event to context object
	            if( typeof e.data.contextObj.onFieldDblClick != 'undefined' ) {
					// If the current context's object has handler for this event then call it. 
					e.data.contextObj.onFieldDblClick( target );
				}$( document ).trigger( "rsuFieldDblClick", e, e.data, target );
				} else {
					RSU_CLICKS = 0; 
				}
	        });
		
		/* Register click event for Pagination Popup's Header TH */
		$( document ).on( "click", ".rsu-popup-pagination table.rsu-popup-content-header-table th", this, function(e) {
			var column = "";			
			if( $( this )[0].hasAttribute( "data-column" ) ) {				
				if( $( this ).attr( "data-column" ) != "" ) {
					column = $( this ).attr( "data-column" );					
					e.data.contextObj.popup.window.find("select#selectOnId option[value="+ column +"]").prop( 'selected', true );
				} 
			}			
		});
		
		/* Click event handler for popup ghost background, if user click on anywhere the focus will go to Search box */
		$( document ).on( "click", ".rsu-popup-ghost-back-sub-popup", this, function(e) {
			if( !e.data.ajaxFlaQ ){
				return;
			}
			var fieldId = "";
			if( e.target.hasAttribute( "id" ) ) {
				fieldId = $( e.target ).attr( "id" );
			}
			/* If the click is not coming from pager text box or from one of the pagination button, trigger the focus for search box */
			if( fieldId != "rsu-pagination-popup-page" && fieldId != "selectTypeId" && fieldId !=  "inputSrId" && fieldId != "inputSrId_1" && fieldId != "selectTypeId_1" && fieldId != "selectOnId_1" && ! $( e.target ).hasClass( "rsu-pagination-btn" ) ) {					
				if( e.data.paginationCurrentSearchField != "" ){
					e.data.paginationCurrentSearchField.trigger( "focus" );
				} else{
					$( this ).find( "input#inputSrId" ).trigger( "focus" );
				}				
			}
			/* If the click is from one of the pagination buttons ten */
			if( $( e.target ).hasClass( "rsu-pagination-btn" ) ) {
				$( this ).find( "input#rsu-pagination-popup-page" ).trigger( "focus" );
			}		
		});
		
		
		/** field paste validation */
		$( document ).bind( "paste", function( e ){ 
			var target = $( e.target );
			var originalvalue = target.val();
			var val = e.originalEvent.clipboardData.getData('Text');					
				if( target.attr( "data-behaviour" ) == "decimal" || target.attr( "data-behaviour" ) == "number" ) { 
					var flQ = true,
					msg = "Pasted value is not valid.";
					if( isNaN( val ) ){
						flQ = false;
					}
					// check is Negative Field 
					if( typeof target.attr( "data-negativefield" ) == "undefined" || target.attr( "data-negativefield" ) != "true" ){
						if( parseFloat( val ) < 0 ){
							flQ = false;
						}
					} 
					// check number is pasted
					if( target.attr( "data-behaviour" ) == "number" ){
						if( val % 1 != 0 || ( val+"" ).indexOf('.') != -1 ){
							flQ = false;
						}
					}
					// check decimal is pasted
					if( flQ ){
						if( target.attr( "data-behaviour" ) == "decimal"){
							target.val( parseFloat( val ).toFixed( 2 ) );
						}else{
							target.val( parseInt( val ) );
						}
					} else {
						msg = target.attr( "data-behaviour" ) == "decimal" ? "Pasted value is not decimal." : "Pasted value is not number.";
						target.val( originalvalue );
						target.focus().select();
						rSuControllerObj.probeUser( msg, "error" );
					}
					e.preventDefault();
				} 				
				
				if ((rSuControllerObj.contextObj.popup.meta.name == "girpurchase") && ((target.attr("id") == "source") || (target.attr("id") == "division"))) {
					return false;
				}
		});
		
		/**
		 * Global KEYDOWN event handler for popup fields & grid cell 
		 */
		$( document ).on( "keydown", ".rsu-popup-field, table.rsu-grid-table td, a.rsu-popup-action-btn", this, function(e) {
			
			var fieldId = "";
			
			if( $( this )[0].hasAttribute( "id" ) ) {
				fieldId = $( this ).attr( "id" );
			}		
			if(	! e.data.ajaxFlaQ && fieldId != "inputSrId" ) {				
				e.data.probeUser( "Please wait while processing", "warning" );
				return false;
			}
			
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.lastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			
			//clear pagination 
			if( this.pagenationTime != "" ){
				clearTimeout( e.data.pagenationTime );
			}
			
			var field,			
			isNavKey = false,		
			keyCode = e.data.getKeyCode( e ),
			isGridItem = e.data.isGridItem( $( this ) );
			if( e.data.contextObj.popup.meta.type == "pagination" && keyCode == 13 && $( e.target ).is( ".rsu-popup-action-btn" ) ){
				$( this ).click();
				return false;
			}
			
			if( e.data.contextObj.popup.meta.type == "pagination" && keyCode == 9 ) {
				if( $( e.target ).hasClass( "rsu-popup-field" ) ) {
					e.data.contextObj.popup.window.find( "a.rsu-popup-action-ok" ).trigger( "focus" );
				} else if( $( e.target ).hasClass( "rsu-popup-action-ok" ) ) {
					e.data.contextObj.popup.window.find( "a.rsu-popup-action-cancel" ).trigger( "focus" );
				} else if( $( e.target ).hasClass( "rsu-popup-action-cancel" ) ) {
					e.data.contextObj.popup.window.find( "#inputSrId" ).trigger( "focus" );
				}
				return false;
			} else if( e.data.contextObj.popup.meta.type == "pagination" && keyCode != 9 && fieldId != "inputSrId" || fieldId != "inputSrId_1" ) { 
				if( fieldId != "rsu-pagination-popup-page"  ){
					if( e.data.paginationCurrentSearchField != "" ){
						e.data.paginationCurrentSearchField.trigger( "focus" );
					} else{
						e.data.contextObj.popup.window.find( "#inputSrId" ).trigger( "focus" );
					}
				}
			}
			
			if( $( this ).hasClass( "rsu-readonly-field" ) && $( this ).hasClass( "backspace_delt_all" ) && keyCode == 8 ){
				$( this ).val( "" );
			}
			/* Disable key events for read only fields */
			if( $( this ).hasClass( "rsu-readonly-field" ) && keyCode != 9 && keyCode != 13 && keyCode != 32 && keyCode != 35 && keyCode != 36 && keyCode != 37 && keyCode != 38 && keyCode != 39 && keyCode != 40 && keyCode != 45 && keyCode != 190 && keyCode != 110 && keyCode != 27 ) {
				return false;
			}	
			if( $( this ).attr( "data-behaviour" ) == "number" ) {	
				if( keyCode == 32 ){
					return false;
				}
			}
			if( $( this ).attr( "data-behaviour" ) == "decimal" ) {	
				if( keyCode == 32 ){
					return false;
				}
				e.data.applyDecimalFractionalBehaviour( $( this ), keyCode, e );				
			}	
			
			/* Check whether the targeted element is Grid Cell */
			if( isGridItem || ( ( fieldId == "inputSrId" || fieldId == "inputSrId_1" || fieldId == "rsu-pagination-popup-page" ) && ( keyCode == 9 || keyCode == 37 || keyCode == 38 || keyCode == 39 || keyCode == 40 || (( keyCode == 33 || keyCode == 34 ) && e.data.contextObj.popup.meta.type != 'pagination' )) )) {
				
				if( fieldId == "inputSrId" || fieldId == "inputSrId_1" || fieldId == "rsu-pagination-popup-page" ) {
					field = e.data.contextObj.popup.window.find("td.active");
				} else {
					field = $( this );
				}
				var navflg = e.data.contextObj.popup.meta.type == "pagination" && e.ctrlKey ? false : true;
				if( navflg ){
					/* Handle grid navigations ( in case of this event happens on GRID ) */			
					if( keyCode == 13 && !e.ctrlKey ) {
						// Enter key pressed
						isNavKey = true;
						e.data.navigateGrid( keyCode, field, "next" );
					} else if( keyCode == 9 ) {
						// Right arrow key pressed
						isNavKey = true;
						e.data.navigateGrid( keyCode, field, "tab" );
					} else if( keyCode == 37 ) {
						// Left arrow key pressed
						isNavKey = true;
						if( fieldId != "inputSrId" || fieldId != "inputSrId_1" || fieldId != "rsu-pagination-popup-page" ) {
							e.data.navigateGrid( keyCode, field, "prev" );
						}					
					} else if( keyCode == 39 ) {
						// Right arrow key pressed
						
						isNavKey = true;
						if( fieldId != "inputSrId" || fieldId != "inputSrId_1" || fieldId != "rsu-pagination-popup-page" ) {
							e.data.navigateGrid( keyCode, field, "next" );
						}
					} else if( keyCode == 38 &&  !e.ctrlKey ) {
						// Up arrow key pressed
						isNavKey = true;
						e.data.navigateGrid( keyCode, field, "up" );
					}else if( keyCode == 33 && e.data.contextObj.popup.meta.type != 'pagination' ) {
						// Up arrow key pressed
						isNavKey = true;
						e.data.navigateGrid( keyCode, field, "pageUp" );
					}else if( keyCode == 34 && e.data.contextObj.popup.meta.type != 'pagination' ) {
						// Up arrow key pressed
						isNavKey = true;
						e.data.navigateGrid( keyCode, field, "pageDown" );
					} else if( keyCode == 40  && !e.ctrlKey) {
						// Down arrow key pressed					
						isNavKey = true;
						e.data.navigateGrid( keyCode, field, "down" );
					}
				}
				if( fieldId == "inputSrId_1" && keyCode == 40 ){
					setTimeout(function(){
						$( "#inputSrId" ).trigger( "focus" );
					});
				}
			}
			
			/* trigger pagination */
			
			if( ! e.ctrlKey && !( e.keyCode <= 123 && e.keyCode >= 112) && e.keyCode != 45 && e.keyCode != 32  ){
				var curField = $( this );
				var inputVal = String.fromCharCode( e.keyCode );
				if( !isNavKey && /[a-zA-Z0-9-_ ]/.test( inputVal ) && curField.data( "has_popup" ) == "yes" ){
					e.data.pageText += e.key;
					//e.data.pageSearchColumn = curField.data( "column" );
					e.data.pagenationTime = setTimeout( function(){ rSuControllerObj.contextObj.onFieldDblClick( curField ); }, 300 );
				}
			}
			

			if( isGridItem && !isNavKey && $( e.target ).is( ".active" ) ) {
				var isEditable = false;
				if( $( this )[0].hasAttribute( "editable" ) ) {
					var editFlg = true;
					if( typeof e.data.contextObj.allowGridEdit != "undefined" ){
						editFlg = e.data.contextObj.allowGridEdit( e.keyCode, $( this ).attr( "data-field" ) );
					}
					isEditable = ( $( this ).attr( "editable" ) == "true" ) ? true : false;
					if( isEditable && editFlg ) {
						if( e.data.behaviour.checkBehaviour( $(this), e, keyCode, false ) ) {
							/* Ok here inject a text field inside this grid cell */
							var edit_box = $( '<input type="text" class="rsu-grid-cell-editor-box" value="'+ $( this ).text() +'"/>' );											
							var attrs = $( this ).prop( "attributes" );
							$.each( attrs, function() {							
								if( this.name.indexOf( "data-" ) != -1 || this.name == "maxlength" ) {
									if( this.name == "data-target-type" ) {
										edit_box.attr( this.name, "field" );
									} else {
										edit_box.attr( this.name, this.value );
									}								
								}							
							});					
							edit_box.css( "text-align", $( this ).css( "text-align" ) );
							$(this).html( edit_box );
							edit_box.focus();	
							// Now pass the last key press event to cell edit text box
							var eve = $.Event( 'keydown' );
							eve.which = keyCode;
							if( edit_box.attr( "data-behaviour" ) == "decimal" ){
								if(  keyCode == 190 || keyCode == 110 ){
									e.data.applyDecimalFractionalBehaviour( edit_box, keyCode, e );
									edit_box[0].setSelectionRange( edit_box.val().length-2, edit_box.val().length-2 );									
								} else{
									edit_box[0].value = "0.00";
									edit_box[0].setSelectionRange( 0, edit_box.val().length-3 );
								}
							} if( edit_box.attr( "data-behaviour" ) == "date" ){ 
								edit_box[0].value = "dd/mm/yyyy";
								edit_box[0].selectionEnd = 1;	
								edit_box[0].selectionStart = 0;	
								rsu_date_behave.dateKeyPress( edit_box[0], e )			
								return false;		
							} else{
								edit_box.select();
								edit_box.trigger( eve );		
							}
							return;
						}						
					}	
 				}
			}

			/* If the key event happened on pagination popup Grid Cell - trigger focus on Search box */
			if( isGridItem &&  e.data.contextObj.popup.meta.type == "pagination" ) {
				if( keyCode != 13 && keyCode != 38 && keyCode != 40 && keyCode != 37 && keyCode != 39 && keyCode != 9 ) {
					if( e.data.paginationCurrentSearchField != "" ){
						e.data.paginationCurrentSearchField.trigger( "focus" );
					} else {
						e.data.contextObj.popup.window.find( "input#inputSrId" ).trigger( "focus" );
					}
				} else {
					e.stopPropagation();
				}
			}
			
			/**/
			if( keyCode == 27 ) {				
				var type =  e.data.contextObj.popup.meta.type;
				e.data.closePopup( false );	
				e.data.paginationPopupCloseMsg(type);
				e.stopPropagation();
				return false;								
			}	

			/* Pagination popup's search text box ( "inputSrId" ) & pager text box ( "rsu-pagination-popup-page" ), will be handled on "KeyUp" Event Handler */
			if( ( ( fieldId != "inputSrId" || fieldId != "inputSrId_1" ) && fieldId != "rsu-pagination-popup-page" ) || keyCode == 13 ) {			
				/* Handle tab key event on grid items */
				if( isGridItem && keyCode == 9 ) {
					//$( this ).removeClass( "active" );
					e.data.contextObj.popup.window.find( "div.rsu-popup-action-bar a:last-child" ).focus();
					return false;
				}
				
				/* Check for enter key on pagination popup */
				if( !$( ".rsu-popup-spinner" ).is( ":visible" ) && ( keyCode == 13 && e.data.contextObj.popup.meta.type == "pagination" ) && e.data.lastSearchTxt == $( "#inputSrId" ).val()  ) {
					if( e.data.contextObj.popup.grid == null ){
						return;
					}
					var active = e.data.contextObj.popup.grid.gridTable.find( "tbody td.active" );
					if( active.length != 0 && e.data.contextObj.popup.grid.records ) {
						var popup_name = e.data.contextObj.popup.meta.name,
						record = JSON.parse( decodeURI( active.parent().find( "td:first-child" ).data( "record" ) ) );
						if( ! record ) {
							record = {};
						}
						e.data.closePopup( true );
						e.data.contextObj.onPageRecord( record, popup_name );					
					} else {
						e.data.probeUser( "Please select a value.!", "info" );
					}
					return false;
				}
				if( ( keyCode == 13 && e.data.contextObj.popup.meta.type == "pagination" ) && ( e.data.lastSearchTxt != $( "#inputSrId" ).val() ) ) {
					return false;
				}
	
				/* If it is a grid item and the key that is being pressed is a Nav key then return */
				/* != 13 scenario added for forwarding enter key event on Grid Cell to context Object */
				if( isGridItem && isNavKey && keyCode != 13 ) {
					return false;
				}	
				
				/* If Enter or Arrow Down key is pressed on any popup form fields, move the focus to next field */
				if( $( this ).hasClass( "rsu-popup-field" ) && ( keyCode == 13 || keyCode == 40 ) && ( fieldId != "inputSrId" && fieldId != "inputSrId_1" ) ) {		
					if( !( keyCode == 13 &&  $( this ).attr( "haspopup" ) == "yes" ) ){
						$.focusNext();	
					}															
				}
				
				/* If Arrow Up key is pressed on any popup form fields, move the focus to previous field */
				if( $( this ).hasClass( "rsu-popup-field" ) && keyCode == 38 && ( fieldId != "inputSrId" && fieldId != "inputSrId_1" )  ) {					
					if( e.data.contextObj.popup.window.find('*').filter(':input:visible:first').attr( "id" ) != $( this ).attr( "id" ) ) {						
						$.focusPrev();
					}					
				}		
		
				/* Ok now forward the event to Context Object */
				if( typeof e.data.contextObj.onFieldKeyDown != 'undefined' && !e.ctrlKey  && !$(".menu-top").is(":visible")) {
					// If the current context's object has handler for this event then call it. 
					var res = e.data.contextObj.onFieldKeyDown( keyCode, $( this ) );
					if( res === false ) {						
						return false;
					}
					/* Because we are allowing Space bar into reaonly field */
					if( $( this ).hasClass( "rsu-readonly-field" ) && keyCode == 32 ) {
						return false;
					}
				}				
				
				if( e.data.isGridItem( $( this ) ) ){
					if(keyCode == 32 ){
						e.preventDefault();
					}
					var target = $( this );
					var fIndex = 0;
					if(  keyCode == 33 || keyCode == 34 ) {
						/*if( rSuControllerObj.contextObj.onSelectNextGrid( keyCode, target, target ) ){					
							if(keyCode == 33){
								fIndex = rSuControllerObj.getGridIndex(target);
								rSuControllerObj.setGridFocus( Math.max((fIndex - 9), 0), target.data('field'));
							}else {
								fIndex = rSuControllerObj.getGridIndex( target );
								var maxIndex = Math.max(99, rSuControllerObj.contextObj.popup.grid.records != null ? rSuControllerObj.contextObj.popup.grid.records.length:0);
								rSuControllerObj.setGridFocus(Math.min((fIndex + 9),maxIndex), target.data('field'));
							}
						}*/
						e.preventDefault();
					}
				}
				
				if( $( this ).hasClass( "rsu-popup-field" ) ) {			
					/* Avoids tab, delete and I don't know, check your self for key code 13, 45, 32 & 46 */
					if( keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 45 && keyCode != 32 && keyCode != 46 ) {						
						return e.data.behaviour.checkBehaviour( $(this), e, keyCode, true );						
					}				
				}	
				
			}
			
			
			if( fieldId == "inputSrId" ||  fieldId == "inputSrId_1" ) {				
				/* %, #, & - keys restriction added, as it cause some server side exception */
				if( (e.shiftKey && keyCode == 51) || (e.shiftKey && keyCode == 52)  ){
					return false;	
				} 
				if( keyCode == 37  || keyCode == 39 && keyCode == 38  || keyCode == 40 ){
					return false;
				}				
			}
			
			if( fieldId == "rsu-pagination-popup-page" ) {
				if ( keyCode != 8 && keyCode != 0 && keyCode != 37 && keyCode != 39 && ( ( e.shiftKey && ( keyCode > 48 || keyCode < 57 ) ) || ( keyCode < 48 || keyCode > 57 ) )  && ( keyCode < 96 || keyCode > 105) && keyCode != 46 && keyCode != 9 ){
					return false;
				}				
				if( $( this ).val() > e.data.contextObj.popup.totalPages ) {
					$( this ).val( e.data.contextObj.popup.totalPages );
					return false;
				}
			}
			
			
			// Trigger the common 'rsuFieldKeyDown' for other scripts to hook up
			$( document ).trigger( "rsuFieldKeyDown", e, keyCode, e.data, $( this ) );
		});
		
		/**
		 * Global KEYPRESS event handler for popup fields & grid cell 
		 */
		$( document ).on( "keypress", ".rsu-popup-field, table.rsu-grid-table td", this, function(e) {	
			if( !e.data.ajaxFlaQ ){
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			var keyCode = e.data.getKeyCode( e );			
			/* If user edited the grid item or any of the fields, add "edited" class, which will come handy when 
			 * we close the dialog, whether we need to save the changes or not
			 * If any of the fields have "edited" class then we can alert the users to save the changes before closing */
			if( e.data.isGridItem( $( this ) ) && keyCode != 13 ) {
				$( this ).parent().addClass( "edited" );
			} else {
				$( this ).addClass( "edited" );
			}		
			if( typeof e.data.contextObj.onFieldKeyPress != 'undefined' ) {
				// If the current context's object has handler for this event then call it. 
				return e.data.contextObj.onFieldKeyPress( keyCode, $( this ) );
			}
				
			// Trigger the common 'rsuFieldKeyPress' for other scripts to hook up
			$( document ).trigger( "rsuFieldKeyPress", e, keyCode, e.data, $( this ) );
		});
		
		/**
		 * Global KEYUP event handler for popup fields & grid cell 
		 */
		$( document ).on( "keyup", ".rsu-popup-field, table.rsu-grid-table td", this, function(e) {
			
			if(	! e.data.ajaxFlaQ && $( this ).attr("id") != "inputSrId" ) {
				return;
			}
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			var fieldId = "";
			var keyCode = e.data.getKeyCode( e );
			
			if( $( this )[0].hasAttribute( "id" ) ) {
				fieldId = $( this ).attr( "id" );
			}		
			
			/* Handle pagination popup search text event */
			if( fieldId == "inputSrId" || fieldId == "inputSrId_1" ) {				
				if( keyCode == 13 ) {
					// Enter key is pressed
					var eve = $.Event('keydown');
					eve.which = 13;
					e.data.selectedGrid.trigger(eve);
					
				} else {
					if( (( keyCode < 37 || keyCode > 40 ) && keyCode != 33 && keyCode != 34 && keyCode != 17  && ! e.ctrlKey) || (e.ctrlKey && keyCode == 8) || (e.ctrlKey && keyCode == 86) || (e.ctrlKey && keyCode == 88) || (e.ctrlKey && keyCode == 90)) {						
						if( this.searchTimer != null ) {
							clearTimeout( this.searchTimer );
							this.searchTimer = null;
						}	
						if(fieldId == "inputSrId" && e.data.lastSearchTxt == $( "#inputSrId" ).val() ){
							return;
						}
						if( typeof rSuControllerObj.contextObj.popup.meta.do_cache != "undefined" && rSuControllerObj.contextObj.popup.meta.do_cache ){
							rSuControllerObj.triggerSearch();
						} else{
							this.searchTimer = setTimeout( function() {
								rSuControllerObj.triggerSearch();
							}, rSuControllerObj.searchKeyTimeOut );	
						}
											
					}							
				}				
				
			} else if( fieldId == "rsu-pagination-popup-page" ){
				/* If user enter 0 or negative value - set to 1 */
				
				if( isNaN( $( this ).val() ) || $( this ).val() == "" ){
					$( this ).val( 1 );	
				}
				
				if( $( this ).val() < 1 ){
					$( this ).val( 1 );					
				}	
				/* If user enter page number which is greater than the total page number, then set to total page number */
				if( $( this ).val() > e.data.contextObj.popup.totalPages ) {
					$( this ).val( e.data.contextObj.popup.totalPages );					
				}
				/* Handle pagination popup pager text box event */
				var flaQ = false;				
				if( $( this ).val() <= e.data.contextObj.popup.totalPages ){
					flaQ = true;
					e.data.contextObj.popup.pageNumber = $( this ).val();				
				}			
				if( flaQ ) {
					if( keyCode == 13 ) {
						// Enter key is pressed
						var eve = $.Event('keydown');
						eve.which = 13; // Character 'A'
						e.data.selectedGrid.trigger(eve);					
					} else {
						e.data.isPaginationPager = keyCode != undefined ? true : false;							
						e.data.isPaginationFilter = false;		
						if( !$.isEmptyObject( rSuControllerObj.pageCache ) && typeof rSuControllerObj.pageCache[e.data.context] != "undefined" && typeof rSuControllerObj.pageCache[e.data.context][e.data.contextObj.popup.meta.name] != "undefined" &&    !$.isEmptyObject( rSuControllerObj.pageCache[e.data.context][e.data.contextObj.popup.meta.name] ) ){
							var searchRec = e.data.doLocalPageSearch( e.data.lastSearchTxt, $( "#selectOnId" ).val(), $( "#selectTypeId" ).val() );
							if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) && $( "#inputSrId_1" ).val() != "" ){
								searchRec = e.data.doLocalPageSearch( $( "#inputSrId_1" ).val(), $( "#selectOnId_1" ).val(), $( "#selectTypeId_1" ).val(), searchRec );
							}
							var filterpagerec = e.data.filterPage( searchRec, e.data.contextObj.popup.pageNumber );
							setTimeout(function(){
								rSuControllerObj.contextObj.popup.handlePaginationResponse( filterpagerec );
							},400);
							
						} else {
							if( $( this ).val() > 0 && keyCode != 33 && keyCode != 34 ) {
								var params = e.data.prepareRequestParams( null, e.data.contextObj.popup.meta.actions.rsu_post.data );
								if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) ){
									params["additionalJsonParam"]={"additionalColumnToSearch": $( "#selectOnId_1" ).val() ,"additionalColumnSearchText": $( "#inputSrId_1" ).val() ,"additionalTextSearchType":$( "#selectTypeId_1" ).val() };
								}
								params["columnSearchText"] = $( "#inputSrId" ).val();
								e.data.request = e.data.prepareRequest( "POST", e.data.contextObj.popup.meta.actions.rsu_post.action,params, "json", "LIST" );
								e.data.ajaxFlaQ = true;
								e.data.dock();
								
								
								/*var params = e.data.prepareRequestParams( null, e.data.contextObj.popup.meta.actions.rsu_post.data );					
								e.data.request = e.data.prepareRequest( "POST", e.data.contextObj.popup.meta.actions.rsu_post.action+"?"+params,"", "json", "LIST" );
								e.data.dock();*/
							}		
						}
					}
				}		
			} else {				
				/* Decimal field behavior handler ( when key pressed, select all numbers after "." key pressed ) [ Second Part ] */
				if( $( this )[0].hasAttribute( "data-behaviour" ) ) {
					if( $( this ).attr( "data-behaviour" ) == "decimal" ) {
						var isEditable = false;
						if( $( this )[0].hasAttribute( "editable" ) ) {
							isEditable = ( $( this ).attr( "editable" ) == "true" ) ? true : false;
						}
						if( $( this ).hasClass( "rsu-popup-field" ) || ( e.data.isGridItem( $( this ) ) && isEditable ) ) {							
							e.data.applyDecimalFractionalBehaviour( $( this ), keyCode, e );
						}
					}
				}				
				/* Ok, forward the event to current context object */
				if( typeof e.data.contextObj.onFieldKeyUp != 'undefined' && !$(".menu-top").is(":visible") ) {
					/* Avoids tab, delete and I don't know, check your self for key code 13, 45, 32 & 46 */
					if( keyCode != 8 && keyCode != 9 && keyCode != 13 && keyCode != 45 && keyCode != 32 && keyCode != 46 ) {
						// If the current context's object has handler for this event then call it. 
						return e.data.contextObj.onFieldKeyUp( keyCode, $( this ) );
					}
				}
				
				if( $( this ).hasClass( "rsu-readonly-field" ) && keyCode == 32 ) {
					$( this ).val( $( this ).val().trim() );
					return false;
				}
			}	
			
								
			// Trigger the common 'rsuFieldKeyUp' for other scripts to hook up
			$( document ).trigger( "rsuFieldKeyUp", e, keyCode, e.data, $( this ) );
			
		});
		
		/* Register ` action handler for popup fields, grid cells and action buttons */
		$( document ).on( "blur", ".rsu-popup-field, table.rsu-grid-table td, a.rsu-popup-action-btn", this, function(e) {
			/* Store the last focused elements reference */
			e.data.lastActive = $( this );	
			/* Clear the probe message */
			//e.data.probeUser( "", "info" );
			
			/* we are removing the highlight of the label field, if the popup field is being out focus */
			if( $( this ).hasClass( "rsu-popup-field" ) ) {
				$(this).closest( 'table.rsu-popup-header-fields-row' ).find( "label" ).removeClass( "on-focus" );
			}
			/* If it is an editable Cell, then don't forward the blur event to context Obj 
			 * It's already been done on "rsu-grid-cell-editor-box" input */
			if( $( this )[0].hasAttribute( "editable" ) ) {
				var isEditable = ( $( this ).attr( "editable" ) == "true" ) ? true : false;
				if( isEditable ) {
					if ( window.getSelection ) {
						if ( window.getSelection().empty ) {
							window.getSelection().empty();
						} else if ( window.getSelection().removeAllRanges ) {
							window.getSelection().removeAllRanges();
						}
					} else if ( document.selection ) { 
						document.selection.empty();
					}
					return;
				}
			}
			
			//added by pj for dateValidation
			target  = $( this );
			if( target.prop( "tagName" ) == "INPUT" && target.attr( "data-behaviour" ) == "date" && !target.is( ".rsu-readonly-field" ) ){
				if( target.val() == "dd/mm/yyyy" ){
					target.val( "" );
				} else{
					//if( target )
				}
			}
			
			/* forward blur event  to context object */
            if( typeof e.data.contextObj.onFieldOutFocus != 'undefined' && !e.data.currentClicked ) {
            	// Remove Menu item clicked
                e.data.currentClicked = false;	
                // If the current context's object has handler for this event then call it. 
                return e.data.contextObj.onFieldOutFocus( $( this ) );
            }            
         // Remove Menu item clicked
            e.data.currentClicked = false;	
            // Trigger the common 'rsuFieldOutFocus' for other scripts to hook up
            $( document ).trigger( "rsuFieldOutFocus", e, e.data, $( this ) );
        });
		
		$( document ).on( "mousedown", function(e) { 
			if( !rSuControllerObj.ajaxFlaQ ){
				return;
			}
		
			var lastFocus = rSuControllerObj.currentElement;
			if( rSuControllerObj.contextObj != null ){
				/* Fix for onSelectNextGrid not getting calling on Blur event ( If user click away from GRID ) */	
				if( rSuControllerObj.contextObj != null ){
					if( lastFocus && rSuControllerObj.isGridItem( lastFocus ) && !rSuControllerObj.isGridItem( $( e.target ) ) && rSuControllerObj.contextObj.popup.meta.type != "pagination" && $( ".rsu-popup" ).is( ":visible" ) ) {					
						var target = $( e.target );				
						if( target.is( "td" ) || target.is( "input" ) ){
							rSuControllerObj.navigateGrid( "click", target, "arbitrary", e.target );
						} else {
							rSuControllerObj.navigateGrid( "click", lastFocus, "arbitrary", e.target );
						}
					}
				}
				if(  $( ".rsu-popup-ghost-back-main-popup" ).is( ":visible" ) && rSuControllerObj.contextObj.popup != null && !$( e.target ).closest( ".rsu-popup" ).is( "#rsu-popup-"+rSuControllerObj.contextObj.popup.meta.name ) && !$( e.target ).closest( ".ui-datepicker" ).is( "#ui-datepicker-div" ) ){
					if( lastFocus != null && rSuControllerObj.isGridItem( lastFocus ) ){
						lastFocus.closest( "table" ).find( ".active" ).removeClass( "active" );
						lastFocus.addClass( "active" ).focus();
						if(!$('.print-preview-class').is(':visible')){
							e.preventDefault();
						}
						
					} else if( !lastFocus.is( ".rsu-popup-action-btn" ) ) {
						lastFocus.focus();		
						if(!$('.print-preview-class').is(':visible')){
							e.preventDefault();
						}
					}					
				}
			}
		});
		
		/* Register focus action handler for popup fields, grid cells and action buttons */
		$( document ).on( "focus", ".rsu-popup-field, table.rsu-grid-table td, a.rsu-popup-action-btn", this, function(e) {			
			if( !e.data.ajaxFlaQ ){
				e.preventDefault();
				return;
			}
			
			if( dateValidErrorFlg && $( this ).attr( "id" ) != dateValidErrorlastDateElem.attr( "id" ) ){
				dateValidErrorlastDateElem.focus();
				e.data.probeUser( "Please enter valid date", "warning" );
				return;
			}
			if( $( this ).hasClass( "rsu-popup-field" ) && e.data.currentElement ) {
				if( e.data.currentElement.attr( "id" ) == $( this ).attr( "id" ) ) {
					return;
				}		
			}
			var fieldId = "";			
			if( $( this )[0].hasAttribute( "id" ) ) {
				fieldId = $( this ).attr( "id" );
			}
			
			if(fieldId == "rsu-pagination-popup-page" ){
				 $( this ).select();
			}
			
			/* Action buttton message  */
			if( $( this ).hasClass( "rsu-popup-action-btn" ) ){
				if( $( this )[0].hasAttribute( "data-message" ) ) {
					 e.data.probeUser( $( this ).attr( "data-message" ), "info" );
				}
			}
			
			/* Store the current focused elements reference */
			e.data.currentElement = $( this );
			
			/* display message on the Prober ( Notification ) for Grid Cell items */
			if( e.data.isGridItem( $( this ) ) ) {
				if( e.data.contextObj.popup.meta.type != "pagination" && e.data.contextObj.popup.gridHeader ) {
					 var probe_msg = "";
				     if( $( this )[0].hasAttribute( "data-message" ) ) {
				      probe_msg = $( this ).attr( "data-message" );
				     } else {
				    //  probe_msg = e.data.contextObj.popup.gridHeader.find( 'th:nth-child('+ ( $( this ).index() + 1 ) +')' ).data( "message" );
				      probe_msg =    $(this).closest(".rsu-popup-content-wrapper").find('.rsu-popup-content-header-table').find( 'th:nth-child('+ ( $( this ).index() + 1 ) +')' ).data( "message" );
				     }     
				     if( ! $( this ).hasClass("rsu-mute-notification") ) {   
				      e.data.probeUser( probe_msg, "info" );
				     }					
				}								
			}
			
			if(  e.data.contextObj.popup.meta.type == "pagination" && ( fieldId == "inputSrId" || fieldId == "inputSrId_1" ) ){
				e.data.paginationCurrentSearchField = $( this );
			}
			
			
			/* Here we are trying to highlight the corresponding label of focused field */
			if( $( this ).hasClass( "rsu-popup-field" ) ) {
				/* display message on the Prober */
				if( ! $( this ).hasClass("rsu-mute-notification") ) {			
					e.data.probeUser( $(this).data( "message" ), "info" );
				}					
				$(this).closest('table.rsu-popup-header-fields-row').find( "label" ).addClass( "on-focus" );
			}	
			
			
			/* forward focus event to context object */
			if( typeof e.data.contextObj.onFieldInFocus != 'undefined' ) {
				// If the current context's object has handler for this event then call it. 
				return e.data.contextObj.onFieldInFocus( $( this ) );
			}	
			
			
			
			
			// Trigger the common 'rsuFieldOutFocus' for other scripts to hook up
			$( document ).trigger( "rsuFieldInFocus", e, e.data, $( this ) );
			
			
		});	
		
		/* Event registration specific to pagination popup */
		$( document ).on( "change", "#selectTypeId,#selectTypeId_1,#selectOnId_1", this, function(e) {			
			e.data.isPaginationFilter = true;	
			e.data.isPaginationPager = false;
			/* Reset the current page number */
			e.data.contextObj.popup.pageNumber = 1;
			$("#rsu-pagination-popup-page").val( e.data.contextObj.popup.pageNumber );
			e.data.triggerSearch();
			/*if( typeof rSuControllerObj.contextObj.popup.meta.do_cache != "undefined" && rSuControllerObj.contextObj.popup.meta.do_cache ){
				e.data.triggerSearch();
			}else{
				var params = e.data.prepareRequestParams( null, e.data.contextObj.popup.meta.actions.rsu_post.data );					
				e.data.request = e.data.prepareRequest( "POST", e.data.contextObj.popup.meta.actions.rsu_post.action+"?"+params,"", "json", "LIST" );
				e.data.dock();
			}*/
			e.preventDefault();			
		});		
				
		//confirmation dialog box button navigation 
		$(document).off( "keyup", '.ui-dialog' );
		$(document).on( 'keyup', '.ui-dialog', function(e) {
			if(	! e.data.ajaxFlaQ ) {
				return;
			}
			var keyCode = e.keyCode;
			//shortcut key for confirmation box
			if($('div').hasClass('ui-dialog')){
				$('.ui-dialog-buttonset button .ui-button-text').each(function(){
					if ($(this).text().charAt(0).toUpperCase() == String.fromCharCode(keyCode).toUpperCase()){					
						$(this).parent().click();
					}
			});	
				
				var dialog_box_button = $('.ui-dialog-buttonset button');
				if( !( e.which < 38 || e.which > 39) ){
					if(dialog_box_button.is(":focus")){
						if($(e.target).next().length == 0){
							$(e.target).parent().children(':first-child').focus();		
						}else{
							$(e.target).next().focus();		
						}
					}else{
						dialog_box_button.parent().children(':first-child').focus();
					}
				}else if( !( e.which < 37 || e.which > 40) ){
					if(dialog_box_button.is(":focus")){
						if( $(e.target).prev().length == 0 ){							
							$(e.target).parent().children(':last-child').focus();		
						}else{
							$(e.target).prev().focus();		
						}				
					}else{
						dialog_box_button.parent().children(':first-child').focus();
					}			
				}			
			}			
		});
		
		/* Prevent user from closing the browser - if any context object alive */
		$( window ).on( "beforeunload", this, function(e) {		
			
			if( mainTablFlags.isForeceLogout ) {
				return true;
			}
			
			if( ! $.isEmptyObject( e.data.contexts ) ) {				
				return "Do you really want to close?";
			}						
		});

		$( window ).on( "unload", this, function(e) {	
			if( ! $.isEmptyObject( e.data.contexts ) ) {				
				if(typeof e.data.contextObj != 'undefined' && typeof e.data.contextObj.popup) {
					e.data.contextObj.onClosePopup( e.data.contextObj.popup.meta.name );
				}				
				/* Now we have to close all other popups that belongs to this context ( most unlikely ) */
				var contexts = Object.keys( e.data.contexts );
				for( var i = 0; i < contexts.length; i++ ) {				
					/* Prepare audit request parameters */
					var params = {};
					params.screenName = e.data.contexts[ contexts[i] ].config.popups[ e.data.contexts[ contexts[i] ].config.main_window ].topbar.title;			
					params = { "strJsonParams": JSON.stringify( params ) };				
					/* Prepare request parameters - to notify that the window has been Closed */
					e.data.request = e.data.prepareRequest( "POST", "/app/ikeaCommonUtilController/removeScreenNameFromSession", params, "json", "REMOVE-FROM-AUDIT", "application/x-www-form-urlencoded; charset=UTF-8" );
					e.data.ajaxFlaQ = true;
					e.data.dock();		
				}			
			}		
		});
		
		//for pagination popup search cretiria
		
		$( document ).on( "click", ".rsu_extra_coloum_search_button_container", this, function( e ){
			$( "#inputSrId_1" ).val( "" ); 			
			var _icon = $( ".rsu_extra_coloum_search_button" );
			var _container = $( ".rsu_extra_coloum_search_cretiria_container" );
			if( _icon.is( ".fa-plus-circle" ) ){
				_icon.addClass( "fa-minus-circle" ).removeClass( "fa-plus-circle" );
				_container.slideDown();				
			} else {
				_icon.addClass( "fa-plus-circle" ).removeClass( "fa-minus-circle" );
				_container.slideUp();
				e.data.triggerSearch();
			}
			
		});
		
		
		$( document ).on( "click", ".preview-popup-download", function(){
			window.open(docker_path+"/app/reportsController/downloadReport?filePath="+$( this ).attr( "data-path" ), "_blank");
		});
		
		
		$( document ).on("mouseover","#rsu-context-menu-box li a",function() {
			  $(".active_context").removeClass("active_context");
			  $(this).addClass("active_context");
		});
	};
	
	/* Loads the module dependencies ( js script files ) dynamically */
	this.loadScript = function( fname ) {
		/* Prepare the id of the script tag thats about to be loaded */
		var fromIndex = parseInt( fname.lastIndexOf( "/" ) ) + 1;
		var toIndex = fname.lastIndexOf( "." );
		var scriptId = fname.substring( fromIndex, toIndex );
		/* Check whether the script is already loaded */
		if( $( "#" + scriptId ).length > 0 ) {			
			/* In order to prevent cached files
			 * We need to clear this */
			$( "#" + scriptId ).remove();
		} 			
		/* No the script is not there already, so Initiate the Loading */
		var sfile = document.createElement( 'script' );
        sfile.setAttribute( "type", "text/javascript" );
        sfile.setAttribute( "id", scriptId );
        sfile.setAttribute( "src", docker_path + "/resources/transactions/js" + fname +"?v="+ version_info );        
        document.getElementsByTagName( "body" )[0].appendChild( sfile );        
        sfile.onload = function() {
        	rSuControllerObj.onScriptLoaded();
        };
			        
	};
	
	
	
	
	/* Callback handler for Module Dependency loader, which will ensure 
	 * all the modules are loaded and then Switch the Context */
	this.onScriptLoaded = function() {
		var dependencies = [];
		var context = this.menuItem.attr( "data-context" );
		if( typeof rsuDependency[ context ] != 'undefined' ) {
			dependencies = rsuDependency[ context ];			
			if( dependencies.length == ( this.scriptIndex + 1 ) ) {
				this.scriptIndex = 0;				
				/* Ok here we go, switch the context */
				this.switchContext();
			} else {
				this.scriptIndex++;
				if( dependencies[ this.scriptIndex ] != "" ) {
					this.loadScript( dependencies[ this.scriptIndex ] );
				} else {
					alert( "Invalid dependency configuration entry.!" );
				}			
			}
		} else {
			alert( "Module dependencies configuration not found" );
		}
	};
	
	// Primary context delegator
	// Whenever user select a menu from main nav, 
	// This handler switch application context to user selected 
	this.switchContext = function() {		
		/* If user clicked the context menu which is already visible then just return */		
		if( this.context == this.menuItem.attr( "data-context" ) ) {
			if( this.contextObj != null && this.contextObj.popups[this.contextObj.config.main_window].window.is(":visible") ) {
				return;
			}
		}		
		/* Reset the child popup counter */
		this.subPopupCount = 0;
		/* Reset the switch view counter */
		this.switchViewCount = 0;
		/* Reset the currentZIndex property */
		this.currentZIndex = 2000;
		/* Store the current context in lastContext property */	
		this.lastContext = this.context;
		/* at the very first time the context object would be null, so store the current context as lastContext */
		if( ! this.lastContext ) {
			this.lastContext =  this.menuItem.attr( "data-context" );
		} 
		
		if( this.contexts[ this.lastContext ] ) {
			
			if( typeof this.contexts[ this.lastContext ].popup === 'undefined' ) {
				delete this.contexts[ this.lastContext ];
			}else if( typeof this.contexts[ this.lastContext ] !== 'undefined' && this.contexts[ this.lastContext ].popup.window.is( ":visible" ) ) {			
				this.minimizePopup( null,2 );
			}
		}	
		
		/* Switch the context */
		this.context =  this.menuItem.attr( "data-context" );	
		
		/* Before creating new context object, check whether it's already there */
		if( this.contexts[ this.context ] ) {			
			/* Check whether it's main window is minimized */
			this.contextObj = this.contexts[ this.context ];
			/* Init context menu ( right click menu ) */			
			this.contextObj.popup = this.contextObj.popups[ this.contextObj.config.main_window ];
			var me = this;
			var cpopup = this.contextObj.config.main_window;
			var ccontext = this.context;			
			$( "#mm9 div.menu-text" ).each( function(){
				var _popup = $( this ).attr( "data-popup" );
				var _context = $( this ).attr( "data-context" );					
				if( _popup == cpopup && _context == ccontext ) {
					me.istriggerWindow = true;
					me.isrestoreWindow = true;
					$( this ).trigger( "click" );					
				} 
			});	
			/* Set the current popup object to the context's main popup */
		} else {				
			/* Check for the context specific configuration */
			if( window[ this.context + "_config" ] ) {			
				/* Load config data */
				this.config = window[ this.context + "_config" ];
				/* Prepare audit request parameters */
				var params = {};
				//check is billing window
				if( this.config.onload == "billing_main_window" ){
					//if( this.isNewBilling ){
					//	params.screenName = "New Billing";
					//} else{
						params.screenName = "Billing";
					//}
				
				} else if( this.config.onload == "collection" ){
					//if( this.isTodaysCollection ) {
					//	params.screenName = "Today's Collection";
					//}else{
						params.screenName = "Market Collection";
					//}
					
				} else {
					params.screenName = this.config.popups[ this.config.main_window ].topbar.title;
				}
				params.pbayoutUpdate = "1";
				params.enfSyncFlag = ""+enfSyncFlag["status"];
				params = {"strJsonParams":JSON.stringify(params)};
				/* Prepare request parameters */
				this.request = this.prepareRequest( "POST", "/app/ikeaCommonUtilController/updateScreenNameIntoSession", params, "json", "ADD-TO-AUDIT", "application/x-www-form-urlencoded; charset=UTF-8" );
				this.dock();			
			} else {
				// Configuration not found, Alert user
				alert( "Configuration not Found.!" );
			}
		}	
		
		
	};
	
	/* This is the handler which initiate the Context object */
	this.initiateContextObject = function() {
		// Context object loaded one from assets/js/contexts/
		this.contextObj = new window[ this.context ]( this, window[ this.context + "_config" ] );
		/* Hand over the control to context object */
		this.contextObj.initContext();			
		/* Store the context object for later usage */
		this.contexts[ this.context ] = this.contextObj;
		/* Init context menu ( right click menu ) */
		//
		$( window ).off( "keydown" );
		
		/* Generate mutex lock */		
		if (this.mutex[this.context] && Array.isArray(this.mutex[this.context])) {			
			for (let i = 0; i < this.mutex[this.context].length; i++) {
				this.contextObj[this.mutex[this.context][i]] = Date.now().toString(36) + Math.random().toString(36).substr(2);
			}			
		}
	};
	
	/* This is the one which initaite context menu ( the one which comes whenever you right click ) */
	this.initContextMenu = function() {
		var shortcut = "";
		var context_ul = $( "#rsu-context-menu-box" );
		if( this.contextObj.popups[ this.contextObj.popup.meta.name ] ) {	
			actions = JSON.parse( JSON.stringify( this.contextObj.popups[ this.contextObj.popup.meta.name ].meta.bottom_action_bar.actions ) );
			/* Allow context objects to additional context menu items */			
			if( typeof this.contextObj.onContextMenuCreation != 'undefined' ) {				
				// If the current context's object has handler for this event then call it. 
				actions = this.contextObj.onContextMenuCreation( actions );
			}			
			/* Clear the old context menus */
			context_ul.html( "" );
			/* Load new context popup menu */
			for( var i = actions.length - 1; i >= 0; i-- ) {
				shortcut = "";
				if( typeof actions[i].shortcut != 'undefined' ) {
					shortcut = actions[i].shortcut;
				}
				context_ul.append( $( '<li><a href="#" class="'+ actions[i].classes +'" >'+ actions[i].title +'<span>'+ shortcut +'</span></a></li>' ) );
			}
			
		}
		if( typeof this.contextObj.updateActionBtnStatus != "undefined" ){
			var status = this.contextObj.updateActionBtnStatus();
			for (var i in status) {
				if( status[i] == "disable" ){
					context_ul.find( "a."+ i ).addClass( "disable" );
				} else if( status[i] == "enable" ){
					context_ul.find( "a."+ i ).removeClass( "disable" );
				} else if( status[i] == "hide" ){
					context_ul.find( "a."+ i ).hide();
				} else if( status[i] == "show" ){
					context_ul.find( "a."+ i ).show();
				}
			}
		}
	};
	
	/*  */
	this.triggerSearch = function() {
		this.isPaginationFilter = true;
		this.isPaginationPager = false;	
		/*if( !$( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) && this.lastSearchTxt == $( "#inputSrId" ).val() ){
			return;
		}*/
		this.lastSearchTxt = $( "#inputSrId" ).val();
		/* Reset the current page number */
		this.contextObj.popup.pageNumber = 1;
		$("#rsu-pagination-popup-page").val( this.contextObj.popup.pageNumber );		
		var params = this.prepareRequestParams( null, this.contextObj.popup.meta.actions.rsu_post.data );
		if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) ){
			params["additionalJsonParam"]={"additionalColumnToSearch": $( "#selectOnId_1" ).val() ,"additionalColumnSearchText": $( "#inputSrId_1" ).val() ,"additionalTextSearchType":$( "#selectTypeId_1" ).val() };
		}	
		params["columnSearchText"] = this.lastSearchTxt;
		if( !$.isEmptyObject( rSuControllerObj.pageCache ) && typeof rSuControllerObj.pageCache[this.context] != "undefined" && typeof rSuControllerObj.pageCache[this.context][this.contextObj.popup.meta.name] != "undefined" &&    !$.isEmptyObject( rSuControllerObj.pageCache[this.context][this.contextObj.popup.meta.name] ) ){
			var searchRec = this.doLocalPageSearch( this.lastSearchTxt, $( "#selectOnId" ).val(), $( "#selectTypeId" ).val() );
			if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) && $( "#inputSrId_1" ).val() != "" ){
				searchRec = this.doLocalPageSearch( $( "#inputSrId_1" ).val(), $( "#selectOnId_1" ).val(), $( "#selectTypeId_1" ).val(), searchRec );
			}
			var filterpagerec = this.filterPage( searchRec, 1 );
			this.contextObj.popup.handlePaginationResponse( filterpagerec );
		} else {
			this.request = this.prepareRequest( "POST", this.contextObj.popup.meta.actions.rsu_post.action,params, "json", "LIST" );
			this.ajaxFlaQ = true;
			this.dock();	
		}
	};
	
	this.triggerSearchLastPage = function() {
		
		this.isLastSearchFocus = true;
		this.contextObj.popup.pageNumber = this.contextObj.popup.totalPages;
		$("#rsu-pagination-popup-page").val( this.contextObj.popup.pageNumber );
		if( !$.isEmptyObject( rSuControllerObj.pageCache ) && typeof rSuControllerObj.pageCache[this.context] != "undefined" && typeof rSuControllerObj.pageCache[this.context][this.contextObj.popup.meta.name] != "undefined" &&    !$.isEmptyObject( rSuControllerObj.pageCache[this.context][this.contextObj.popup.meta.name] ) ){
			var searchRec = this.doLocalPageSearch( this.lastSearchTxt, $( "#selectOnId" ).val(), $( "#selectTypeId" ).val() );
			if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) && $( "#inputSrId_1" ).val() != "" ){
				searchRec = this.doLocalPageSearch( $( "#inputSrId_1" ).val(), $( "#selectOnId_1" ).val(), $( "#selectTypeId_1" ).val(), searchRec );
			}
			var filterpagerec = this.filterPage( searchRec, $("#rsu-pagination-popup-page").val() );
			this.contextObj.popup.handlePaginationResponse( filterpagerec );
		}else{
			var params = this.prepareRequestParams( null, this.contextObj.popup.meta.actions.rsu_post.data );
			if( $( "#inputSrId_1" ).closest( ".rsu_extra_coloum_search_cretiria_container" ).is( ":visible" ) ){
				params["additionalJsonParam"]={"additionalColumnToSearch": $( "#selectOnId_1" ).val() ,"additionalColumnSearchText": $( "#inputSrId_1" ).val() ,"additionalTextSearchType":$( "#selectTypeId_1" ).val() };
			}	
			params["columnSearchText"] = $( "#inputSrId" ).val();
			this.request = this.prepareRequest( "POST", this.contextObj.popup.meta.actions.rsu_post.action,params, "json", "LIST" );
			this.ajaxFlaQ = true;
			this.dock();
		}
	};
	
	/* Grid navigator, which determines which of the grid cell would get the next focus */
	this.navigateGrid = function( keyCode, target, direction, _mouse_target ) {
		if( !( $( ".messager-window" ).is( ":visible" ) ) ){
			var current = target,
			prev = target;
			if( this.contextObj.popup.meta.type == "pagination" && keyCode == 13 ) {
				return;
			}
			if( direction == "next" ) {
				if( ! target.is( ":last-child" ) ) {
					current = target.nextAll( ":visible" ).first();								 
				} else {
					if( !( target.closest( "table" ).parent().is( ".isSecGridcontentWrapper" ) ) ) {
						current = target.parent().next().find( "td:nth-child(1)" ).nextAll( ":visible" ).first();
					} else {
						current = target.parent().next().find( "td:nth-child(1)" );
					}				
				}			
				prev = target;						
				this.moveGridFocus( keyCode, prev, current );
			} else if( direction == "prev" ) {			
				if( ! target.is( ":nth-child(2)" ) ) {
					current = target.prevAll(":visible").first();
					if( current.is( ":nth-child(1)" ) ) {
						if( target.parent().prev('tr').length > 0 ) {
							current = target.parent().prev().find("td:last-child");
						} else {
							current = null;
						}
					}					
					if( current.is( ":nth-child(2)" ) && current.attr("data-field") != "x") {
						this.contextObj.popup.window.find( "div.rsu-popup-content-wrapper" ).scrollLeft(0);
					}
				} else {				
					if( target.parent().prev('tr').length > 0 ) {
					current = target.parent().prev().find("td:last-child");						
					} else {
						current = null;
					}				
				}
				if( target.closest( "table" ).parent().is( ".isSecGridcontentWrapper" ) ) {
					if( target.is( ":nth-child(2)" ) ){
						current = target.prev();
					} else if( target.is( ":first-child" ) ){
						current = target.parent().prev().find( ":last-child" );
					}
				}
				this.moveGridFocus( keyCode, prev, current );
			} else if( direction == "up" ) {
				if( target.parent().prev().find( "td:nth-child( "+ ( current.index() + 1 ) +" )" ).length != 0 ){
					current = target.parent().prev().find( "td:nth-child( "+ ( current.index() + 1 ) +" )" );	
				}else {
					current = target.parent().find( "td:nth-child( "+ ( current.index() + 1 ) +" )" );	
				}
				this.moveGridFocus( keyCode, prev, current );
			} else if( direction == "down" ) {		
				current = target.parent().next().find( "td:nth-child( "+ ( current.index() + 1 ) +" )" );			
				this.moveGridFocus( keyCode, prev, current );
			}else if( direction == "tab" ) {
				current = target;	
				this.moveGridFocus( keyCode, prev, current );
			} else if(direction == "pageDown" ){
				current = target;	
				this.moveGridFocus( keyCode, prev, current );
			} else if(direction == "pageUp" ){
				current = target;	
				this.moveGridFocus( keyCode, prev, current );
			} else {
				// User has clicked on arbitrary location
				current = target;
				prev = target.parent().parent().find( "td.active" );
				this.moveGridFocus( "mouse", prev, current, _mouse_target );
			}
		}
	};
	
	/* Grid navigator which actually does setting the focus */
	this.moveGridFocus = function( keyCode, prev, current, _mouse_target ) {
		/* Check whether the "current" property is valid ( which is about to be focused ) */
		this.pageText = "";
		if( ! current || typeof current == 'undefined' ) {
			return;
		}
		var getLastCell = "";
		var _prev = prev;
		
		// Allow context object to validate before moving focus to next TD
		// If it returns true then we move to next, otherwise not ( some validation error occurred )
		if( this.contextObj.onSelectNextGrid( keyCode, prev, current, _mouse_target ) ) {
			
			// If screen anywhere selection found remove it 
			if ( window.getSelection ) {
				if ( window.getSelection().empty ) { 
					window.getSelection().empty();
				}
			}
			
			
			//if tab key pressed set the focus on footer field or action button
			if( keyCode == 9 ){
				current.trigger( "focus" ); 
				return;
			}	
			if(this.contextObj.popup.meta.type != 'pagination' && ( keyCode == 33 || keyCode == 34)){
				return this.moveGridWithPageKeys( keyCode, prev, current );
			}
			
			/* Make the target active */
			current.parent().parent().find( "td" ).removeClass("active");
			if( current.prop( "tagName" ) == "TD" && this.isGridItem( current ) ){
				current.addClass( "active" );
				/* For preventing horizontal scroll from moving left
				 * Added this for Column Freezer widget */
				if (this.fromFreezerWidget) {
					this.fromFreezerWidget = false;
				} else {
					current.focus();
				}				
			}
			getLastCell = current;
			/* Store the active grid item here, will come handy for later use */
			this.selectedGrid = current;			
			var key = current.parent().find( "td:first-child" ).attr( "data-field" );
			if( key && this.contextObj.popup.gridHeader ) {
				var probe_msg = this.contextObj.popup.gridHeader.find( 'th:nth-child('+ ( current.index() + 1 ) +')' ).data( "message" );
			}
			/* If it is pagination popup show the caret icon ( right arrow icon ) */
			if( this.contextObj.popup.meta.type == "pagination" ) {				
				current.parent().parent().find( "td:first-child" ).find( "i" ).hide();
				current.parent().find( "td:first-child" ).find( "i" ).show();
				this.contextObj.popup.window.find( "input#inputSrId" ).trigger( "focus" );
			}		
			if( prev.attr( "data-behaviour" ) == "decimal" && prev.attr( "editable" ) == "true" && prev.text().length < 5 && prev.text() != "" ){
				var fraction = prev.text().split( "." );
				prev.text( fraction[0].length == 0 ? "0" + prev.text() : prev.text() );
				prev.text( fraction[1].length == 1 ? prev.text() + "0" : fraction[1].length == 0 ? prev.text() + "00" : prev.text() );	
			
			}
			
			if( prev.attr( "data-behaviour" ) == "decimal"  && prev.attr( "editable" ) == "true" && prev.text() != "" ){
				prev.text( parseFloat( this.getCellValue( prev ) ).toFixed(2) );
				if( parseFloat( prev.text() )  == 0 ){
					prev.text( "0.00" );
				}
			}
				
		} else {
			_prev.focus();
			getLastCell = _prev;
			var e = { tagName : "TD", shiftKey : false, keyCode : 1 };
			this.triggerEditable( _prev, e, true, true );	
		}
		if( this.contextObj.popup.meta.type != "pagination" && typeof this[ this.contextObj.popup.meta.name ] != "undefined" ){
			this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledIndex = this.getGridIndex( getLastCell );
			this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledField = getLastCell.attr( "data-field" );
		}
	};
	
	
	this.moveGridWithPageKeys = function(keyCode, prev, current ){
		var fIndex = 0;
		if( !prev.closest( "table" ).parent().is( ".rsu-sec-grid-table" ) ){
			if(keyCode == 33){
				fIndex = rSuControllerObj.getGridIndex(prev);
				rSuControllerObj.setGridFocusForPageKeys( Math.max((fIndex - 7), 0), prev.data('field'));
				return false;
			} else {
				fIndex = rSuControllerObj.getGridIndex( prev );
				var maxIndex = Math.max(99, rSuControllerObj.contextObj.popup.grid.records != null ? rSuControllerObj.contextObj.popup.grid.records.length:0);
				rSuControllerObj.setGridFocusForPageKeys(Math.min((fIndex + 7),maxIndex), prev.data('field'));
				return false;
			}
		} else {
			prev.removeClass( "active" );
			var table 	 	= prev.closest( "table" ),
				tableTr		= table.find( "tr" ),
				tableTrCurIndex	= prev.closest( "tr" ).index(),
				tableTrCount 	= tableTr.length-1,
				tIndex = 0;
			if( keyCode == 33 ){				
				tIndex = Math.max( 0,tableTrCurIndex - 5 );							
			} else {
				tIndex = Math.min( tableTrCount,tableTrCurIndex + 5 );	
			}
			table.find( "tr:eq("+tIndex+")" ).find( "td[data-field="+prev.data( "field" )+"]" ).addClass( "active" ).focus();
		}
	};
	
	this.moveGridWithCtrlUpDown = function(keyCode){
		if(keyCode == 38){
			var prev = rSuControllerObj.contextObj.popup.grid.gridTable.find('tr:first').find('td:first').nextAll( ":visible:first");
			rSuControllerObj.setGridFocus(  0, prev.data('field'));
			return false;
		}
		if(keyCode == 40){
			var maxIndex = Math.max(99, rSuControllerObj.contextObj.popup.grid.records != null ? rSuControllerObj.contextObj.popup.grid.records.length:0);
			var prev = rSuControllerObj.contextObj.popup.grid.gridTable.find('tr:eq('+maxIndex+')').find( 'td:visible:last' );
			rSuControllerObj.setGridFocus(maxIndex, prev.data('field'));
			return false;
		}
	};
	
	/* Apply the Decimal behaviour 
	 * ( selecting fractional part if "." key is pressed )
	 *  input fields or grid item */
	this.applyDecimalFractionalBehaviour = function( field, keyCode, e ) {
		var thisVal = field.val();
		var fraction = field.val().split('.'); 
		var dotIndex = thisVal.indexOf(".");
		var trimFDot = thisVal.charAt(dotIndex);
		var thisMaxL = "";
	if( field.prop( "tagName" ) == "INPUT"  && !field.is( ".rsu-readonly-field" ) && !field.prop( "readonly" ) ){
		if( keyCode == "click" ){
			if( field[0].selectionStart == field[0].selectionEnd ){
				if( fraction[1].length == 0 && fraction[0].length > field[0].selectionStart ){
					field.val( field.val()+"00" );
					field[0].setSelectionRange( fraction[0].length, fraction[0].length );
					e.preventDefault();
				} else if( fraction[1].length == 1 && fraction[0].length > field[0].selectionStart  ){
					field.val( field.val()+"0" );
				}
				if( !field.attr( "readonly" ) && !field.is( ".rsu-readonly-field" ) ){
				     field[0].setSelectionRange( 0, fraction[0].length );
				}
			}
		} else if( e.type == "keydown" ){
			if( ( keyCode == 8 || keyCode == 46  ) && ( field[0].selectionEnd == thisVal.length && field[0].selectionStart == 0 ) ){
				field.val( "0.00" );
				field[0].setSelectionRange( 0, 1 ); 
				e.preventDefault();
				return false;
			}	
			if( keyCode == 8 && field[0].selectionStart == fraction[0].length+1 && field[0].selectionEnd == fraction[0].length+1 ){
				field[0].setSelectionRange( fraction[0].length, fraction[0].length );     
			} else if( keyCode == 46 && field[0].selectionStart == fraction[0].length && field[0].selectionEnd == fraction[0].length ){
				e.preventDefault();  				 
			}			
			if( keyCode == 8 || keyCode == 46 && field[0].selectionStart != field[0].selectionEnd ){
				var selectNum = "";
				for(var i = field[0].selectionStart; i < field[0].selectionEnd; i++ ){
					selectNum += field.val()[i];
				}
				if( selectNum.indexOf( "." ) != -1 &&  selectNum.length == 1 ){
					e.preventDefault();
					return;					
				}			
				if( selectNum.indexOf( "." ) != -1 ){
					if( selectNum.split( "." )[1].length != 0 ){
						var newval = this.replaceStr( field[0].selectionStart, field[0].selectionEnd+1, "", field.val() );
						if( selectNum.split( "." )[1].length == 2 ){							
							field.val( newval+".00" );
							return;
						} else {
							field.val( newval+"."+fraction[1][1]+"0" );
							return;
						}
					}
				} 
			} else if( field[0].selectionStart != field[0].selectionEnd && !( ( keyCode < 48 || keyCode > 57 )  && ( keyCode < 96 || keyCode > 105 ) ) ){
				var selectNum = "";
				for(var i = field[0].selectionStart; i < field[0].selectionEnd; i++ ){
					selectNum += field.val()[i];
				}
				if( field[0].selectionStart == 0 && field[0].selectionEnd == field.val().length ){
					field.val( ".00" );
					field[0].setSelectionRange( 0, 0 );
				}
				
				if( selectNum.indexOf( "." ) != -1 &&  selectNum.length == 1 ){
					field.val( fraction[0]+"."+ String.fromCharCode( ( 96 <= keyCode && keyCode <= 105 ) ? keyCode-48 : keyCode )+""+fraction[1][1] );
					field[0].setSelectionRange( fraction[0].length+1, fraction[0].length+1 );
					e.preventDefault();
					return;
				}
			}
			
			if( field[0].selectionStart == field[0].selectionEnd ){
				if( fraction[1].length == 0 && field[0].selectionStart  ){
					field.val( field.val()+"00" );
					field[0].setSelectionRange( fraction[0].length, fraction[0].length );
					e.preventDefault();
				}			
				
			}
			if( !field.hasClass( "rsu-readonly-field" ) && fraction[1].length == 1 && fraction[0].length < field[0].selectionStart && !( ( keyCode < 48 || keyCode > 57 )  && ( keyCode < 96 || keyCode > 105 ) ) ){
				var startindex = field[0].selectionEnd;
				field.val( thisVal.substring( 0, field[0].selectionStart )  + String.fromCharCode( ( 96 <= keyCode && keyCode <= 105 ) ? keyCode-48 : keyCode ) + thisVal.substring( field[0].selectionStart-1 + 1) );
				field[0].setSelectionRange( startindex+1, startindex+1 ); 
				this.lastfractionedit = false;
			}
			
			if( thisVal.indexOf( '.' ) != -1 && keyCode == 190 || keyCode == 110 ){				
				if( thisVal.length - field[0].selectionEnd == 3 && thisVal.length - field[0].selectionStart == 3 ){      
					field[0].setSelectionRange( fraction[0].length+1, fraction[0].length+1);       
				} else{            
					var franctionCur = field.val().split('.');
					field[0].setSelectionRange( franctionCur[0].length+1, franctionCur[0].length+1 );  
				}
				e.preventDefault();				
			}	
			
			//when all value selected and partially select decimal part - edit only int part 
			if( field[0].selectionStart == 0 &&  field[0].selectionEnd > thisVal.length-3 ){
				field[0].setSelectionRange( 0, fraction[0].length ); 
			}
		} else if( e.type == "keyup" ){
			
			if ( e.ctrlKey && keyCode == 86 && isNaN( field.val() ) ){
				field.val( "0.00" );
				field.focus();
				rSuControllerObj.probeUser( "Invalid decimal pasted.", "error" );
				return;
			}
			
				if( field.attr( "maxlength" ) != undefined   ){   
					thisMaxL = field.attr( "maxlength" );
				} else{
					thisMaxL = 15;
				}
				if ( thisVal.indexOf('.') != -1 ){    
					//After period number key press
					if( !( ( keyCode < 48 || keyCode > 57 )  && ( keyCode < 96 || keyCode > 105 ) ) ){						
						if( !field.hasClass( "rsu-readonly-field" ) ){	
							
							if( fraction[1].length == 2 && this.lastfractionedit ){								
								if( fraction[0].length > field[0].selectionStart && thisMaxL == thisVal.length && field[0].selectionEnd != fraction[0].length && field[0].selectionStart != fraction[0].length ){
									var startindex = field[0].selectionEnd;
									field.val( thisVal.substring( 0, field[0].selectionStart )  + String.fromCharCode( ( 96 <= keyCode && keyCode <= 105 ) ? keyCode-48 : keyCode ) + thisVal.substring( field[0].selectionStart + 1) );
									field[0].setSelectionRange( startindex+1, startindex+1 ); 
									return;									
								}
								
								//After period first number change
								if( thisVal.length - field[0].selectionEnd == 2 && thisVal.length - field[0].selectionStart == 2 ){     
									field.val( thisVal.substring( 0, thisVal.length-2 ) + String.fromCharCode( ( 96 <= keyCode && keyCode <= 105) ? keyCode-48 : keyCode ) + thisVal.substring( thisVal.length-2 + 1) );
									field[0].setSelectionRange( fraction[0].length+2, fraction[0].length+2 ); 
									return;
								}
								//After period second number change
								if( thisMaxL >= thisVal.length ){
									if( thisVal.length - field[0].selectionEnd == 1 && thisVal.length - field[0].selectionStart == 1 ){       
										field.val( thisVal.substring( 0, thisVal.length-1 ) + String.fromCharCode( ( 96 <= keyCode && keyCode <= 105 ) ? keyCode-48 : keyCode ) + thisVal.substring(thisVal.length-1 + 1) );
										field[0].setSelectionRange( thisVal.length, thisVal.length ); 
										return;
									}
								}																
							} else{
								this.lastfractionedit = true;
							}
							
							// Is exceed max-length auto period
							if( fraction[1].length == 2 ){
								if( thisMaxL == thisVal.length && thisVal.length-2 > field[0].selectionEnd && thisVal.length-2 > field[0].selectionStart ){     
									field[0].setSelectionRange( fraction[0].length+1, fraction[0].length+1 ); 
									return;
								}
							} else if( fraction[1].length == 1 ){
								if( thisMaxL == thisVal.length+1 && thisVal.length-2 > field[0].selectionEnd && thisVal.length-2 > field[0].selectionStart ){     
									field[0].setSelectionRange( fraction[0].length+1, fraction[0].length+1 ); 
									return;
								}
							} else if( fraction[1].length == 0 ){
								if( thisMaxL == thisVal.length+2 && thisVal.length-2 > field[0].selectionEnd && thisVal.length-2 > field[0].selectionStart ){     
									field[0].setSelectionRange( fraction[0].length+1, fraction[0].length+1 ); 
									return;
								}
							}
							
						}					
					}	
					
				}			
				if( field[0].selectionStart == field[0].selectionEnd ){
					if( fraction[1].length == 1 && fraction[0].length > field[0].selectionStart-1 ){
						var startind = field[0].selectionStart;
						field.val( field.val()+"0" );
						field[0].setSelectionRange( startind, startind ); 
					}
				}
				if( thisVal == "." ){
					field.val('0.00');
				}
				if( ( keyCode == 8 || keyCode == 46 ) && field[0].selectionStart == field.val().length && field[0].selectionEnd == field.val().length && parseFloat( field.val()  ) == 0 && field.val() != "0.0" ){
					if( field.val() == "0." ){
						field.val( ".00" );
					}
					field[0].selectionStart = 0;
					field[0].selectionEnd = 0;
				}
				
			}
		}
	};
		
	/* Apply mask for the fields */
	this.applyFieldMask = function() {		
		//$( 'input[data-behaviour=date]' ).mask( '00/00/0000', { placeholder: "__/__/____", selectOnFocus: true } );		
		//$( 'input[data-behaviour=money]' ).mask( '000000000000000.00', { selectOnFocus: true } );
		//$( 'input[data-behaviour=decimal]' ).mask( '000000000000000.00', { selectOnFocus: true } );		
	};
	
	/* Popup help handler */
	this.showPopupHelp = function( _target ) {
		var context = _target.attr( "data-doc_context" )
		if( this.window_doc_path != null ){
			this.window_doc_path.close();
		}
		if( context != "" && context != "undefined" ){			
			this.window_doc_path = window.open( docker_path+'/views/doc/index.jsp?path_directory='+context, '_blank' );
		} else {
			this.window_doc_path = window.open( docker_path+'/views/doc/index.jsp', '_blank' );
		}
	};

	this.paginationPopupCloseMsg = function (popuptype){
		if( popuptype == "pagination" ) {
			var me = this;
			this.lastActive =  this.tempLastActive; 
			setTimeout(function(){	
				//var attr = me.lastActive.attr('id');
				if( typeof me.lastActive != "undefined" && me.lastActive != null ){
					me.lastActive.focus();
				}
				me.probeUser( "Search cancelled by user", "info" );		
			}, 400);
		}
	};
	
	
	this.onConfirmClose = function(){
		if( rSuControllerObj.lastActive.length != 0 ){
			if( !rSuControllerObj.lastActive.is( ".rsu-popup-action-btn" ) ){
				rSuControllerObj.lastActive.focus();
			} else {
				$( "#rsu-popup-"+rSuControllerObj.contextObj.popup.meta.name+"-grid-area .active" ).focus();
			}
		}
	};
	
	/* Minimizing handler for windows & popups */
	this.minimizePopup = function( target,minval ) {		
		/* Load the current popup name from the  */
		var _popup = this.contextObj.popup.meta.name;		
		if( target ) {
			_popup = target.data( "popup" );
		}
		
		/* let the current context knows that we are going to minimize this popup
		 * Only do if they allow you to do so */
		if( this.contextObj.onMinimizePopup( _popup, minval ) ) {			
			if( this.contextObj.config.main_window == _popup ) {
				if( this.subPopupCount > 0 ) {
					this.probeUser( "Please close all child popup before minimizing.!", "error" );
					return;
				}	
				/* If it is main window then put it under Window menu */
				var submenu = $( "#mm9" );
				var sub_item_length = $( "#mm9 > div").length;
				var dubFlg = true;
				for( var i = 0; i < sub_item_length; i++ ){
					if( $( $( "#mm9 > div > div")[i] ).attr( "data-popup" ) == _popup ){
						dubFlg = false;
					}	
				}
				if( dubFlg || _popup == "collection" || _popup == "billing_main_window" ){
					submenu.append( $( '<div class="menu-item"><div onclick="trigger_fired_first( event, this );trigger_transaction(this)" data-popup="'+ _popup +'" data-context="'+ this.context +'" data-task="restore" title="Click to restore '+ this.contextObj.popups[ _popup ].meta.topbar.title +' popup" class="menu-text" data-title="'+ this.contextObj.popups[ _popup ].meta.topbar.title +'">' + sub_item_length + '. ' + this.contextObj.popups[ _popup ].meta.topbar.title +'</div></div>' ) );
				}
				this.contextObj.popups[ _popup ].window.hide();
				$( "#rsu-window-menu-item" ).removeClass( "disabled" );			
				this.probeUser( "", "ionfo" );
			} else {
				/* Increment the switch view count */
				this.switchViewCount++;
				/* If it is not main window then put it under secondary restore container
				 * ( bottom right corner ) */
				this.contextObj.popups[ _popup ].window.find( "div.rsu-popup" ).hide();
				$("#rsu-secondary-popup-minimize-bar").append( $( '<a href="#" class="rsu-sec-popup-restore-btn" data-context="'+ this.context +'" data-popup="'+ _popup +'"><i class="fa fa-list-alt"></i> ' + this.contextObj.popups[ _popup ].meta.topbar.title +'</a>' ) );
				
				var flaQ = false;
				var lpopup = null;
				var popups = Object.keys( this.contextObj.popups );
				
				for( var i = 0; i < popups.length; i++ ) {
					if( this.contextObj.config.main_window != popups[i] ) {						
						if( this.contextObj.popups[ popups[i] ].window.is(":visible") ) {
							flaQ = true;
							if( i == 0 ) {
								lpopup = this.contextObj.popups[ popups[i] ];
							} else {	
								if( ! lpopup ) {
									lpopup = this.contextObj.popups[ popups[i] ];
								}
								var czindex = parseInt( this.contextObj.popups[ popups[i] ].window.css( "z-index" ) );
								var pzindex = parseInt( lpopup.window.css( "z-index" ) );
								if( czindex > pzindex ) {
									lpopup = this.contextObj.popups[ popups[i] ];
								}				
							}							
						}
						
					}
				}				
				if( flaQ ) {
					/* Now update the current popup property to the main popup object */
					this.contextObj.popup = lpopup;
					this.lastPopup = lpopup.meta.name;					
				} else {
					/* Now update the current popup property to the main popup object */
					this.contextObj.popup = this.contextObj.popups[ this.contextObj.config.main_window ];
				}			
			}	
			
		}
	};
	
	/* Maximizing handler for any popup */
	this.maximizePopup = function( target ) {
		var _popup = target.attr( "data-popup" );
		var _context = target.attr( "data-context" );
		
		/* Check the popup that has to be restored from the same context, otherwise switch it */		
		if( this.context != _context ) {			
			/* Make sure the last context object is there, it might be get closed */
			if( this.contexts[ this.context ] ) {
				/* Now likely other context's main popup on visible state */
				if( this.contextObj.popup.meta.name == this.contextObj.config.main_window ) {
					/* Minimize that window before restoring the target popup */
					if( this.contextObj.popup.window.is(":visible") ) {
						this.minimizePopup( null,2 );
					}
				}
			}			
			if( ! this.contexts[ _context ] ) {
				alert( "Internel Error, Please Reload the Page" );
				return;
			}
			this.context = _context;
			this.contextObj = this.contexts[ _context ];
		}
		
		this.contextObj.popup = this.contextObj.popups[ _popup ];
		if( this.contextObj.popup.meta.name == this.contextObj.config.main_window ) {
			this.contextObj.popups[ _popup ].window.fadeIn( "normal" );
		} else {
			this.contextObj.popups[ _popup ].window.find( "div.rsu-popup" ).fadeIn( "normal" );
		}
		
		
		
		/* forward focus event to context object */
		if( typeof this.contextObj.onMaximizePopup != 'undefined' ) {
			this.contextObj.onMaximizePopup( _popup );
		}
		
		/* Remove the menu item from Window menu */
		var submenu = $( "#mm9" );
		target.parent().remove();
		
		var index = 1; 
		submenu.find( "div.menu-text" ).each(function(){ 
			$( this ).html( index + ". " + $( this ).attr( "data-title" ) );
			index++;
		});
		/* Window menu have no submenu then disable it */		
		if( submenu.children().length == 1 ) {			
			$( "#rsu-window-menu-item" ).addClass( "disabled" );			
		}	
	};
	
	/* If force is true, then we won't ask user for any confirmation before resting popup */
	this.resetPopup = function( _force ) {
		var me = this;
		/* Load the current popup name from the  */		
		var _popup = this.contextObj.popup.meta.name;	
		
		if( ! _force ) {
			_force = this.contextObj.onResetPopup( _popup );			
		}
		
		if( _force ) {
			var popupMeta = this.contextObj.popups[ _popup ].meta;
			/* Reset Header */
			if( ! $.isEmptyObject( popupMeta.header ) ) {
				for( var i = 1; i <= popupMeta.header.column; i++ ) {				
					this.resetPopupFields( popupMeta.header.fields[ "column_" + i ] );
				}
			}
			
			/* Before touch grid object, make sure this popup has one */
			if( ! $.isEmptyObject( popupMeta.grid ) ) {
				/* Reset the GRID view */			
				if( $( "#rsu-popup-"+ _popup +"-grid-area" ).length != 0 ) {
					$( "#rsu-popup-"+ _popup +"-grid-area" )[0].scrollTop = 0;
					$( "#rsu-popup-"+ _popup +"-grid-area" ).html( "" );				
					this.contextObj.popups[ _popup ].grid = new rsu_grid( this.contextObj.popups[ _popup ], popupMeta.grid, $( '#rsu-popup-'+ this.contextObj.popups[ _popup ].meta.name +'-grid-area' ) );				
					this.contextObj.popups[ _popup ].grid.loadRecord( null, false );
				}
			}
						
			/* Reset the GRID's footer view */
			if( popupMeta.grid.show_footer && this.contextObj.popups[ _popup ].gridFooter ) {				
				for( var i = 1; i <= popupMeta.grid.columns.length; i++ ) {
					this.contextObj.popups[ _popup ].gridFooter.find( "tfoot > tr" ).find( "td:nth-child("+ i +")" ).html( popupMeta.grid.columns[ ( i - 1 ) ].footer.title );					
				}				
			}	
			
			this.contextObj.popups[ _popup ].gridNormalizer();						
			
			/* Reset Footer */
			for( var i = 1; i <= popupMeta.footer.column; i++ ) {
				this.resetPopupFields( popupMeta.footer.fields[ "column_" + i ] );
			}
			/* Reset probe message */
			this.probeUser( "", "error" );
			/* Change date flg */
			dateValidErrorFlg = false;
			
			/* Clear Ikea Column Freezer  */
			for (let i = 0; i < freezerKeys.length; i++) {
				if (ikeaFreezers[freezerKeys[i]].freezer) {
					ikeaFreezers[freezerKeys[i]].freezer.remove();
					ikeaFreezers[freezerKeys[i]].freezer = null;
				}		
				ikeaFreezers[freezerKeys[i]].on_screen = false;
			}			
			// call context's initialize popup handler
			this.contextObj.initiliazePopup();
		}
		
	};
	
	this.resetPopupFields = function( fields ) {		
		for( var j = 0; j < fields.length; j++ ) {
			if( fields[j].type == "text" || fields[j].type == "number" || fields[j].type == "email" || fields[j].type == "password" || fields[j].type == "textarea" || fields[j].type == "date" ) {
				$( "#" + fields[j].name ).val( fields[j].value );
			} else if( fields[j].type == "checkbox" || fields[j].type == "radio" ) {
				for( var k = 0; k < fields[j].options.length; k++ ) {
					$( "#" + fields[j].options[k] ).prop( "checked", false );
				}
			} else if( fields[j].type == "select" ) {
				$( "#" + fields[j].name ).prop( "selectedIndex", 0 );
			}
			
			if( fields[j].readonly ) {
				$( "#" + fields[j].name ).prop( "readonly", "readonly" );
			}
		}		
	};
	
	
	//integer replacer
	this.replaceStr = function( start, end, character, old ) {
	    return old.substr( 0, start ) + character + old.substr( end+character.length );
	};	
	
	/** 
	 * maintain lastActive after popup open and close
	 */
	this.setLastActive = function() {
		this.tempLastActive = this.lastActive;
	}
	
	this.closePopup = function( _force ) {
		/* Make sure the context Object exist */
		if( ! this.contextObj ) {
			return;
		}		
		/* Load the current popup name from the  */
		var _popup = this.contextObj.popup.meta.name;
		/* maintain lastActive after popup open and close */
		//this.lastActive = this.tempLastActive;
		if( ! _force ) { 
			/* Make sure whether the main window is minimized */
			if( ! this.contextObj.popups[ _popup ].window.is(":visible") ) {
				return;
			}
			/* If the forced flag not set, then  */
			_force = this.contextObj.onClosePopup( _popup );
		}
		if( _force ) {	
			/* used to fix a bug in pagination popup filter functionality */
			if( this.contextObj.popup.meta.type == "pagination" ) {
				/* Clear the pageCache object */
				//this.pageCache = {};
				/* Reset pagination filter flaq */
				this.isPaginationFilter = false;
				/* Reset pagination pager flaq */
				this.isPaginationPager = false;
				/**/
				this.lastSearchTxt = "";
				/**/
				this.paginationCurrentSearchField = "";
				/**/
				clearTimeout( this.searchTimer );				
			}
			// Check whether this is the main Popup, if it is then clear the App container
			// and reset the 'contextObj'			
			if( this.contextObj.config.main_window != _popup ) {				
				/* Close the targeted popup widget */
				this.contextObj.popups[ _popup ].closePopup();
				/* Decrement the sub popup counter */
				this.subPopupCount--;
				/* Now delete the popup object */
				delete this.contextObj.popups[ _popup ];				
				var flaQ = false;
				var lpopup = null;
				var popups = Object.keys( this.contextObj.popups );				
				for( var i = 0; i < popups.length; i++ ) {
					if( this.contextObj.config.main_window != popups[i] ) {						
						if( this.contextObj.popups[ popups[i] ].window.is(":visible") ) {
							flaQ = true;
							if( i == 0 ) {
								lpopup = this.contextObj.popups[ popups[i] ];
							} else {	
								if( ! lpopup ) {
									lpopup = this.contextObj.popups[ popups[i] ];
								}
								var czindex = parseInt( this.contextObj.popups[ popups[i] ].window.css( "z-index" ) );
								var pzindex = parseInt( lpopup.window.css( "z-index" ) );
								if( czindex > pzindex ) {
									lpopup = this.contextObj.popups[ popups[i] ];
								}				
							}							
						}						
					}
				}				
				if( flaQ ) {
					/* Now update the current popup property to the main popup object */
					this.contextObj.popup = lpopup;
					this.lastPopup = lpopup.meta.name;
					/* Reset the lastPopup  property */
					if( this.lastPopup == this.contextObj.config.main_window || this.lastPopup == this.contextObj.config.onload ) {
						this.lastPopup = null;
					}
				} else {
					/* Now update the current popup property to the main popup object */
					this.contextObj.popup = this.contextObj.popups[ this.contextObj.config.main_window ];
				}	
				
				if( this.subPopupCount == 0 && this.lastPopup != this.contextObj.config.main_window ) {
					this.lastPopup = this.contextObj.config.main_window;
				}
				/* Restore focus for last focused element */
				if( this.contextObj.lastActiveElement && this.context != "collection") {
					this.contextObj.lastActiveElement.focus();
				}	
			} else {				
				if( this.subPopupCount > 0 ) {
					this.probeUser( "Please close all child popup before closing.!", "error" );
					return;
				}				
				if( dateValidErrorFlg ){
					dateValidErrorFlg = false;					
				}
				/* Prepare audit request parameters */
				var params = {};
				params.screenName = this.contextObj.config.popups[ this.contextObj.config.main_window ].topbar.title;			
				params = { "strJsonParams": JSON.stringify( params ) };				
				/* Prepare request parameters - to notify that the window has been Closed */
				this.request = this.prepareRequest( "POST", "/app/ikeaCommonUtilController/removeScreenNameFromSession", params, "json", "REMOVE-FROM-AUDIT", "application/x-www-form-urlencoded; charset=UTF-8" );
				this.ajaxFlaQ = true;
				this.dock();
				
				/* Now we have to close all other popups that belongs to this context ( most unlikely ) */
				var popups = Object.keys( this.contextObj.popups );
				for( var i = 0; i < popups.length; i++ ) {
					this.contextObj.popups[ popups[i] ].closePopup();
				}			
				/* Now delete the context object */
				delete this.contexts[ this.context ];				
				/* Now if it is only one context out there then it's time to clear the app container and contextObj */
				if( $.isEmptyObject( this.contexts ) ) {
					/* Clear the context name */
					this.context = null;
					/* Clearing the app container */
					this.appHolder.html( "" );
					/* Reseting the context Object */
					this.contextObj = null;		
					/* Reset the lastPopup  property */
					this.lastPopup = null;
				} else {
					if( this.lastContext != this.context ) {
						this.context = this.lastContext;					
						this.contextObj = this.contexts[ this.context ];
					} else {						
						this.context = Object.keys( this.contexts )[ Object.keys( this.contexts ).length - 1 ];
						this.contextObj = this.contexts[ Object.keys( this.contexts )[ Object.keys( this.contexts ).length - 1 ] ]
					}					
				}				
			}
			/* Reset probe message */
			this.probeUser( "", "info" );				
			
			$( document ).trigger( "rsuPopupClosed", _popup );
			/* Make sure context popup also get closed - if it is opened already */
			$( "#rsu-context-menu-box" ).hide();		
			this.controllercallbackClosePopup( _popup );
			
			/* Clear Ikea Column Freezer  */
			ikeaFreezers = {};
			freezerKeys = [];			
		}		
	};
	
	
	/*
	 * added by pj
	 * for tsi approvel screen purpose
	 * 
	 */
	
	this.controllercallbackClosePopup  = function( _popup ) {
		if( ( _popup == "trade_coupon_approval" || _popup == "other_claims_approval" || _popup == "non_trade_approval" || _popup == "consumer_coupon_approval" || _popup == "pecomApproval" ) && typeof rSuControllerObj.contexts.tsi_approval != "undefined" ){
			if( rSuControllerObj.contexts.tsi_approval.is_other_popup )
			setTimeout(function(){
				trigger_transaction( $("div[data-context=tsi_approval]")[0] );
			},100);
			rSuControllerObj.contexts.tsi_approval.is_other_popup = false;
		}
	};
	
	/**
	 * #_title 		: title of the confirm box
	 * #_message	: message that has to be displayed
	 * #_btns 		: arrays of buttons [ { title: "Yes", value: "yes" },{ title: "No", value: "no" } ]
	 * #_task		: same as prepareRequest - to identify the confirm box results ( which it belongs to )
	 */
	this.showConfirmBox = function( _title, _message, _btns, _task ) {
		/* Update the message that has to be displayed */
		$( "#rsu-confirm-box" ).html( _message );
		
		var btns = {
			title: _title,
			buttons: {}
		};
		
		for( var i = 0; i < _btns.length; i++ ) {
			var val = _btns[i].value;
			var func = function() {
				rSuControllerObj.contextObj.onUserConfirmed( "'"+ _task +"'", "'"+ val +"'" );
				$(this).dialog( "close" );
			};
			btns.buttons[ _btns[i].title ] = func;
		}
		// Show the dialog box
		$( "#rsu-confirm-box" ).dialog( btns );
		
	}
	
	this.updateActionBtnStatus = function( action, status ) {
		var me = this;		
		setTimeout( function(){
			if( status == "disable" ) {
				me.contextObj.popup.window.find( "a." + action ).addClass( "disable" );
				$( "#rsu-context-menu-box>li>a."+ action ).addClass( "disable" );
			} else if( status == "enable" ) {
				me.contextObj.popup.window.find( "a." + action ).removeClass( "disable" );
				$( "#rsu-context-menu-box>li>a."+ action ).removeClass( "disable" );
			} else if( status == "hide" ) {
				me.contextObj.popup.window.find( "a." + action ).hide();				
				$( "#rsu-context-menu-box>li>a."+ action ).hide();
			} else {
				me.contextObj.popup.window.find( "a." + action ).show();
				$( "#rsu-context-menu-box>li>a."+ action ).show();
			}
		}, 250 );		
	};
	
	this.isGridItem = function( target ) {
		if( target.prop( "tagName" ) == "TD" ){
			return target.parent().parent().parent().hasClass( "rsu-grid-table" );
		} else{
			return target.parent().parent().parent().parent().hasClass( "rsu-grid-table" );
		}
	};
	
	this.doValidate = function( field ) {
		if( typeof field.data( "behaviour" ) != 'undefined' && field.data( "behaviour" ) !== false ) {
			return this.pattern[ field.data( "behaviour" ) ].test( field.val() );
		}
		return true;
	};

	/**
	 * 	#arr1	: the array to be concatenated
	 *  #arr2	: the original array
	 *  #key	: key field which would used to check for duplicate
	 */
	this.distinctList = function( arr1, arr2, key ) {
		var flaQ = true;
		var temp = [];
		for( var i = 0; i < arr1.length; i++ ) {
			flaQ = true;
			for( var j = 0; j < arr2.length; j++ ) {
				if( arr1[i][key] == arr2[j][key]  ) {
					flaQ = false;
					break;
				}
			}
			if( flaQ ) {
				temp.push( arr1[i] );
			}
		}		
		return arr2.concat( temp );		
	};
	
	this.prepareRequestParams = function( target, params ) {		
		var data = {};		
		if( this.contextObj.popup.meta.type != "pagination" ) {
			for( var i = 0; i < params.length; i++ ) {
				if ( params[i].type == "field" ) {
					var field = $( "#" + params[i].field );				
					if( !field ) {
						field = $( "input[name=" + params[i].field +"]" );
					}
					// get value from fields - it's straight forward
					if( field.data( "field-type" ) == "text" || field.data( "field-type" ) == "email" || field.data( "field-type" ) == "number" || field.data( "field-type" ) == "select" ||  field.data( "field-type" ) == "password" ) {
						data[ params[i].key ] = $( "#" + params[i].field ).val();
					} else if( field.data( "field-type" ) == "checkbox" ) {
						data[ params[i].key ] = $( 'input[name='+ params[i].field +']:checked').map(function() {
						    return this.value;
						}).get();
					} else if( field.data( "field-type" ) == "radio" ) {
						data[ params[i].key ] = $("input[name="+ params[i].field +"]:checked" ).val();			
					} 
				} else if( params[i].type == "attr" ) {
					// get value from attribute
					// we should make sure whether it needs to return attrbute value itself or the value from the host
					if( params[i].value_from == "host" ) {
						if( params[i].attr_parent == "html" ) {
							data[ params[i].key ] = target.parent().find( 'td[data-field='+ params[i].field +']' ).html();
						} else {
							var field = $( "#" + params[i].field );				
							if( !field ) {
								field = $( "input[name=" + params[i].field +"]" );
							}
							if( field.data( "target-type" ) == "field" ) {
								if( field.data( "field-type" ) == "text" || field.data( "field-type" ) == "email" || field.data( "field-type" ) == "number" || field.data( "field-type" ) == "select" ||  target.data( "field-type" ) == "password" ) {
									data[ params[i].key ] = $( "#" + params[i].field ).val();
								} else if( field.data( "field-type" ) == "checkbox" ) {
									data[ params[i].key ] = $( 'input[name='+ params[i].field +']:checked').map(function() {
									    return this.value;
									}).get();
								} else if( field.data( "field-type" ) == "radio" ) {
									data[ params[i].key ] = $("input[name="+ params[i].field +"]:checked" ).val();			
								} 
							}
						}
					} else {
						if( target.data( "target-type" ) == "field" ) {
							data[ params[i].key ] = target.data( params[i].field );
						} else {
							var attrval = "",
							attrname = params[i].field;											
							target.parent().find( "td" ).each(function( index, item ){
								var attr = $( item ).attr( "data-"+attrname ); 
								if ( typeof attr != 'undefined' && attr !== false ) {
									attrval = attr;
									return;
								}
							});
							data[ params[i].key ] = attrval;												
						}
					}
				} else {
					// It's a static key value pair, given there itself
					data[ params[i].key ] = params[i].value
				}
			}
		} else {	
			
			var qstr = {};
			var temp = {};
			for( var i = 0; i < params.params.length; i++ ) {
				if( params.params[i].key == "pageNumber" ) {
					temp[ params.params[i].key ] = this.contextObj.popup.pageNumber;
				} else if( params.params[i].key == "columnToSearch" ) {
					temp[ params.params[i].key ] = $( "#selectOnId" ).val();
				} else if( params.params[i].key == "columnSearchText" ) {
					temp[ params.params[i].key ] = encodeURIComponent( "" );
				} else if( params.params[i].key == "textSearchType" ) {
					temp[ params.params[i].key ] = $( "#selectTypeId" ).val();
				} else {
					temp[ params.params[i].key ] = params.params[i].value;
				}			
			}		
			/*  */
			if( typeof this.contextObj.popup.meta.do_cache != "undefined" && this.contextObj.popup.meta.do_cache ){
				temp.pageSize = 20000000;
			} else {
				temp.pageSize = 200;
			}
			
			
		//	qstr  += JSON.stringify(temp);
			qstr = { "jasonParam":temp};
			
			temp = {};
			for( var i = 0; i < params.query.length; i++ ) {
				temp[ params.query[i].key ] = params.query[i].value
			}
			
			data = this.contextObj.preparePaginationParams( params, qstr );
			
		}
		return data;
	};
	
	/******************
	 * Action mapping *
	 ******************
	 * POST    = SAVE
	 * PUT     = UPDATE
	 * GET     = GET
	 * DELETE  = DELETE
	 ******************
	 ******************
	 * #rtype 		: could be any of the above request type
	 * #action		: controller path
	 * #params		: list parameter to be sent ( mostly it will be a json object )
	 * #data_type 	: the type of data you are expecting from controller ( mostly json )
	 * #task		: this one is for internal purpose ( to distinguish between various request )
	 * 
	 */
	this.prepareRequest = function( _rtype, _action, _params, _dtype, _task, _ctype, _cache, _processDt, _req_lock ) {
		var ctype = "application/json; charset=utf-8";
		if( _ctype != null && typeof _ctype != 'undefined' ) {
			ctype = _ctype;
		}
		var cache = true;
		if( _cache != null && typeof _cache != 'undefined' ){
			cache = _cache;
		}
		var processDt = true;
		if( _processDt != null && typeof _processDt != 'undefined' ){
			processDt = _processDt;
		}		
		if( this.contextObj && this.contextObj.popup && this.contextObj.popup.meta.type == "pagination" ) {
			_params = JSON.stringify( _params );
		}
		
		/* Special flaq for preventing duplicate request */		
		if(typeof _req_lock != 'undefined' && _req_lock) {
			_req_lock = true;
		} else {
			_req_lock = false;
		}
		
		return {
			/* can be POST, PUT, GET or DELETE */
			rtype: _rtype,
			/* Target controller path ( eg. /app/payment/getPaymentlist.do ) */
			action: _action,
			/* Key values pairs of JS object, which would sent to controller */
			params: _params,
			/* Response type ( eg. json, text, html ... ) */
			data_type: _dtype,
			/* Task type ( could be LIST, SINGLE or CONFIRM ) */
			task: _task,
			/*  */
			content_type: ctype,
			/*  */
			cache : cache,
			/* */
			processDt : processDt,
			/* Request UID flaq  */
			req_uid: _req_lock
		}
	};
	
	//
	this.prepareResponse = function( _data ) {
		return {
			data: _data,
			status: true,
			message: ""
		}
	};

	/* dock with server (::--))). single point of function to communicate with server */
	this.dock = function() {
		
		var me = this;	
		
		/* see the ajax handler is free */
		if( !this.ajaxFlaQ ) {			
			if( $( "#display-message" ).html() == "" ) {				
				this.probeUser( "Please wait while processing", "warning" );
			}			
			return;
		}	
		
		/* Used to store current message on Notification Bar ( which will be replaced with "processing" )
		 * Which will be replaced after ajax response arrived */
		var messageBuffer = $( "#display-message" ).html();
		var messageType = $( "#display-message" ).attr( "class" );
		var popupName = "";
		/* Disable all action buttons */
		//$( "a.rsu-btn" ).addClass( "disable" );
		
		/*if (this.request.req_uid) {
			 Works only on Object type parameters
			 * This means the parameters structure should be KEY: VALUE pairs
			 * Won't work on String or Array type parameters 
			if (typeof this.request.params === 'object') {
				 Generat unique id and pass it along with other parameters 
				this.request.params["CLIENT_REQ_UID"] = Date.now().toString(36) + Math.random().toString(36).substr(2);
			} else if (typeof this.request.params === 'string' || this.request.params instanceof String) {
				try {
			        var temp_param = JSON.parse(this.request.params);
			         Now inject the request id 
			        if (typeof temp_param === 'object') {
			        	temp_param["CLIENT_REQ_UID"] = Date.now().toString(36) + Math.random().toString(36).substr(2);
			        	 Again stringify and restore it into 'this.request.params' 
			        	this.request.params = JSON.stringify(temp_param);
			        }
			    } catch(e) {
			         Ignore it, as the parameters are Raw String (not a stringified version of object) 
			    }
			}
		}*/
		
		/* Check whether this request needs a mutext lock */
		if (this.mutex[this.context] && Array.isArray(this.mutex[this.context])) {
			
			var mutex_key = (this.request.rtype +"_"+ this.request.task);
			
			if (this.mutex[this.context].includes(mutex_key) && this.contextObj[mutex_key]) {
				if (typeof this.request.params === 'object') {
					/* Generat unique id and pass it along with other parameters */
					this.request.params["CLIENT_REQ_UID"] = this.contextObj[mutex_key];
				} else if (typeof this.request.params === 'string' || this.request.params instanceof String) {
					try {
				        var temp_param = JSON.parse(this.request.params);
				        /* Now inject the request id */
				        if (typeof temp_param === 'object') {
				        	temp_param["CLIENT_REQ_UID"] =  this.contextObj[mutex_key];
				        	/* Again stringify and restore it into 'this.request.params' */
				        	this.request.params = JSON.stringify(temp_param);
				        }
				    } catch(e) {
				        /* Ignore it, as the parameters are Raw String (not a stringified version of object) */
				    }
				}
			}		
			
		}
		
		// Prepare ajax object
		var param = {  
			type       : this.request.rtype,  
			data       : this.request.params,   
			dataType   : this.request.data_type,
			cache 		: this.request.cache,
			contentType: this.request.content_type,			
		    processData: this.request.processDt,
			url        : docker_path + this.request.action,			
			beforeSend : function(xhr) {
				
				if(import_flg_running && me.request.action.indexOf("removeScreenNameFromSession") == -1  ){
                	//showDiaplyAlertMessages("Import Data Process Running not allowed to do any transaction!..", "error");
                	rSuControllerObj.probeUser("Import Data Process Running not allowed to do any transaction!..", "error");
                	xhr.abort();
                	return false;
                }
				
				if(auto_moc_close_running && me.request.action.indexOf("removeScreenNameFromSession") == -1  ){
					//showDiaplyAlertMessages("Import Data Process Running not allowed to do any transaction!..", "error");
                	rSuControllerObj.probeUser("Month Operating Cycle (MOC) Close Process Running not allowed to do any transaction!...", "error");
                	xhr.abort();
                	return false;
                }
				
				if(auto_qtm_export_running && me.request.action.indexOf("removeScreenNameFromSession") == -1  ){
					//showDiaplyAlertMessages("Import Data Process Running not allowed to do any transaction!..", "error");
                	rSuControllerObj.probeUser("Beat Export Process Running not allowed to do any transaction!...", "error");
                	xhr.abort();
                	return false;
                }
				
				/* enable the ajax lock - actually it disable the dock ( prevent from multiple Ajax request at the same time ) */
				me.ajaxFlaQ = false;
				//$( "div.panel .easyui-panel.panel-body.panel-body-noheader" ).parent().addClass( "disabled" );
				if( typeof me.contextObj != "undefined" && me.contextObj != null  ){
					if( typeof me.contextObj.popup != "undefined" && me.contextObj.popup != null ){
						popupName = me.contextObj.popup.meta.name;
						$( "#rsu-popup-"+me.contextObj.popup.meta.name ).css( "pointer-events", "none" );
					}
						
				}
				me.lastRequest = me.request;
				if( messageBuffer.trim() != "Please wait while processing" && me.request.action != "/app/limenUtilController/getLimenAlerts" ) {
					if( me.contextObj ) {
						if( me.contextObj.popup ) {
							if( me.contextObj.popup.meta.type == "pagination" ) {
								if( !rSuControllerObj.isPaginationFilter && !rSuControllerObj.isPaginationPager && !$(".rsu-popup-spinner").is(":visible") ){
									$( "body" ).append( '<div class="rsu-popup-spinner"><span><i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i></span></div>' );
								}
								me.probeUser( "Loading, Please wait...!", "warning" );
							} else {
								if( me.request.rtype == "GET" ) {
									me.probeUser( "Loading, Please wait...!", "warning" );
								} else {
									me.probeUser( "Processing, Please wait...!", "warning" );
								}
							}
						}					 
					} else {
						if( me.request.rtype == "GET" ) {
							me.probeUser( "Loading, Please wait...!", "warning" );
						} else {
							me.probeUser( "Processing, Please wait...!", "warning" );
						}
					}
				}			
							
				/* Show the spinner icon on prober screen, so that user can know there is some processing going on  */
				$( ".rsu-probe-container" ).find( "i" ).attr( "class", "" );
				/* It's odd but removeClass not working */
				$( ".rsu-probe-container" ).find( "i" ).removeClass().addClass( "fa fa-refresh fa-spin" );
				
				xhr.setRequestHeader("clientdatetime",new Date().getTime());
				xhr.setRequestHeader("clientzonediff",new Date().getTimezoneOffset());
			},
			success    : function( data ) {				
				me.response = me.prepareResponse( data );
				/* disable the ajax lock */
				me.ajaxFlaQ = true;
				if( popupName != ""  ){
					//if( typeof me.contextObj.popup != "undefined" && me.contextObj.popup != null )
					$( "#rsu-popup-"+popupName ).css( "pointer-events", "initial" );
					popupName = "";
				}
				$( ".rsu-probe-container" ).find( "i" ).attr( "class", "" );
				/* It's odd but removeClass not working */
				$( ".rsu-probe-container" ).find( "i" ).removeClass().addClass( "fa fa-lightbulb-o" );
								
				if( me.request.task == "ADD-TO-AUDIT" ) {
					try{
	    				var enfStatus = me.response.data['enfSyncFlag'];
		    			enfSyncFlag["status"] = (enfStatus == undefined || isNaN(enfStatus)) ? 0 : parseInt(enfStatus);
		    			enfStatus = me.response.data['enfSyncMessage'];
		    			enfSyncFlag["message"] = (enfStatus == undefined) ? "" : enfStatus;
		    			if(enfSyncFlag["status"] == 1){
		    				finance_MOC = 0;
		    			}
	    			} catch (e) {
						
					}
					if( me.response.data.status == "SUCCESS" ) {
						me.initiateContextObject();
					} else {
						var message = "";
						/* Revert to last context */
						me.context = me.lastContext;	
						me.probeUser( "", "info" );
						/* Let user know the reason for not opening the window */
						if( me.response.data.status == "EXISTS" ) {
							message = "Screen is Already opened by User";
						} else if( me.response.data.status == "OPENED" ) {
							message = "Screens Are Opened... Close it before process.";
						} else if( me.response.data.status == "BLOCKED" ) {
							message = "User doesn't have permission to access. Please contact Admin!..";
						} else if( me.response.data.status == "OPNEDIMP" ) {
							message = "User can't open any other screen as " + me.response.data.message + " Screen is already Opened";
						} else if( me.response.data.status == "LIMITEXCEEDED" ) {
							message = "Maximum no of active tabs are limited to " + me.response.data.message + ". Please close any active tabs to continue.";
						} else if( me.response.data.status == "ERROR" ) {
							message = me.response.data.message;
						} 				
						
						 dlg = $.messager.confirm({title: 'LeverEDGE', msg: message,
					        width : 420,
							buttons:[{
					        	text: 'OK',
					        	onClick: function(){	
					           		dlg.dialog('destroy');
					           		return false;
					        	}
					    	}]
						});
						
					}					
					return;
				}	
				
				if( me.request.task == "REMOVE-FROM-AUDIT" ) {	
					me.probeUser( "", "info" );
					return;
				}
				
				if( me.request.task == "LIMEN-ALERT" ){
					me.probeUser( "", "info" );
					me.handleLimenAlertResponse();
					return;
				}
				
				/* Roll back the notification bar with previous message */
				if( $( "#display-message" ).html().trim() == "Loading, Please wait...!" || $( "#display-message" ).html().trim() == "Processing, Please wait...!" ) {				
					me.probeUser( messageBuffer, messageType );
				}
				/* Handle if it is for Pagination popup */
				if( me.contextObj.popup && me.contextObj.popup.meta.type == "pagination" ) {					
					setTimeout(function(){ 
						$( ".rsu-popup-spinner" ).remove();
						if( !rSuControllerObj.isPaginationFilter && !rSuControllerObj.isPaginationPager ){
							if( rSuControllerObj.paginationCurrentSearchField != "" ){
								rSuControllerObj.paginationCurrentSearchField.trigger( "focus" );
							} else {
								$( "input#inputSrId" ).trigger( "focus" );
							}
						}
					}, 400);
					
					var flaQ = false;
					/* Store this response in page cache - so that the subsequent request will be served from local */
					var data = null;
					if( typeof rSuControllerObj.contextObj.popup.meta.do_cache != "undefined" &&  rSuControllerObj.contextObj.popup.meta.do_cache ){
						data = me.addToPageCache();
					} else {				
						data = me.response.data;
					}
					if( typeof data[0] != "undefined" && typeof data[0][1] != "undefined" ) {
						if( data[0][1] < 1 && !me.isPaginationFilter && !me.isPaginationPager ) {
							flaQ = true;
						}
					} else {
						if( !me.isPaginationFilter && !me.isPaginationPager ) {
							flaQ = true;
						}
					}
					if( data[1][0] == 0 || data[1][0].length < 1 || data[1][0].length == 0 ) {
						
						/**
						 * Conflict with HUL confirm box ( Due to their use of easyUI )
						 * We chose to use their version instead.
						 */
						//$( "#rsu-confirm-box" ).html("Save Changes before Reseting ?");'
						var paginationFlg = true;
						if( $( "#inputSrId_1" ).length != 0 ){
							if(  $( "#inputSrId_1" ).val().length != 0 ){
								paginationFlg = false;
							}
						} 
						if( $( "#inputSrId" ).val().length == 0 && paginationFlg ) {
							var popup_name =  me.contextObj.popup.meta.name;
							
							me.closePopup( true );
							if(popup_name == "vehicle_list" && me.contextObj.popup.meta.name == "billing_main_window"){
								setTimeout(function(){
									rSuControllerObj.probeUser("Please select vehicle","error");
								},300 );
								return;
							}
							if( !$('.messager-window').is(':visible') ){
								dlg = $.messager.confirm({
									title : 'Information',
									msg : 'No records found ...',
									onClose : function(){
										setTimeout(function(){
											if(   typeof me.contextObj.onPaginationClose != 'undefined'){
												me.contextObj.onPaginationClose( popup_name );
											}
										},100 );
										rSuControllerObj.lastActive.focus();
									},
									buttons : [{
										text : 'OK',
										onClick : function() {
											dlg.dialog('destroy');
											setTimeout(function(){
												if(   typeof me.contextObj.onPaginationClose != 'undefined'){
													me.contextObj.onPaginationClose( popup_name );
												}
											},100 );
											rSuControllerObj.lastActive.focus();
										}
									}]
								});
								$(".messager-window .l-btn-small").focus();
								setTimeout(function(){
									$(".messager-window .l-btn-small").focus();
								},50);
							}else{
								$(".messager-window .l-btn-small").focus();
							}
						}
					}				
					/* pagination navigation keys 
					if( !me.isPaginationPager ) {						
						if( $('.rsu-popup-pagination .rsu-grid-table tbody tr td.active' ).length == 0 ){
							$('.rsu-popup-pagination .rsu-grid-table tbody tr:first-child td:first-child').addClass('.active').focus();
						} else{
							$('.rsu-popup-pagination .rsu-grid-table tbody tr td.active').focus();
						}
					}	*/							
					me.contextObj.popup.handlePaginationResponse( data );
					/* Reset the pagination search filter flaq */
					me.isPaginationFilter = false;
					/* Reset the pagination pager filter flaq */
					me.isPaginationPager = false;
					
				} else {
					
					/* Update the mtext lock */					
					var mutex_key = me.request.rtype +"_"+ me.request.task;		
					
					/* Handle normal response - which would be done by respected Context Object */
					me.contextObj.handleResponse();
					
					if (me.mutex[me.context]) {	
						if (me.mutex[me.context].includes(mutex_key)) {
							me.contextObj[mutex_key] = Date.now().toString(36) + Math.random().toString(36).substr(2);
						}						
					}
					
				}							
				//$( "div.panel .easyui-panel.panel-body.panel-body-noheader" ).parent().removeClass( "disabled" );
			},			
			error      : function( jqXHR, textStatus, errorThrown ) {				
				/* disable the ajax lock */
				me.ajaxFlaQ = true;
				if( popupName != ""  ){
					//if( typeof me.contextObj.popup != "undefined" && me.contextObj.popup != null )
					$( "#rsu-popup-"+popupName ).css( "pointer-events", "initial" );
					popupName = "";
				}
				if( me.request.task != "REMOVE-FROM-AUDIT" ) {
					me.probeUser( "", "danger" );
				}
				$( ".rsu-probe-container" ).find( "i" ).attr( "class", "" );
				/* It's odd but removeClass not working */
				$( ".rsu-probe-container" ).find( "i" ).removeClass().addClass( "fa fa-lightbulb-o" );
				$( ".rsu-popup-spinner" ).remove();
				//$( "div.panel .easyui-panel.panel-body.panel-body-noheader" ).parent().removeClass( "disabled" );
			},
			complete   : function() {	
				/* re enable all action buttons */
				//$( "a.rsu-btn" ).removeClass( "disable" );
				if( popupName != ""  ){
					//if( typeof me.contextObj.popup != "undefined" && me.contextObj.popup != null )
					$( "#rsu-popup-"+popupName ).css( "pointer-events", "initial" );
				}
				if( $( "#display-message" ).html().indexOf( "Please wait while" ) != -1 ) {
					me.probeUser( "You can proceed now.!", "success" );
				}	
				if( messageBuffer.trim() == "Loading..., Please wait.!" || messageBuffer.trim() == "Processing..., Please wait.!" ) {				
					me.probeUser( messageBuffer, messageType );
				}
				if( $( "#display-message" ).text().trim() == "Processing, Please wait...!" ){
					if( messageType == "info" ){
						me.probeUser( messageBuffer, messageType );
					}
				}
				me.ispgfilterNw = false;
				//$( "div.panel .easyui-panel.panel-body.panel-body-noheader" ).parent().removeClass( "disabled" );
			}
			
		}
		
	/*	if( typeof rSuControllerObj.contextObj != "undefined" && rSuControllerObj.contextObj != null ){
			if( typeof rSuControllerObj.contextObj.popup != "undefined" &&  rSuControllerObj.contextObj.popup != null ){
				if( rSuControllerObj.contextObj.popup.meta.type == "pagination" && this.lastSearchTxt != "" ){	
					param.data["columnSearchText"] = this.lastSearchTxt;
					param.dataType = "json";
					param.contentType = "application/x-www-form-urlencoded";
					param.processData = true;
					param.cache = false;
					param[ "async" ] = true;
					
				}
			}
		}
		console.log(param);*/
		// Boom.........
		$.ajax( param );	
		

	};
	
	
	
	this.callLimenAjax = function(){
		/*rSuControllerObj.request = rSuControllerObj.prepareRequest( "GET", "/app/limenUtilController/getLimenAlerts", "", "json", "LIMEN-ALERT" );
		rSuControllerObj.dock(); */
		$.ajax({
			type: "GET",
			url: docker_path + "/app/limenUtilController/getLimenAlerts",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.handleLimenAlertResponse(data);
				}
			}
		});
	};
	
	//$( "body" ).append( '<div class="rsu-popup-spinner"><span><i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i></span></div>
	this.addSpinner = function(_element, _full) {
		var html = '',
			pos = _element[0].getBoundingClientRect();
		html = '<div class="ikea-loading-spinner-mask" ';
		
		//if (_full) {
			html += 'style="top: 0px; left: 0px; right: 0px;';
			html += 'height: 100%;">';
		//} else {
		//	html += 'style="top: '+ (pos.top + window.scrollY) +'px; left: '+ (pos.left + window.scrollX) +'px;';
		//	html += 'width: '+ _element.outerWidth() +'px; ';
		//	html += 'height: '+ _element.outerHeight() +'px;">';
		//}	
		html += '<i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>';
		html += '</div>';
		$('body').append($(html));
	};
	
	this.removeSpinner = function(){
		$(".ikea-loading-spinner-mask").remove();
	}
	
	this.handleLimenAlertResponse = function(data){
		var me = this;
		var limenAlertData = data;
		if(limenAlertData != null){
			var alertData = limenAlertData.alerts;
			if(alertData != null && Array.isArray(alertData) && alertData.length > 0){
				var rangeInSeconds = 0;
				rSuControllerObj.limenAlertTime = alertData[0].scheduledTime;
				rSuControllerObj.limenAlertMessage = alertData[0].alertMessage;
				rSuControllerObj.forceSessionClose = alertData[0].forceSessionClose;
				rSuControllerObj.ikeaServerTime = limenAlertData.servertime;
				for(var i=0;i<alertData.length; i++ ){
					if(rSuControllerObj.limenAlertTime>alertData[i].scheduledTime){
						rSuControllerObj.limenAlertMessage = alertData[i].alertMessage;
						rSuControllerObj.limenAlertTime = alertData[i].scheduledTime;
						rSuControllerObj.forceSessionClose = alertData[i].forceSessionClose;
					}
				}
				clearInterval(rSuControllerObj.limenAlertInterval);
				rSuControllerObj.limenAlertInterval = setInterval(rSuControllerObj.showLimenAlert,1000);
			}
		}
	};
	
	
	var me = this;
	this.showLimenAlert = function(){
		var msg = "";
		rSuControllerObj.ikeaServerTime = Number(rSuControllerObj.ikeaServerTime) + 1000;
		var dt = new Date(rSuControllerObj.ikeaServerTime);
		var dt1 = new Date(rSuControllerObj.limenAlertTime);
		//var range = 30*60*1000; // 30 minutes
		if(dt.getTime()<dt1.getTime()){
			var diffSeconds = 0;
			var diffMinutes = 0;
			//validating in server side
			//if(dt1.getTime()-dt.getTime() < range){
			var diffTimeinMillies = parseInt((dt1.getTime()-dt.getTime())/1000);
			diffMinutes = parseInt(diffTimeinMillies/60);
			diffSeconds = parseInt(diffTimeinMillies % 60);
			msg = rSuControllerObj.limenAlertMessage+"<br><h2 style='text-align:center;'>"+diffMinutes+"  mins "+diffSeconds+"  secs</h2>";
			//}
			
			if($('.ikea_alert_message_box').is(":visible")){
				$("#ikea_limen_alert_content").html(msg);
			}else{
				$("#ikea_limen_alert_content").html(msg);
				$( ".ikea_alert_message_box" ).slideDown(800);
			}
			for( var i in opendWindowObjects ){
				 $( opendWindowObjects[i].document  ).find( "#ikea_limen_alert_content" ).html(msg);
				 $( opendWindowObjects[i].document  ).find( ".ikea_alert_message_box" ).slideDown()
			}
		}else{
			clearInterval(rSuControllerObj.limenAlertInterval);
			$( ".ikea_alert_message_box" ).slideUp(800);
			for( var i in opendWindowObjects ){
				$( opendWindowObjects[i].document  ).find( ".ikea_alert_message_box" ).slideUp();
			}
			if(rSuControllerObj.forceSessionClose){
				redirectToLogin();
			}
		}
		
		
		
	}
	
	/**
	 * Return cell's parent, usually the TR ( Handle cell editing input field too )
	 */
	this.getCellParent = function( tdElm ) {
		if( ( tdElm.find( 'input.rsu-grid-cell-editor-box' ).length != 0 ) || tdElm.hasClass("rsu-grid-cell-editor-box") ) {
			return tdElm.parent().parent();
		} else {
			return tdElm.parent();
		}
	};
	
	
	/**
	 * Return cell's Actual Target, usually the TD ( Handle cell editing input field too )
	 */
	this.getCellTarget = function( tdElm ) {
		if( ( tdElm.find( 'input.rsu-grid-cell-editor-box' ).length != 0 ) || tdElm.hasClass("rsu-grid-cell-editor-box") ) {
			return tdElm.parent();
		} else {
			return tdElm;
		}
	};
	
	
	
	/**
	 * Return cell value ( Handle cell editing input field too )
	 */
	this.getCellValue = function( tdElm ) {
		if( tdElm.find( 'input.rsu-grid-cell-editor-box' ).length != 0 ) {
			return tdElm.find( 'input.rsu-grid-cell-editor-box' ).val();
		} else {
			return tdElm.text();
		}
	};
	
	/**
	 * Set cell value ( Handle cell editing input field too )
	 */
	this.setCellValue = function( tdElm, val ) {
		if( tdElm.find( 'input.rsu-grid-cell-editor-box' ).length != 0 ) {
			tdElm.find( 'input.rsu-grid-cell-editor-box' ).val( val );
		} else {
			return tdElm.html( val );
		}
	};
	
	/* Update popup title */
	this.updatePopupTitle = function( title, popup ) {
		if( typeof popup != "undefined" ) {
			this.contextObj.popup.window.find(".rsu-popup-title-bar h3").html( title );
		} else {
			if( this.contextObj.popups[ popup ] ) {
				this.contextObj.popups[ popup ].window.find(".rsu-popup-title-bar h3").html( title );
			}			
		}		
	}

	/**
	 * 
	 * #message : The message that has to be displayed for the user
	 * #type 	: There are four types of message can be displayed : "info", "success", "warning", "error"
	 * 
	 */
	this.probeUser = function( message, type ) {
		
		$( "#display-message" ).attr( "class", "" );
		$( "#display-message" ).addClass( type );
		
		if( message && typeof message != "undefined" && message.indexOf( "undefined" ) == -1 ) {
			$( "#display-message" ).html( message );	
		} else {
			$( "#display-message" ).html( "" );	
		}
		
	};
	
	/* Returns the key code from the event object ( browser compatibility ) */
	this.getKeyCode = function( _e ) {		
		_e = ( _e ) ? _e : window.event;
		return ( _e.which ) ? _e.which : _e.keyCode;		
	};
	
	this.getCurrentDate = function() {
		var today = new Date();
		today.setHours(0,0,0,0);		
		return today;
	};
	
	this.parseDate = function( elem ) {
		var parts = elem.val().split("/");
		return new Date( parseInt( parts[2], 10 ),
				parseInt( parts[1], 10 ) - 1,
		        parseInt( parts[0], 10 )
		);
	};
	
	this.stringyfyDate = function(dateVal){
		var curDate =new Date(dateVal);
		var d = curDate.getDate();
		var m =  curDate.getMonth();
		m += 1;  // JavaScript months are 0-11
		if(m<10){
			m= "0"+m;
		}
		if(d<10){
			d= "0"+d;
		}
		var y = curDate.getFullYear();
		return ( d + "/" + m + "/" + y );
	};
	
	
	/* Check whether the current browser is Google Chrome */
	this.isChrome = function() {		
		var isChromium = window.chrome,
	    winNav = window.navigator,
	    vendorName = winNav.vendor,
	    isOpera = winNav.userAgent.indexOf("OPR") > -1,
	    isIEedge = winNav.userAgent.indexOf("Edge") > -1,
	    isIOSChrome = winNav.userAgent.match("CriOS");
		if(isIOSChrome){
			return true;
		} else if(isChromium !== null && isChromium !== undefined && vendorName === "Google Inc." && isOpera == false && isIEedge == false) {
			return true;
		} else { 
		   	return false; 
		}		
	};
	
	/**
	 * #headerTbl		: header table object
	 * #contentTbl		: content table object
	 * #applyHeader		: whether to apply header width to content or content width to header
	 * #isPkdGrid		: is it Pkd child Grid, that means it might contains some colspan header ( case & quantity )
	 * Used to Sync two tables TD width to same ( Usually sync Header & content table )
	 */
	this.syncTableColumnWidth = function( headerTbl, contentTbl, applyHeader, isPkdGrid, cusHdrWdth ) {
	
		if( typeof headerTbl != "undefined" && typeof contentTbl != "undefined" ) {
			if(typeof cusHdrWdth != "undefined"){
				headerTbl.parent().width( "style",  "width:"+cusHdrWdth+"px !important;" );
			} else{
				headerTbl.parent().width( contentTbl.width() );
			}
			if( ! isPkdGrid ) {
				if( applyHeader ) {
					for( var i = 1; i <= headerTbl.find( "th" ).length; i++ ) {											
						contentTbl.find( 'td:nth-child('+ i +')' ).width( headerTbl.find( 'th:nth-child('+ i +')' ).width() );						
					}
				} else {
					for( var i = 1; i <= contentTbl.find( "td" ).length; i++ ) {											
						headerTbl.find( 'th:nth-child('+ i +')' ).width( contentTbl.find( 'td:nth-child('+ i +')' ).width() );						
					}
				}					
			} else {
				
			}
		}	
		
	}
	
	/**
	 * #th1		: First TH object
	 * #th2		: Second TH object
	 * #title	: Title for that merging column
	/* Used to merge two column ( Case & Quantity ) */
	this.mergeColumn = function( th1, th2, title ) {
		
		var pos = $( th1 ).position();
		var parentContainer = th1.parent().parent().parent().parent();
		var mHeader = $( '<div class="rsu-grid-merged-header">'+ title +'</div>' );		
		var oldHeader = parentContainer.find( "div.rsu-grid-merged-header" );
		
		mHeader.css( "top", pos.top );
		mHeader.css( "left", pos.left );
		
		mHeader.height( parseInt( parentContainer.height() ) / 2 );
		mHeader.width( ( parseInt( th1.outerWidth() ) + parseInt( th2.outerWidth() ) ) + 1 );	
		mHeader.css( "line-height", mHeader.height() + "px" );
		
		/* Reset if it already merged */		
		if( oldHeader.length > 0 ) {
			oldHeader.remove();
			th1.parent().find( "br.rsu-grid-cell-break" ).remove();			
		}		
		/* Inject line breaker */
		th1.html( '<br class="rsu-grid-cell-break" />' + th1.html() );
		th2.html( '<br class="rsu-grid-cell-break" />' + th2.html() );
		th1.css( "vertical-align", "bottom" );
		th2.css( "vertical-align", "bottom" );
		
		/* Inject Header  */	
		parentContainer.append( mHeader );
		
	};
	
	this.mergeColumns = function( headers, title, name ) {
		
		var width = 0;
		var pos = headers[0].position();
		var parentContainer = headers[0].parent().parent().parent().parent();
		var mHeader = $( '<div class="rsu-grid-merged-header '+ name +'">'+ title +'</div>' );		
		var oldHeader = parentContainer.find( "div."+ name );
		
		mHeader.css( "top", pos.top );
		mHeader.css( "left", pos.left );
		
		/* Reset if it already merged */		
		if( oldHeader.length > 0 ) {
			oldHeader.remove();
			for( var i = 0; i < headers.length; i++ ) {
				headers[i].find( "br.rsu-grid-cell-break" ).remove();
			}
		}	
		
		for( var i = 0; i < headers.length; i++ ) {
			width += parseInt( headers[i].outerWidth() ); 
			headers[i].css( "vertical-align", "bottom" );
			headers[i].html( '<br class="rsu-grid-cell-break" />' + headers[i].html() );
		}
		
		mHeader.height( parseInt( parentContainer.height() ) / 2 );
		mHeader.width( width + 1 );	
		mHeader.css( "line-height", mHeader.height() + "px" );
		
		/* Inject Header  */	
		parentContainer.append( mHeader );
		
	};
	
	this.openPrintDialog = function( path ) {		
		path = this.replaceUrlWithDomain(path, docker_path);
		var downloadBtnHtml = "";
		if( (!$( "#rsu-popup-bill_printing" ).is( ":visible" ) && rSuControllerObj.context != null && rSuControllerObj.context != "bill_printing") || ($( "#rsu-popup-bill_printing" ).is( ":visible" ) && this.branchCode !== 6 )){
			downloadBtnHtml = '<a class="preview-btn preview-popup-download" data-path="'+ path +'" target="_blank" onclick="">DOWNLOAD</a>';
		}
		$( "body" ).append( $( '<div class="rsu-popup-ghost-back rsu-popup-ghost-back-sub-popup rsu-popup-print-dialog-ghost-back"><div class="preview-popup-header">'+downloadBtnHtml+'<a class="rsu-print-dialog-close-btn print-preview-class">CLOSE</a></div><object data="'+ path +'#zoom-toolbar=0&toolbar=0" type="application/pdf" width="100%" height="100%" ></object></div>' ) );
	};
	
	this.replaceUrlWithDomain = function(fileFullPath, cntPathName){
		if(fileFullPath != undefined && $.trim(fileFullPath) != ""){
			fileFullPath = $.trim(fileFullPath);
			var cntIndex = fileFullPath.indexOf(cntPathName);
			fileFullPath = fileFullPath.substr(cntIndex, fileFullPath.length);
			fileFullPath = window.location.protocol + "//"  + window.location.host + "" + fileFullPath;
		}
		return fileFullPath;
	}
	/* Perform copy operation */
	this.onCtrlC = function() {
		if ( window.getSelection ) {
	        this.clipBoard = window.getSelection().toString();
	    }	    
	};

	/* Perform close operation ( not CUT ) */
	this.onCtrlX = function() {
		
		if(	! this.ajaxFlaQ ) {				
			e.data.probeUser( "Please wait while processing", "warning" );
			return false;
		}	
		
		if( this.contextObj.popup.meta.type == "pagination" ) {
			this.closePopup( true );
		} else {
			this.closePopup( false );
		}
		
	};
	/* Perform paste operation */
	this.onCtrlV = function() {
		if( this.isGridItem( this.currentElement ) ) {
			if( this.currentElement.attr( "editable" ) == "true" ) {
				this.currentElement.html( this.clipBoard );
			}
		} else {
			if( ! this.currentElement.is( '[readonly]' ) && ! this.currentElement.hasClass( "rsu-readonly-field" ) ) {
				this.currentElement.val( this.clipBoard );
			}			
		}
	};
	
	/* Perform Search Column toggle ( for pagination popup ) */
	this.onCtrlB = function() {	
		if( typeof  this.contextObj != "undefined" && this.contextObj.popup.meta.type == "pagination" && this.contextObj.popup.window.find( "select#selectOnId option").length > 1 ){
			if( this.contextObj.popup.window.find( "select#selectOnId option:selected" ).is( ':last-child' ) ) {
				this.contextObj.popup.window.find( "select#selectOnId option:first-child" ).prop( 'selected', true );
			} else {
				this.contextObj.popup.window.find( "select#selectOnId option:selected" ).next().prop( 'selected', true );		
			}
			var selectval = this.contextObj.popup.window.find( "select#selectOnId option:not(:selected)" ).clone();
			this.contextObj.popup.window.find( "select#selectOnId_1" ).html( selectval );
			this.triggerSearch();
		}
	}
	
	/* Pagination page caching management */
	this.addToPageCache = function(  ) {
		
		var result = [[], []];
		var pageCount = Math.ceil( ( this.response.data[0].length - 1 ) / 200 ); 
		
		if( typeof this.pageCache != 'object' ) {
			this.pageCache = {};
		}
		
		if( typeof this.pageCache[ this.context ] == 'undefined' ) {
			this.pageCache[ this.context ] = {};
		}
		
		this.pageCache[ this.context ][ this.contextObj.popup.meta.name ] = this.response.data;
		
		if( $.isArray( this.response.data ) && $.isArray( this.response.data[0] ) ) {			
			result[0] = this.response.data[0].slice( 0, 200 );
			result[1] = [[pageCount]];
		}
		
		return result;
	}
	
	/**
	 * #param	: _array 	- array to be sorted
	 * #param	: colIndex 	- Column Index to be sorted
	 * 
	 * Perform sorting on given array and column index;
	 */
	this.sortArray = function(_array,colIndex){
		return _array.sort(function(a,b){
			return ( a[colIndex]>b[colIndex]) ? 1: ((b[colIndex]>a[colIndex]) ? -1 : 0);
		});
	};
	
	/**
	 * #param		: searchTxt - search text entered by the user
	 * #param 		: searchOn - column name on which the search has to be performed
	 * #param		: searchType - how the search has to be performed ( Contains, Starts with and Ends with )
	 * #param		: pageNumber - The page number that has to be returned
	 * Perform search operation from local page cache, if the it is already cached */
	this.doLocalPageSearch = function( searchTxt, searchOn, searchType, _record ) {		
		/* Flaq for whether to perform search */
		var flaQ = true,
		/* Holds the meta row - data[0][0] */
		meta = null,
		/* Holds the actual rows - data[0][1] - data[0].length */
		rows = null,
		/* Holds the total number of page searched result count / record per page */
		total = 0,
		/* Used to holds the searchOn column index position */
		colIndex = null,
		/* Used to holds the cached record */
		records = null,
		/* Used to holds the search result records */
		results = [],
		/* The result object which will be returned to popup module
		 * [
		 * 	[0][0] => meta
		 * 	[0][1-n] => records
		 * 	[1] => record count 
		 * ] 
		 * */
		response = [],
		/* records per count */
		recordPerPage = 200;
		
		if( this.pageCache[ this.context ][ this.contextObj.popup.meta.name ] && ! $.isEmptyObject( this.pageCache[ this.context ][ this.contextObj.popup.meta.name ] ) ) {
			/* Records available on the local page cache so perform the search here itself */
			records = typeof _record == "undefined" ? this.pageCache[ this.context ][ this.contextObj.popup.meta.name ] : _record;			
			if( $.isArray( records ) ) {
				if( ! $.isArray( records[0][0] ) ) {
					flaQ = false;
				}			
				meta = records[0][0];
				
				if( ! $.isArray( records[0] ) ) {
					flaQ = false;
				}			
				rows = records[0];				
				if( ! $.isArray( records[0] ) && ! records[1][0] ) {
					flaQ = false;
				}
				total =	records[1][0];
				
				/* Ok everything is cleared, we are good to perform the search */
				if( flaQ ) {
					/* Make sure the search text is not empty */
					if( searchTxt != "" ) {						
						//Perform the search
						colIndex = meta.indexOf( searchOn );
						if( colIndex != -1 ) {
							if( searchType == "2" ) {
								/* Do contain search */						
								for( var i = 1; i < rows.length; i++ ) {
									if( rows[i][colIndex].toLowerCase().indexOf( searchTxt.toLowerCase() ) != -1 ) {
										results.push( rows[i] );
									}
								}						
							} else if( searchType == "1" ) {
								/* Do starts with search */
								for( var i = 1; i < rows.length; i++ ) {
									if( rows[i][colIndex].toLowerCase().startsWith( searchTxt.toLowerCase() ) ) {
										results.push( rows[i] );
									}
								}	
							} else if( searchType == "3" ) {
								/* Do end with search */
								for( var i = 1; i < rows.length; i++ ) {
									if( rows[i][colIndex].toLowerCase().endsWith( searchTxt.toLowerCase() ) ) {
										results.push( rows[i] );
									}
								}	
							} else {
								// Unknown search type
							}
							/* Add the meta row at the beginning of the result */
							results = this.sortArray(results,colIndex);
							results.unshift( meta );
						}
					} else {						
						results = rows;						
					}					
					/*  */
					
					total = Math.ceil( ( results.length - 1 ) / recordPerPage );
					response[0] = results;
					response[1] = [[ total ]];					
					flaQ = response;
				}
			} else {
				/* Invalid records found */
				flaQ = false;
			}			
			
		} else {
			/* Records not found on local page cache, so return false */
			flaQ = false;
		}
		
		/*  */
		
		
		
		return flaQ;
		
	};
	// This function grid item is wditable inject text field
	this.triggerEditable = function( target, e, specialPermissions, error ){
		var isEditable = false;
		var me = this;
			isEditable = ( target.attr( "editable" ) == "true" ) ? true : false;
		if( isEditable && $( target ).prop( "tagName" ) == "TD" ) {	    						
			if( this.behaviour.checkBehaviour( target, e, e.keyCode, false ) || specialPermissions  ) {
				/* Ok here inject a text field inside this grid cell */
				var edit_box = $( '<input type="text" class="rsu-grid-cell-editor-box" value="'+ target[0].textContent +'" />' );	
				if ( error == true && target[0].textContent == "" ){
					edit_box = target.find( "input" );
					edit_box.focus();
					if( edit_box.attr( "data-behaviour" ) == "decimal" ){						
						edit_box[0].setSelectionRange( 0, edit_box.val().length-3 );
					} else{
						edit_box.focus().select();	
					}	
					if( error ){
						me.probeUser( me.probeErrorMsg, "error" );
					}
					return;
				}
				var attrs = target.prop( "attributes" );
				$.each( attrs, function() {							
					if( this.name.indexOf( "data-" ) != -1 || this.name == "maxlength" ) {
						if( this.name == "data-target-type" ) {
							edit_box.attr( this.name, "field" );
						} else {
							edit_box.attr( this.name, this.value );
						}								
					}							
				});					
				edit_box.css( "text-align", target.css( "text-align" ) );
				if( target.is( "td" ) ){
					target.html( edit_box );
				}
				setTimeout(function(){
					edit_box.focus();
					if( edit_box.attr( "data-behaviour" ) == "decimal" ){						
						edit_box[0].setSelectionRange( 0, edit_box.val().length-3 );
					} if( edit_box.attr( "data-behaviour" ) == "date" ){ 
						edit_box[0].setSelectionRange( 0, 1 );		
					} else{
						edit_box.focus().select();	
					}	
					if( error ){
						me.probeUser( me.probeErrorMsg, "error" );
					}
				}, 5);				
				return;						
			}
		}						
	
	};
	
	this.filterPage = function( _results, _pageNumber ){
		var recordPerPage = 200;
		var response = [];
		if( _pageNumber == 1 ) {						
			if( _results[0].length > recordPerPage ) {
				response[0] = _results[0].slice( 0, recordPerPage );
			} else {
				response[0] = _results[0];
			}						
		} else {						
			var last_page_rcount = _results[0].length - ( ( _pageNumber - 1 ) * recordPerPage );						
			if( last_page_rcount <= recordPerPage ) {							
				response[0] = _results[0].slice( ( _pageNumber - 1 ) * recordPerPage );
			} else {
				response[0] = _results[0].slice( ( ( _pageNumber - 1 ) * recordPerPage ), ( ( _pageNumber - 1 ) * recordPerPage ) + recordPerPage );
			}
		}	
		response[1] = [_results[1][0]];
		return response;
	};
	
	// This handler is responsible for rendering Main Menu	
	this.builtMainNavFrame = function(){		
		
		this.menuHolder.append( '<ul id="rsu-main-menu" class="rsu-main-menu-ul"></ul>' );
		// menu_config loaded from /assets/js/configs/rsu-config-navigation.js
		for ( var key in menu_config ) {
		    if ( menu_config.hasOwnProperty( key ) ) {
		    	
		    	var icon_html = "",
		    	item_class = "",
		    	item = menu_config[ key ],		    	
		    	has_dropdown = !$.isEmptyObject( item.submenu );
		    	
		    	if( !item.active ) {
		    		item_class += "disable";
		    	}
		    	if( has_dropdown ) {
		    		icon_html += '&nbsp;&nbsp;<i class="fa fa-caret-down"></i>';
		    	}
		    	
		    	var menu_item = $( '<li></li>' );
		    	menu_item.append( $( '<a href="#" parent="'+ key +'" class="'+ item_class +'">'+ item.title + icon_html +'</a>' ) );
		    	
		    	this.menuHolder.find( "ul.rsu-main-menu-ul" ).append( menu_item );
		    	
		    	if( has_dropdown ) {
		    		this.builtSubMenu( item, menu_item );
		    	}
		    }
		}
		
	};		
	
	// This handler is responsible for rendering Sub Menu	 
	this.builtSubMenu = function( parent_menu_object, parent_menu_item ) {
		
		var item, 
		icon_html = "",
    	item_class = "",		    	
    	has_dropdown = null,
    	submenu_ul = $( '<ul class="submenu"></ul>' );
		
		for ( var key in parent_menu_object.submenu ) {
		    if ( parent_menu_object.submenu.hasOwnProperty( key ) ) {	    	
	    		item = parent_menu_object.submenu[ key ];
		    	icon_html = "";
		    	item_class = "";
		    	has_dropdown = !$.isEmptyObject( item.submenu );	    	
		    	/* Add disable class, if it is not active */
		    	if( !item.active ) {
		    		item_class += "disable";
		    	}
		    	/* Add drop down icon, if this menu item has a drop down */
		    	if( has_dropdown ) {
		    		icon_html += '&nbsp;&nbsp;<i class="fa fa-caret-right"></i>';
		    	}
		    	if( item.action == "" ) {
		    		item.action = "#";
		    	}		    	
		    	/* Built the actual menu item */
		    	var menu_item = $( '<li></li>' );
		    	menu_item.append( $( '<a href="'+ item.action +'" context="'+ key +'" class="'+ item_class +'">'+ item.title + icon_html +'</a>' ) );	    	
		    	submenu_ul.append( menu_item );
		    	/* If separator flag is set then add one */
		    	if( item.separator ) {
		    		submenu_ul.append( $( '<li class="rsu-menu-item-seperator"></li>' ) );
		    	}
		    	/* If it has drop down object, then built one */
		    	if( has_dropdown ) {
		    		this.builtSubMenu( item, menu_item );
		    	}    	    		    	
		    }
		}
		
		parent_menu_item.append( submenu_ul );
		
	};
	//cancel, ok, close buttons dbl click block flag 
	this.closeFlagChanger = function(){
		setTimeout(function(e){
			that.closePopupFlg = true;				
		}, 600);
	};
	//get grid tr index
	this.getGridIndex = function( _target ){
		if( _target.prop( "tagName" ) == "INPUT" ){
			return parseInt( _target.parent().parent().find( "td:first-child" ).attr( "data-tr_index" ) );
		} else if( _target.prop( "tagName" ) == "TD" ) {
			return parseInt( _target.parent().find( "td:first-child" ).attr( "data-tr_index" ) );
		} else{
			return -1;
		}
	};
	//get real index
	this.getGridRealIndex = function( _target ){
		this.setGridFocus( _target, "empty" );
		var containertrs = $( "#rsu-popup-"+ this.contextObj.popup.meta.name +"-grid-area tbody" );
		containertrs.find( "tr td[data-tr_index="+_target+"]" ).focus();
		return parseInt( containertrs.find( "tr td[data-tr_index="+_target+"]" ).parent().index() );	
	};
	

	//set grid focus
	this.setGridFocus = function( _index, _field, _last ){
		var container = $( "#rsu-popup-"+ this.contextObj.popup.meta.name +"-grid-area" );
		container.find( "td.active" ).removeClass( "active" );
		if( this.contextObj.popup.grid.meta.scroller_performance == true ){	
			if(typeof this[ this.contextObj.popup.meta.name ] != "undefined"){
				this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledField = _field;
				this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledIndex = _index;			
				this.lazyRev( "stop", _index );	
			}
		} else {
			var lastIndx = parseInt( container.find( "tr:last-child td:first-child" ).attr( "data-tr_index" ) );
			if( lastIndx < this.contextObj.popup.grid.endIndex ){
				if( lastIndx < _index ){
					for( var i = 0; i < Math.ceil( ( _index - lastIndx ) / 100 ); i++ ){
						this.contextObj.popup.grid.loadNextPage(); 
					}
				}
			}
		}
		if( typeof _last != "undefined" ){
			if( _last == "last" ){
				var last_td = container.find( "tbody td[data-tr_index="+ _index +"]" ).parent().find( "td:visible:last-child" );
				last_td.addClass( "active" ).focus();
			} else {
				var first_td = container.find( "tbody td[data-tr_index="+ _index +"]" ).parent().find( "td:visible:first" ).nextAll( ":visible:first" );
				first_td.addClass( "active" ).focus();
			}
		} else {
			container.find( "tbody td[data-tr_index="+ _index +"]" ).parent().find( "td[data-field="+ _field +"]" ).addClass( "active" ).focus();
		}
	};
	
	this.setGridFocusForPageKeys = function( _index, _field, _last ){
		var container = $( "#rsu-popup-"+ this.contextObj.popup.meta.name +"-grid-area" );
		container.find( "td.active" ).removeClass( "active" );
		if( this.contextObj.popup.grid.meta.scroller_performance == true ){	
			if(typeof this[ this.contextObj.popup.meta.name ] != "undefined"){
				this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledField = _field;
				this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledIndex = _index;			
				this.lazyRev( "stop", _index );	
			}
		} else {
			var lastIndx = parseInt( container.find( "tr:last-child td:first-child" ).attr( "data-tr_index" ) );
			if( lastIndx < this.contextObj.popup.grid.endIndex ){
				if( lastIndx < _index ){
					for( var i = 0; i < Math.ceil( ( _index - lastIndx ) / 100 ); i++ ){
						this.contextObj.popup.grid.loadNextPage(); 
					}
				}
			}
		}
		if( typeof _last != "undefined" ){
			if( _last == "last" ){
				var last_td = container.find( "tbody td[data-tr_index="+ _index +"]" ).parent().find( "td:visible:last-child" );
				last_td.addClass( "active" ).focus();
			} else {
				var first_td = container.find( "tbody td[data-tr_index="+ _index +"]" ).parent().find( "td:visible:first" ).nextAll( ":visible:first" );
				first_td.addClass( "active" ).focus();
			}
		} else {
			container.find( "tbody td[data-tr_index="+ _index +"]" ).parent().find( "td[data-field="+ _field +"]" ).addClass( "active" ).focus();
		}
		container.scrollTop( (_index*18) );
	};
	
	
	this.pageDownUpcall = function( _keycode, current ){
		var grid = $( "#rsu-popup-"+this.contextObj.popup.meta.name+"-grid-area" );
		var curfield = this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledIndex;
		var curentCell = this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledField,
		topoff = grid.scrollTop();
		if ( typeof this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledField == "undefined" ){
			curentCell = grid.find( ".active" ).attr( "data-field" );
			this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledField = curentCell;
		}
		if( _keycode == 33 ){
			curfield = Math.ceil( grid.scrollTop()/18 )-10 > 0 ?  Math.ceil( grid.scrollTop()/18 )-10  : 0;
			if( parseInt( grid.find( ".active" ).parent().find( "td:first-child" ).attr( "data-tr_index" ) ) == curfield ){
				curfield = curfield - 10;
			}
		} else {
			curfield = Math.ceil( grid.scrollTop()/18 )+10;
			var lastInd = parseInt( grid.find( "tr:last-child td:first-child" ).attr( "data-tr_index" ) );
			if( curfield > lastInd ){
				curfield = lastInd;
			}
			if( parseInt( grid.find( ".active" ).parent().find( "td:first-child" ).attr( "data-tr_index" ) ) == curfield ){
				curfield = curfield + 10;
			}
		}	
		if( current != "" ){
			if( !this.contextObj.onSelectNextGrid( "pagekeys", current, current ) ){
				this.moveGridFocus( "pagekeys", current, current );			
				return;
			}
		}
		grid.find( ".active" ).removeClass( "active" );
		this[ this.contextObj.popup.meta.name ].scrollerAct.scrolledIndex = curfield;
		grid.find( "td[data-tr_index="+curfield+"]" ).parent().find( "td[data-field="+curentCell+"]" ).addClass( "active" ).trigger( "focus" );
		/*grid.animate({
			scrollTop: grid.find( "td[data-tr_index="+curfield+"]" ).offset().top - grid.offset().top + grid.scrollTop()
		});
		*/
	};

	//is main grid
	this.isMainGrid = function( _target ){
		return _target.closest( "table" ).parent().is( "#rsu-popup-"+this.contextObj.popup.meta.name+"-grid-area" );	
	};
	//this index wise return tr
	this.returnIndTr = function( _index ){
		return $( "#rsu-popup-"+this.contextObj.popup.meta.name+"-grid-area tbody tr td[data-tr_index="+_index+"]" ).parent();
	}
	
	//grid maintanance for perfamence 
	this.lazyRev = function( dr, _index ){						
			var container   = $( "#rsu-popup-"+ this.contextObj.popup.meta.name +"-grid-area tbody" );
			var start = _index-50, end = _index+50;			
			if( dr == "down" ){
				if( this[ this.contextObj.popup.meta.name ].endIndex == this.contextObj.popup.grid.records.length ){
					return false;
				}
			} else if( dr == "up" ){
				if( this[ this.contextObj.popup.meta.name ].startIndex == 0 ){
					return false;
				}
			}
			if( start < 0 ){
				start = 0;
				end = 100;
			}	
			
			if(this.contextObj.popup.grid.records != null){
				if( this.contextObj.popup.grid.records.length < end ){
					start = this.contextObj.popup.grid.records.length - 100;
					end   = this.contextObj.popup.grid.records.length;
				}
				if( this.contextObj.popup.grid.records.length < 100 && dr == "stop" ){
					return;
				}
				container.parent().css( "top", ( start * 18 )  );	
				container.html( this.contextObj.popup.grid.renderRecords( start, end ) );			
				this.contextObj.onlazyRecordLoaded();
				this[ this.contextObj.popup.meta.name ].startIndex = start;
				this[ this.contextObj.popup.meta.name ].endIndex = end;
				
				for (let i = 0; i < freezerKeys.length; i++) {		
					ikeaFreezers[freezerKeys[i]].on_screen = false;
				}	
				
				rSuControllerObj.ikea_grid_loaded = true;
				
				/* Restore the horizontal scrollbar to the old position */				
				if (this.contextObj.currentHorizontalPos) {					
					setTimeout(function() {											
						/* Reposition */						
						$( "#rsu-popup-"+ rSuControllerObj.contextObj.popup.meta.name +"-grid-area").animate({scrollLeft: rSuControllerObj.contextObj.currentHorizontalPos}, 70);														
					}, 50);								
				}
			}
	};
	
	this.getHotsearchData = function(){
		var param = {};
		$.ajax({
			type: "GET",
			url: docker_path + "/app/billing/transaction_pagination_conf",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.hotSearchCache = data;
				}
			}
		});
	};
	
	this.getBranchCode = function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/billing/getBranchCode",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.branchCode = data;
				}
			}
		});
	};
	// For Shikhar order -Delivery 
	this.getShikharDelivery = function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/deliveryprocess/getShikharDelivery",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.shikharDelivery = data;
				}
			}
		});
	};
	
	// For Shikha-Qtm-Enable -Qauntumimport
	this.getShikharQtmEnable = function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/quantumImport/getShikharQtmEnable",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.shikharQtmEnable = data;
				}
			}
		});
	};
	
	this.getShikharDiscardEnable = function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/quantumImport/getShikharDiscardEnable",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.shikharDiscardEnable = data;
				}
			}
		});
	};
	
	// For Online Payment-Enable - Payment Integration
	this.getOnlinePaymentEnable = function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/collection/getOnlinePaymentEnable",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.onlinePaymentEnable = data;
				}
			}
		});
	};
	
	
	this.getCyberSecurityFlag = function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/ikeaCommonUtilController/getCybersecurityFlag",
			dataType : "json",
			success: function( data ){
				if(data != null){
					if( data == 1 ){
						var loadPageURL = docker_path+"/views/report/security.jsp"; 
						var popupWindow = window.open(loadPageURL, 'Phishing Campaign');
					}
				}
			}
		});
	}
	
	this.getUserId =  function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/billing/getUserId",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.userId = data;
				}
			}
		});
	};
	
	this.isCrossDockLspUsers =  function(){
		$.ajax({
			type: "GET",
			url: docker_path + "/app/billing/isCrossDockLspUsers",
			dataType : "json",
			success: function( data ){
				if(data != null){
					rSuControllerObj.isCrossDockLspUsers = data;
				}
			}
		});
	};
	
	this.showMessage = function( _msg ){
		$( ".ikea-acm-dashboard-messanger" ).show();
		this.listMessage( _msg );
	};
	
	this.listMessage = function( _list ){
		var msgContainer = $( ".ikea-acm-dashboard-messanger ul" );
		for( var i = 0; i < _list.length; i++ ){
			var createMsg	 = '<li class="ikea-acm-msg-in"><div>';
			
			createMsg += _list[i].msg;
			
			createMsg += '<span class="ikea-acm-time-stamp">'+ _list[i].time +'</span>';
			
			createMsg += '<span class="ikea-acm-msg-tail"></span>';
			
			createMsg += '</div></li>';
			
			msgContainer.append( createMsg );
		}
	};
	
	this.marqueeList  = function( _list ){
		var html = '',
			msgContainer = $( ".ikea-acm-info-marquee" );
		msgContainer.html("");
		html = '<marquee scrollamount="3">';
		for( var i = 0; i < _list.length; i++ ){
			html += '<span>'+_list[i].msg+'</span>';
			if (_list.length > 1 && i < _list.length - 1) {
				html += '|';
			}
		}
		html += '</marquee>';
		msgContainer.append($(html));
	};
	
	this.handleMenuClick = function(_item){
		if( $(_item).attr("data-context") == "logtodo" ) {
			$(".middle-content").show();		
			//dashboard hiding process
			$( "#loadPage" ).hide();
			//$( ".middle-content" ).hide();
			/* Make sure Transaction body is opened */
			$( "#rsu-transaction-body-wrapper" ).show();	

			/* Make sure the probe container is visible */
			$("div.rsu-probe-container").show();
			/* Hide the dashboard */
			$("#rsu-dashboard-container").hide();
			$(".ikea-acm-info-marquee").hide();
			
			$("div.widget-holder").html("");
			/**/
			//$("#rsu-dashboard-menu-item").find("span.l-btn-text").html("Dashboard");
			//$("#rsu-dashboard-menu-item").attr("data-context", "dashboard");
			$( "#appLog-table-fixed-header" ).width( $( "#appLog-table" ).width() + "px" );
			$( "#appLog-table-fixed-wrapper" ).width( ( $( '.appLog-table-fixed-header-container' ).width() - 17 ) + "px" );
			return;
		}
		
		if (!rSuControllerObj.contextObj) {
			if(!ikeaDashboardManagerObj){
				initIkeaDashboard();
			}else{
				ikeaDashboardManagerObj.handleMenuClick(_item);
			}
		}else{
			 dlg = $.messager.confirm({
				 	title: 'Confirm',
				 	msg: "To open dashboard, close all open screens",
			        width : 420,
					buttons:[{
			        	text: 'OK',
			        	onClick: function(){	
			           		dlg.dialog('destroy');
			        	}
			    	}]
			});
		}
	};
	
	this.searchMenuItems = function(searchText){
		$(".menu-active").removeClass("menu-active");
		$("#search_menu_item_container").html('');
		var menuItem = [];
		var i = 0;
		$(".menu-text").each(function(ind,val){ 
			if( $(this).text().toLowerCase().indexOf(searchText)>=0){
				//console.log( $(this).parent()[0].outerHTML );
				if( $(this).parent().attr("onclick") != undefined){
					var html = $(this).parent()[0].outerHTML;
					if( i<=10 ){
						if( i==0 ){
							$(this).parent().addClass("menu-active");
							html =  $(this).parent()[0].outerHTML;
							$(this).parent().removeClass("menu-active");
						}
						$("#search_menu_item_container").append(html);
						i++;
					}
					
				}
				
			}
		});
		//$("#search_menu_item_container").css("display","block");
		var srchWpr = $(".rsu-probe-searchmenu");
		$("#search_menu_item_container").attr('style','display:block;top:'+(srchWpr.offset().top+srchWpr.height())+'px;left:'+(srchWpr.offset().left)+'px;');
		$( ".menu-text").find("u").contents().unwrap();
		setTimeout(function(){
			$("#search_menu_item_container").find(".menu-item:eq(0)").addClass("menu-active");
			$( ".menu-text").find("u").contents().unwrap();
		},20);
		
	};
	
};

function initRsuController() {
	if( ! rSuControllerObj ) {
		/* Create the rsunify Controller Object */
		rSuControllerObj = new rsuController();
		/* Kick start it */
		rSuControllerObj.initialize();
		rSuControllerObj.getHotsearchData();
		rSuControllerObj.getBranchCode();
		rSuControllerObj.getShikharDelivery();
		rSuControllerObj.getUserId();
		rSuControllerObj.isCrossDockLspUsers();
		rSuControllerObj.getShikharQtmEnable();
		rSuControllerObj.getOnlinePaymentEnable();
		rSuControllerObj.getCyberSecurityFlag();
		rSuControllerObj.getShikharDiscardEnable();
	}
};


/* Controller object instantiation */
$(document).ready(function(){
	initRsuController();
	
});


$( document ).on( "mousewheel", function(e){
	 if( $( "#rsu-context-menu-box" ).is( ":visible" ) ){
		 e.preventDefault();
		e.stopPropagation();
	 	return false;
	 }
});
/* SCrolling event registration for lazy load pagination */
document.addEventListener(
    'scroll',
    function( event ){    	
        var $elm = $( event.target );  
        var contobj = rSuControllerObj;
        var conObjPop = {};
        if( !contobj.ajaxFlaQ ){
        	event.preventDefault();
        } 
        
        if( rSuControllerObj.context == null ){
        	return;
        }
       
        if( typeof contobj.contextObj != "undefined" && contobj.contextObj != null ){
        	if( contobj.contextObj.popup.meta.type == "pagination" ){
        		return;
        	}
        	conObjPop = contobj.contextObj.popup;
        	var gridRecord = null;
        	if( conObjPop.grid != null ){
        		gridRecord = conObjPop.grid.records;
        	} else {
        		return;
        	}
        }
        
        /* Call column freezer */
        if ($elm.is("#rsu-popup-"+ conObjPop.meta.name +"-grid-area") || $elm.find("div.rsu-popup-content-section").is("#rsu-popup-"+ conObjPop.meta.name +"-grid-area")) {
        	grid_column_freezer(conObjPop);
        }
        
        if( typeof conObjPop.grid.meta.scroller_performance != "undefined" &&  conObjPop.grid.meta.scroller_performance == true &&  ( $elm.is('div.rsu-popup-content-section') || $elm.is('div.rsu-popup-content-wrapper-auto-width') ) && gridRecord != null && gridRecord.length > 100 && conObjPop.meta.type != "pagination" ){
        	if( $elm.is( "#rsu-popup-"+ conObjPop.meta.name +"-grid-area" ) || $elm.find( "div.rsu-popup-content-section" ).is(  "#rsu-popup-"+ conObjPop.meta.name +"-grid-area"  ) ){
        		var pos = $( $elm ).scrollTop();
        		if( pos > contobj[ conObjPop.meta.name ].scroller ){        			
        			if( $( "#rsu-popup-"+ conObjPop.meta.name +"-grid-area tbody tr:last" ).offset().top - 800 < 0 ) {        				
        				contobj.lazyRev( "down",  Math.round( $elm.scrollTop()/18 ) ); 	        			
        			}
        		} else{
        			if( $( "#rsu-popup-"+ conObjPop.meta.name+"-grid-area tbody tr:first" ).offset().top + 300 > 0 ){
        				contobj.lazyRev( "up",  Math.round( $elm.scrollTop()/18 ) ); 
        			}
        		}
        		contobj[ conObjPop.meta.name ].scroller = pos;
        		contobj[ conObjPop.meta.name ].scrollerAct.isScrolled = true;
        	}        	
        } else {
        	if( Math.ceil( $elm.scrollTop() + $elm.innerHeight() ) >= $elm[0].scrollHeight && ( $elm.is('div.rsu-popup-content-section') || $elm.is('div.rsu-popup-content-wrapper-auto-width') ) ) {	        	
        		conObjPop.grid.loadNextPage(); 
	        }  
        } 
    },
    true // Capture event
);

/// simple function to handle full page scroll, when needed.
var scrollrect = function(r1){
    /// update what we know of the page scroll (this affects ClientRects())
    scrollrect.scrollx = window.pageXOffset || document.documentElement.scrollLeft;
    scrollrect.scrolly = window.pageYOffset || document.documentElement.scrollTop;
    /// all because getBoundingClientRect() returns a read-only object (it seems?)
    return {
        left: r1.left + scrollrect.scrollx,
        top: r1.top + scrollrect.scrolly,
        right: r1.right + scrollrect.scrollx,
        bottom: r1.bottom + scrollrect.scrolly,
        width: r1.width,
        height: r1.height
    };
};

/// simple rectangle intersection code, so we can work out what part remains visible
function intersect(r1, r2, bool) {
    if ( bool ) {
      return !(r2.left > r1.right || 
               r2.right < r1.left || 
               r2.top > r1.bottom ||
               r2.bottom < r1.top);
    }
    else {
    	
    	/*var leftOffset = 0;
    	 Add offset left for existing freezer 
    	$("div.ikea-grid-column-freezer").each(function() {
    		leftOffset += $(this).outerWidth();
		});*/
    	
        var r3 = {
            left: Math.max(r1.left, r2.left),
            top: Math.max(r1.top, r2.top),
            right: Math.min(r1.right, r2.right),
            bottom: Math.min(r1.bottom, r2.bottom)
        };
        r3.width = r3.right - r3.left;
        r3.height = r3.bottom - r3.top;
        return r3;
    }
}

/// add in a jQuery pseudo selector :onscreen, which calculates screen presence
/// based on getBoundingClientRect() and the full page scroll.
$.extend(
$.expr[':'],
{
  /// check that an element is actually visible on the screen
  'onscreen': function (el, indx, args) {
    var $el, ov, r1, r2;
    r1 = el.getBoundingClientRect();
    el = el.parentNode;
    $el = $(el);
    /// this should loop back all the way to <body>, ignoring <html>
    do {
        /// handle different states of overflow
        ov = $el.css('overflow') || $el.css('overflow-x') + ':' + $el.css('overflow-y');
        /// special overflow for body
        if ( $el.is('body') ) { ov = 'body'; }
        /// if our parent acts as a rectangular mask, intersect the rects
        switch ( ov ) {
        case 'hidden':
        case 'scroll':
        case 'scroll:hidden':
        case 'hidden:scroll':
            r1 = intersect(r1, el.getBoundingClientRect());
        break;
        case 'body':
            r1 = intersect(r1, scrollrect(el.getBoundingClientRect()));
        break;
        }
        if ( r1.width <= 0 || r1.height <= 0 ) {
            return false;
        }
    } while ((el = el.parentNode) && el.parentNode && ($el[0] = el));
    return true;
  }
}
);

/// this is the elements we are working out the screen visibility of

var ikeaFreezers = {},
	freezerKeys = [],
	freezTarget = null,
	isFreezeOn = true,
	freezerIndex = 0,
	freezerHeight = 0,
	freezerClonerIndex = 0,
	freezerRecordClone = null,
	freezerCloneContainer,
	freezerLeftOffset = 0,
	freezerTimer = null,
	freezerTableHeight = 0,
	freezerRecordCount = 0,
	freezerColumnEvent = false,
	freezerRecordClone = null,
	freezerGridPosTop = 0,
	freezerHeightMaintainer = null,
	freezerPopupContentSection = null,
	freezerPopupContentWrapper =null;

function grid_column_freezer(_popup) { 
	
	var goAhead = false;	
	for (freezerIndex = 0; freezerIndex < freezerKeys.length; freezerIndex++) { 
		ikeaFreezers[freezerKeys[freezerIndex]].on_screen = false;
		ikeaFreezers[freezerKeys[freezerIndex]].target.filter(':onscreen').each(function() {
			ikeaFreezers[freezerKeys[freezerIndex]].on_screen = true;			
			if (ikeaFreezers[freezerKeys[freezerIndex]].freezer) {
				ikeaFreezers[freezerKeys[freezerIndex]].freezer.remove();
				ikeaFreezers[freezerKeys[freezerIndex]].freezer = null;
			}
		});	
		if (!ikeaFreezers[freezerKeys[freezerIndex]].on_screen) {
			goAhead = true;		
		}		
	}
	
	if (goAhead) {
		
		freezerRecordCount = _popup.grid.gridTable.find("tr").length;
		freezerTableHeight = _popup.grid.gridTable[0]['clientHeight'];
		freezerGridPosTop = _popup.grid.gridTable.css("top");
		freezerGridPosTop = parseInt(freezerGridPosTop.substr(0, freezerGridPosTop.length-2)) + 1;
		freezerGridPosTop = isNaN(freezerGridPosTop) ? 1 : freezerGridPosTop;
		
		/* Reset left offset */
		freezerLeftOffset = 0;
		freezerHeightMaintainer = $(".gridMaintainer_block");
		
		freezerHeight = (_popup.window.find('.rsu-popup-content-header-table-wrapper')[0]['clientHeight']) + (freezerPopupContentSection[0]['clientHeight']);
		
		/* Well you have the flaq now, do the needfull */
		for (freezerIndex = 0; freezerIndex < freezerKeys.length; freezerIndex++) {
			/* If freezer column not on grid */
			if (!ikeaFreezers[freezerKeys[freezerIndex]].on_screen) {
				
				
				/* If freezer not displayed */
				if (!ikeaFreezers[freezerKeys[freezerIndex]].freezer || rSuControllerObj.ikea_grid_loaded) {

					/* Store it for short hand purpose */
					freezTarget = ikeaFreezers[freezerKeys[freezerIndex]].target;
					
					/* Freezer column wrapper start */
					freezerCloneContainer = '<div class="ikea-grid-column-freezer" style="position: absolute; top: 3px; left: '+ freezerLeftOffset +'px; height: '+ (freezerHeight - 4) +'px;" data-index="'+ (freezTarget.index() + 1) +'">';
					/* Header section */			
					freezerCloneContainer += '<table class="rsu-grid-table" style="width: auto !important;">';			
					freezerCloneContainer += '<tr>'+ $(freezTarget[0].outerHTML).height(freezTarget.outerHeight()).css("background", freezTarget.css("background")).css("text-align", freezTarget.css("text-align"))[0].outerHTML +'</tr></table>';
						
					/* Record section */ 
					freezerCloneContainer += '<div class="ikea-grid-freezer-records" style="overflow: hidden; height: '+ freezerPopupContentSection[0]['clientHeight'] +'px;"><table class="rsu-grid-table" style="margin-top: '+ freezerGridPosTop +'px;width: '+ freezTarget.outerWidth() +'px !important; height: '+ freezerTableHeight +'px;">';
					for (let i = 0; i < freezerRecordCount; i++) {
						freezerRecordClone = $(_popup.grid.gridTable.find("tr:nth-child("+ (i + 1) +")").find("td:nth-child("+ (freezTarget.index() + 1) +")")[0].outerHTML);					
						freezerCloneContainer += '<tr>'+ freezerRecordClone[0].outerHTML +'</tr>';
					}		
					if (_popup.grid.meta.scroller_performance && freezerHeightMaintainer.length > 0) {
						freezerCloneContainer += '</table>'+ freezerHeightMaintainer[0].outerHTML +'</div></div>';
					} else {
						freezerCloneContainer += '</table></div></div>';
					}
					
					if (ikeaFreezers[freezerKeys[freezerIndex]].freezer) {
						ikeaFreezers[freezerKeys[freezerIndex]].freezer.remove();
					}
					
					ikeaFreezers[freezerKeys[freezerIndex]].freezer = $(freezerCloneContainer);
					freezerPopupContentWrapper.append(ikeaFreezers[freezerKeys[freezerIndex]].freezer);
					
					/* Update the left offset property */					
					freezerLeftOffset += freezTarget.outerWidth();					
				} else {
					/* Update the left offset property */
					freezerLeftOffset += ikeaFreezers[freezerKeys[freezerIndex]].target.outerWidth();
				}
			} else {
				if (ikeaFreezers[freezerKeys[freezerIndex]].freezer) {
					/* Update the left offset property */
					if (freezerLeftOffset > 0) {
						freezerLeftOffset -= ikeaFreezers[freezerKeys[freezerIndex]].freezer.outerWidth();
					}					
					ikeaFreezers[freezerKeys[freezerIndex]].freezer.remove();
					ikeaFreezers[freezerKeys[freezerIndex]].freezer = null;
				}			
			}	
		}	
		
		/* Pass the scrolling event to freezer */
		$(".ikea-grid-freezer-records").each(function() {
			$(this)[0].scrollTop = freezerPopupContentSection[0].scrollTop;			
		});
		/* Set the focus */
		$(".ikea-grid-freezer-records").find("td.active").focus();
		
		rSuControllerObj.ikea_grid_loaded = false;
	}
}

/* Delegate freezer events to the respective associated elements */
$(document).on("click", ".ikea-grid-column-freezer td", function(e) {
	
	var row_pos = $(this).closest("tr").index() + 1;
	var col_pos = $(this).closest("div.ikea-grid-column-freezer").attr("data-index");
	
	/* Clear any existing active selection on the freezer */
	$(".ikea-grid-column-freezer td").removeClass("active");	
	if (typeof rSuControllerObj.contextObj != "undefined" && rSuControllerObj.contextObj != null) {
    	if (rSuControllerObj.contextObj.popup.meta.type == "pagination") {
    		return;
    	}
    	freezerColumnEvent = true;
    	var grid = rSuControllerObj.contextObj.popup.grid.gridTable;    	
    	rSuControllerObj.navigateGrid("click", grid.find("tr:nth-child("+ row_pos +")").find("td:nth-child("+ col_pos +")"), "arbitrary");    	
	}
	e.stopPropagation();
});

/* Delegate freezer events to the respective associated elements */
$(document).on("click", ".ikea-grid-column-freezer td input", function(e) {
	var row_pos = $(this).closest("tr").index() + 1;
	var col_pos = $(this).closest("div.ikea-grid-column-freezer").attr("data-index");
	if (typeof rSuControllerObj.contextObj != "undefined" && rSuControllerObj.contextObj != null) {
    	if (rSuControllerObj.contextObj.popup.meta.type == "pagination") {
    		return;
    	}    	
    	var grid = rSuControllerObj.contextObj.popup.grid.gridTable;    	
    	grid.find("tr:nth-child("+ row_pos +")").find("td:nth-child("+ col_pos +")").find("input").trigger("click");  
    	/* Set the flaq for preventing for grid focus */
    	rSuControllerObj.fromFreezerWidget = true;
	}
});

$(document).on("ikea_grid_loaded", function(e, grid) {
	rSuControllerObj.ikea_grid_loaded = true;
	/* Reset */	
	for (let i = 0; i < freezerKeys.length; i++) {
		ikeaFreezers[freezerKeys[i]].on_screen = false;
	}	
	grid_column_freezer(rSuControllerObj.contextObj.popup);	
});

function trigger_fired_first( e, _elem ){
	var elem = $( _elem );
	if( typeof e.isTrigger != "undefined" ){
		if( elem.attr( "data-task" ) == "restore" ){
			rSuControllerObj.directlyOpenend = true;
		} else {
			rSuControllerObj.directlyOpenend = false;
		}
	} else {
		rSuControllerObj.directlyOpenend = false;
	}
};

/* In order to compatible with HUL master module, we need this dirty event injector */
function trigger_transaction( elem ) {
	//$( ".menu-active" ).removeClass("menu-active");
	// Check if menu item cliked
	rSuControllerObj.currentClicked = true;	
	/* Make sure controller object initialized */
	initRsuController();
	/* Now let the controller handle the menu click event */
	rSuControllerObj.handle_nav_item_click( $( elem ) );
}