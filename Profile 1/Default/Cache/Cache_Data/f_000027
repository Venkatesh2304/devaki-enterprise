 
(function($) {
         $.fn.getCursorPosition = function() {
             var input = this.get(0);
             if (!input) return; // No (input) element found
         if ('selectionStart' in input) {
             // Standard-compliant browsers
             return input.selectionStart;
         } else if (document.selection) {
             // IE
             input.focus();
             var sel = document.selection.createRange();
             var selLen = document.selection.createRange().text.length;
             sel.moveStart('character', -input.value.length);
             return sel.text.length - selLen;
         }
     };
    
     $.fn.selectRange = function(start, end) {
         if(end === undefined) {
             end = start;
         }
         return this.each(function() {
             if('selectionStart' in this) {
                 this.selectionStart = start;
                 this.selectionEnd = end;
             } else if(this.setSelectionRange) {
                 this.setSelectionRange(start, end);
             } else if(this.createTextRange) {
                 var range = this.createTextRange();
                 range.collapse(true);
                 range.moveEnd('character', end);
                 range.moveStart('character', start);
                 range.select();
             }
         });
     };
    
     $.fn.rList = function(configArray) {
     window.rParamArray = [];
     var formContainerId = $(this).find('div.rList-form-container')[0].id;
     for(var i = 0; i < configArray.length; i++ ) {
           var obj = {};
           var cObj = configArray[i];
           var triggerElement = $(this).find('div.rList-'+(i+1)+'-trigger');
           var targetDivObj = $(this).find('div.rList-'+(i+1)+'-container');
           var search = false;
           var searchTextObj = targetDivObj.find('input:text');
           if(searchTextObj && searchTextObj.length > 0) {
                search= true;
                if(!searchTextObj.hasClass('report-list-search')) {
                    searchTextObj.addClass('report-list-search');
                }
           }
           obj = {
                'idName': triggerElement[0].id,
                'targetDiv': targetDivObj[0].id,
                'hideDiv': formContainerId,
                'defMsg': triggerElement.prev('label').find('input').val(),
                'openFunc': cObj.open,
                'validateFunc': cObj.validate,
                'closeFunc': cObj.close,
                'oParamName': cObj.outName,
                'search': search
               };
               window.rParamArray.push(obj);
         }
         commonUI_rList.call(this);
         };
 
})(jQuery);
 
$(document).ready(function(){
     $("label input, label select").off("focus blur");
 $("label input, label select").on("focus blur",function(event){
      if(event.type === "focus" && !$(this).parent().hasClass("focused")){
          $(this).parent().addClass("focused");
      } else if(event.type === "blur"){
          $(this).parent().removeClass("focused");
          }
      
     });
 
 $( document ).on( "focusout", "label input[data-behaviour=date]", function(event){
	 if($(event.target).val()==''){dateValidErrorFlg=false;}
	 else if( dateValidErrorFlg ){
			event.stopPropagation();
			dateValidErrorlastDateElem.focus();      			
			$( "#display-message" ).text("Enter valid Date");
			$( "#display-message" ).removeClass("txt-black");
		} else {
			$( "#display-message" ).text("");
		}
 });
    
});
/* Used to check given text is valid date or not. (format dd/MM/yyyy) */
function parseDate(value){
     var valArray = value.split("/");
     var day = parseInt(valArray[0]);
     var month = parseInt(valArray[1]);
     var year = parseInt(valArray[2]);
     if(!isNaN(day) && !isNaN(month) && !isNaN(year)){
          if ((day<1 || day>31) || (month<1 || month>12))
              return false;
          else
          {
              var dt = new Date(year, month-1, day);
              if((dt.getDate() !== day) || (dt.getMonth() !== month-1) || (dt.getFullYear() !== year))
                   return false;
          }
          return true;
     } else {
          return false;
     }
}
 
/* Used to Format the dd/MM/yyyy from yyyy-MM-dd hh:mm:ss */
function formatDateToString(dateStr){
     if($.trim(dateStr) != ""){
      var dateArray = dateStr.split(" ")[0].split("-");
      return dateArray[2]+"/"+dateArray[1]+"/"+dateArray[0];
 } else {
      return "";
     }
}
 
/* Used to update the table with given content and applies keynavigator and Fix headers */
function updateTableRows(tblID, tblHTML, applyKeyNac, applyFloatHead, isAppend){
     if(!isAppend)
          $("#"+tblID+" tbody").html(tblHTML);
 else
      $("#"+tblID+" tbody").append(tblHTML);

 if(applyKeyNac === true){
      //$("table#"+tblID+" > tbody td").keynavigator();
      $("table#"+tblID).tableNav();
 }

 if(applyFloatHead === true){
      $("table#"+tblID).floatThead({
          position: 'absolute',
              scrollContainer: true
          });
     }
}
 
/* Used to display easyui alert box */
function showInformationDailogue(message, title, msgType){
     $.messager.alert(title, message, msgType);
}
 
/* Used to remove the content from given id and removes the screen name from active tabs */
function closePopupScreen(screenID, screenName){
     /*$("#"+screenID).empty();
 	clearActiveDivScreen(screenName);*/
	if(window.opener != null && window.opener.updateScreenStatus && typeof(window.opener.updateScreenStatus) === "function") {
		window.opener.updateScreenStatus(screenName);
	}
	window.close();
	//minimizePopupScreen(screenID);
}
 
/* Used to clear the given screen name from active tabs list */
function clearActiveDivScreen(screenName){
     $('#activeDiv').find('div p span').each(function(){
         if($(this).text() === screenName){
               $(this).parent().remove();
         }
     });
}
 
/* Description: Used to hide the given id element */
function minimizePopupScreen(screenID){
     /*showDiaplyAlertMessages("", "info");
 $("#"+screenID).hide();*/
 //window.open("", "MainTab");
 window.opener.updateScreenStatus('');
}
 
/* Description: Used to call ajax with given url, data and when success callback to the given function */
function callAjaxAndLoadInformation(ajaxURL, dataJSON, callback, dataType){
	displayLoadingImage();
     $.ajax({
          type: "POST",
      url: ajaxURL,
      data: dataJSON,
dataType: dataType,
//contentType: "application/json",
      success: function (jsonResponse) {
    	  hideLoadingImage();
          if(callback && typeof(callback) === "function") {
               callback(jsonResponse);  //invoke call back function
              }
          },
          error: function (jsonResponse) {
              hideLoadingImage();
          }
     });
}
/* Description: Used to call ajax with given url, data and when success callback to the given function */
function callAjaxAndLoadInformationFull(ajaxURL, dataJSON, successCallback, errorCallback, dataType, async, type){
     displayLoadingImage_new();
     $.ajax({
          type: type,
          url: ajaxURL,
          data: dataJSON,
    dataType: dataType,
    async: async,
    cache: false,
          success: function (jsonResponse) {
              hideLoadingImage_new();
              if(successCallback && typeof(successCallback) === "function") {
               successCallback(jsonResponse);     //invoke call back function
          }
      },
      error: function (jsonResponse) {
          hideLoadingImage_new();
          if(errorCallback && typeof(errorCallback) === "function") {
               errorCallback(jsonResponse);  //invoke call back function
              }
          }
     });
}

function displayLoadingImage_new(){
	if($("#ajax-loaded-id").length == 0){
		var loadHTML = "<div id='ajax-loaded-id' tabindex='-1'>";
		loadHTML += "<div class='popup-overlay'></div>";
		loadHTML += "<div class='ajax-loader-to-display' style='display: block;'></div>";
		$("body").append(loadHTML);
		// added by jegadish.manoharan to disable click event - when spinner is on
		$("#ajax-loaded-id").css({
		      opacity :1, 
		      filter: 'alpha(opacity=20)',
		      width: '100%',
		      height: '100%', 
		      'z-index': 999999,
		      top:0, 
		      left:0, 
		      position: 'fixed'  
		});
	}
}

function hideLoadingImage_new(){
	if($("#ajax-loaded-id").length > 0){
		$("#ajax-loaded-id").remove();
	}
}

/* Used to display the message in alert box [info, error] */
function showDiaplyAlertMessages(message, msgType){
     $("#display-message").text(message);
 if(msgType === "info"){
      $('#display-message').addClass("txt-black");
      //$(".txt-cont-are").css({"color":"maroon", "text-align":"left"});
 } else {
      $('#display-message').removeClass("txt-black");
      //$(".txt-cont-are").css({"color":"red", "text-align":"right"});
     }
}
 
/* Used to prepare the dummy rows html */
function addDummyRows(rowCount, colCount, curIndex, snoRequired){
     var tblHTML = "";
 if(snoRequired == undefined || snoRequired == null) snoRequired = true;
 for(var rowIndex = curIndex; rowIndex < (rowCount+curIndex); rowIndex++){
      tblHTML += "<tr class='smallNav'>";
      if(snoRequired)
          tblHTML += "<td>"+rowIndex+"</td>";
      else
          tblHTML += "<td>&nbsp;</td>";
      for(var colIndex = 0; colIndex < colCount; colIndex++){
          tblHTML += "<td tabindex=0 class='enable'> </td>"
      }
      tblHTML += "</tr>";
     }
     return tblHTML;
}
 
/* Used to validate the float or double values */
function isFloatValue(event, inputObj, maxLegth){
	maxLegth = (maxLegth == undefined) ? 5 : parseInt(maxLegth); 
	inputObj = $(inputObj);
      var charCode = (event.which) ? event.which : event.keyCode;
      if (charCode != 46 && charCode > 31 && (charCode<48 || charCode>57)) {
          return false;
      } else if(charCode == 13){
	      return false;
      } else {
          //if dot sign entered more than once then don't allow to enter dot sign again. 46 is the code for dot sign
	      //target = (event.target) ? event.target : window.event.srcElement;
	      var val = inputObj.val();
	      var parts = val.split('.');
	      var carPos = getCursorPosition(inputObj);
	      if (parts.length > 1 && charCode == 46){
	           selectInputRange(inputObj, val.indexOf('.')+1);
	          return false;
	      }
	      else if(parts.length == 2 && parts[1].length > 1){
	           if(carPos <= val.indexOf('.')){
	                if(parts[0].length > maxLegth)
	                     return false;
	                else
	                     return true
	           } else if(carPos > val.indexOf('.') && carPos < val.length){
	                val = val.substr(0, carPos) + String.fromCharCode(charCode) + val.substr(carPos + 1);
	                inputObj.val(val);
	                selectInputRange(inputObj, carPos+1);
	           }
	           return false;
	      } else if(parts.length == 1 && carPos > maxLegth && charCode != 46){
	           inputObj.val(val+".");
	      }
	      if(val.length > (maxLegth+3))
	           return false;
	      return true;
    }
}
 
/* Used to parse text to float and remove or add precision */
function parseFloatWithPrecisions(value, precision){
     var floatVal = parseFloat(value);
     return floatVal.toFixed(precision);
}
 
/* Get cursor current position */
function getCursorPosition(inputObj){
     var input = inputObj.get(0);
    if (!input) return; // No (input) element found
if ('selectionStart' in input) {
    // Standard-compliant browsers
    return input.selectionStart;
} else if (document.selection) {
    // IE
    input.focus();
    var sel = document.selection.createRange();
    var selLen = document.selection.createRange().text.length;
    sel.moveStart('character', -input.value.length);
        return sel.text.length - selLen;
    }
}
 
/*Format Date object to string dd/MM/yyyy*/
function formatDateObjToString(date){
     var day = date.getDate();
     var month = date.getMonth() + 1;
     var year = date.getFullYear();
     return ((day >= 10) ? day : ("0"+day)) + "/" + ((month >= 10) ? month : ("0"+month)) + "/" + year;
}

// by default from date as 5 years back to the current date
function defaultFromDate(delim) {
	var date = new Date(new Date().getTime() - (1000 * 60 * 60 * 24 * 365 * 1));
	var day = date.getDate();
	var month = date.getMonth() + 1;
	var year = date.getFullYear();
	return ((day >= 10) ? day : ("0" + day)) + delim + ((month >= 10) ? month : ("0" + month)) + delim + year;
}

/*Format Date object to string yyyy-MM-dd*/
function formatDateObjToStringObj(date){ 
    var day = date.getDate(); 
    var month = date.getMonth() + 1; 
    var year = date.getFullYear(); 
    return  year + "-" + ((month >= 10) ? month : ("0"+month)) + "-" + ((day >= 10) ? day : ("0"+day)); 
}


 
/*Allowed keys for read only field*/
var allowedKeys = {
    "37" : "arrow-left",
"38" : "arrow-up",   
"39" : "arrow-right",   
"40" : "arrow-down",
"9" : "tab",   
"27" : "esc"  
};
 
/* dont allow text fileds to edit drag drop also not allowed */
function applyReadonlyTextFields(screenID){
     $("#"+screenID+" input[data-readonly=readonly]").keydown(function(e){
      if (!allowedKeys[e.which] && !(e.ctrlKey && e.which == 67)) {
          e.preventDefault();
      }
 });

 $("#"+screenID+" input").on('drop', function() {
         return false;
     });
}
 
/*dont allow text filed  to edit onkeyup*/
function allowDataReadOnlyKeyDown(keyCode, e){
     if (!allowedKeys[keyCode]) {
          e.preventDefault();
     }
}
 
 
/*apply readonly on specific filed*/
function applyReadOnlyToInputFiled(inputID){
     $("#"+inputID).keydown(function(e){
      if (!allowedKeys[e.which]) {
          e.preventDefault();
      }
 });

 $("#"+inputID).on('drop', function() {
         return false;
     });
}
 
/*remove readonly on specific filed*/
function removeReadOnlyForInputFiled(inputID){
     $("#"+inputID).off("keydown");
}
 
/*format/parse float value*/
function roundFloatValue(value, fixedPoints){
     return parseFloat(value).toFixed(fixedPoints);
}
 
 
// populdate table with data of type AraryList<ArrayList<String>>
function commonUtil_populateTableWithData(tableId, data, clearFlag, hiddenColumns, rightAlignColumns){
     if(clearFlag) {
          $('#'+tableId+' tbody').html('');
 }



 var forClusterTableEmptyRow = false;
 var forClusterTablePreClusterId = 'NEW';
 if(tableId == 'hulBundleTRP-clusterTable') {
          forClusterTableEmptyRow = true;
     }
 
    
     var rowCount = $('#'+tableId+' tbody tr').length;
 $.each(data, function(rowIdx, rowData) {
 rowCount++;

 if(forClusterTableEmptyRow) {
      if(rowIdx == 0) {
          forClusterTablePreClusterId = rowData[0];
      }
      else {
          if(rowData[0] != forClusterTablePreClusterId) {
               $('#'+tableId+' tbody').append('<tr><td style="text-align: right;">'+rowCount+'</td><td tabindex="-1" class="enable"></td><td tabindex="-1" class="enable"></td><td tabindex="-1" class="enable"></td><td tabindex="-1" class="enable"></td><td tabindex="-1" class="enable"></td><td tabindex="-1" class="enable"></td><td tabindex="-1" class="enable"></td></tr>');
               rowCount++;
          }
          forClusterTablePreClusterId = rowData[0];
      }
 }

 var row = '<tr><td style="text-align: right;">'+rowCount+'</td>';
      $.each(rowData, function(cellIdx, cellData) {
          if($.inArray(cellIdx, hiddenColumns) == -1) {
               if($.inArray(cellIdx, rightAlignColumns) == -1) {
                    row = row + '<td tabindex="-1" class="enable"><div contenteditable="true">'+cellData+'</div></td>';
               }
               else {
                    row = row + '<td tabindex="-1" class="enable" style="text-align: right;"><div contenteditable="true">'+cellData+'</div></td>';
               }
          }else {
               row = row + '<td style="display:none;">'+cellData+'</td>';
          }
      });
      row = row + '</tr>';
      $('#'+tableId+' tbody').append(row);
     });
}
 
// adding empty rows to table
function commonUtil_createEmptyRow(tableId, noOfColumn, minRowSize, clearTable) {
     var tableObj = $('#'+tableId+' tbody');
 if(clearTable == true) {
      tableObj.empty();
 }
 var currentRowSize = tableObj.find('tr').length;
 if(currentRowSize < minRowSize) {
      var emptyCell = '';
     
      for(var i = 0; i < (noOfColumn-1); i++) {
          emptyCell = emptyCell + '<td tabindex="-1" class="enable"></td>';
      }
     
      for(;currentRowSize < minRowSize;currentRowSize++){
          tableObj.append('<tr><td style="text-align: right;">'+(currentRowSize+1)+'</td>'+emptyCell+'</tr>');
          }   
     }
}
 
/*confirmation box yes, no, cancel common function and Keys*/
function applyMessengerKeyEvents(screenName){
     $(document).on("keydown", ".messager-window", function(event){
      var key = event.keyCode || event.which;
      var curFocusEle = $(".dialog-button .l-btn:focus");
      if(key == 40 || key == 39){ //Down & Right Arrows
          if(curFocusEle.is($(".dialog-button .l-btn:last"))){
               $(".dialog-button .l-btn:first").focus();
          } else
               curFocusEle.next().focus();
      } else if(key == 38 || key == 37){ //Up & Left Arrows
          if(curFocusEle.is($(".dialog-button .l-btn:first"))){
               $(".dialog-button .l-btn:last").focus();
          } else
               curFocusEle.prev().focus();
      } else if(key == 32 || key == 13){
           if(curFocusEle != undefined && curFocusEle.length > 0){
              curFocusEle.trigger("click");
              preventEventDefaults(event);
           }
      }
 });

 window.onunload = function (E) {
    if(screenName != undefined && $.trim(screenName) != ""){
    	if(window.opener != null && window.opener.updateScreenStatus && typeof(window.opener.updateScreenStatus) === "function") {
    		window.opener.updateScreenStatus(screenName, 0);
    	}  
        }
 };
}
 
$(function(){
     //Message Confirmation box key events..
 $(document).keydown(function(e){
      var event = e || window.event;
      var key = event.keyCode || event.which;
      if(key == 89) {     //Y
          var yesObj = $('.messager-window').find('.l-btn:eq(0)');
          if(yesObj.length > 0) {
               yesObj.trigger('click');
               return false;
          }
      } else if(key == 78) {
          var noObj = $('.messager-window').find('.l-btn:eq(1)');
          if(noObj.length > 0) {
               noObj.trigger('click');
               return false;
          }
      }  else if(key == 67) {
          var cancelObj = $('.messager-window').find('.l-btn:eq(2)');
          if(cancelObj.length > 0) {
               cancelObj.trigger('click');
                   return false;
              }
          }
     });
});
    
 
function popupCloseEnter(id){
     var e = $.Event("keydown.tablenav"), moveNext = true;
e.keyCode = 13, e.which = 13;
$('#'+id+' > tbody td.active').trigger(e, moveNext);
}
 
function isNumberPressed(evt, maxLength){
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (charCode > 31 && (charCode<48 || charCode>57))
        return false;
    evt = evt || window.event;
    target = (evt.target) ? evt.target : window.event.srcElement;
    var targetValue = (target.value) ? target.value : target.textContent;
    if(targetValue != undefined && targetValue.length >= maxLength){
    return false;
    }
    return true;
}
 
function selectInputRange(ele, start, end) {
    if(end === undefined) {
        end = start;
    }
    return ele.each(function() {
        if('selectionStart' in this) {
        this.selectionStart = start;
        this.selectionEnd = end;
    } else if(this.setSelectionRange) {
        this.setSelectionRange(start, end);
    } else if(this.createTextRange) {
        var range = this.createTextRange();
        range.collapse(true);
        range.moveEnd('character', end);
        range.moveStart('character', start);
            range.select();
        }
    });
};
/* Read input value or td value */
function getRowColumnValue(rowObj, inputNumber, tdNumber){
     var finObj;
     if(inputNumber >= 0){
          finObj = rowObj.find("input:eq("+inputNumber+")");
      return (finObj.length == 1) ? finObj.val() : "";
 } else {
      finObj = rowObj.find("td:eq("+tdNumber+")");
      return (finObj.length == 1) ? finObj.text() : "";
     }
}
 
function converPopupRowIntoArray(rowObj){
     var rowArray = [];
     if(rowObj != undefined){
          rowObj.find("input").each(function(){
          rowArray.push($(this).val());
      });
      rowObj.find("td:not(:eq(0))").each(function(){
              rowArray.push($(this).text());
          });
     }
     return rowArray;
}
 
function applyFloatTHeadTable(tableID){
     //$('#'+tableID).floatThead('destroy');
 $('#'+tableID).floatThead({
      position: 'absolute',
        scrollContainer: true,
        autoReflow: true,
        copyTableClass: true,
          enableAria: true
    });
}
 
function validateStringValue(strValue){
     if(strValue == undefined || $.trim(strValue).length <= 0){
          return false;
     } else {
          return true;
     }
}
 
function displayLoadingImage(){
	  var currentFocus = $(':focus');
	  /*if(currentFocus.length > 0) {
		  $(':focus').blur();
	  }*/
   if($("#ajax-loaded-id").length == 0){
    var loadHTML = "<div id='ajax-loaded-id' tabindex='-1'>";
    loadHTML += "<div class='popup-overlay'></div>";
    loadHTML += "<div class='ajax-loader-to-display' style='display: block;'></div>";
    $("body").append(loadHTML);
    // added by jegadish.manoharan to disable click event - when spinner is on
    $("#ajax-loaded-id").css({
		      opacity :1, 
		      filter: 'alpha(opacity=20)',
		      width: '100%',
		      height: '100%', 
		      'z-index': 999999,
		      top:0, 
		      left:0, 
		      position: 'fixed'  
    });
    
  
    if(currentFocus.length > 0) {
  	  window.ajax_loaded_focusElement = currentFocus;
    } else {
  	  window.ajax_loaded_focusElement = '';
    }
    window.ajax_loaded_hide_trigger = false;
    
    $("#ajax-loaded-id").focus();
    
    $("#ajax-loaded-id").bind("keydown", function (event) {
  	event.stopPropagation();
	    event.preventDefault();
	    return false;
	});
    
    $("#ajax-loaded-id").bind("focusout", function (event) {
    	if($("#ajax-loaded-id").is(':visible') && window.ajax_loaded_hide_trigger !== true) {
    		event.stopPropagation();
    		event.preventDefault();
    		$("#ajax-loaded-id").focus();
    		return false;
    	}
	});
    
} else {
		 if(currentFocus.length > 0) {
	   	  	window.ajax_loaded_focusElement = currentFocus;
	     } else {
	   	  	window.ajax_loaded_focusElement = '';
	     }
	window.ajax_loaded_hide_trigger = false;
    $("#ajax-loaded-id").show().focus();
}
}
 
function hideLoadingImage(){
	window.ajax_loaded_hide_trigger = true;
	setTimeout(function() {
		    if($("#ajax-loaded-id").length > 0){
		     $("#ajax-loaded-id").remove();
		    }
		    if(!$('.messager-window').is(':visible') && window.ajax_loaded_focusElement.length > 0) {
		   	 window.ajax_loaded_focusElement.focus();
		   	 window.ajax_loaded_focusElement = '';
		    }
	}, 100);
}
 

function commonUI_inputDisableEntry(e) {
     var theEvent = e || window.event;
     var key = theEvent.keyCode || theEvent.which;
     var charCode = theEvent.charCode;
     var ctrlDown = theEvent.ctrlKey||theEvent.metaKey;
     if((charCode == 0 && $.inArray(key, [27, 13, 9, 37, 38, 39, 40]) >= 0) || (ctrlDown && key != 46))
    {
        return true;
    }
    
     return false;
}
 
function cui_trimString(str) {
     return $.trim(str);
}
 
function cui_disableButton(buttonElement) {
     $(buttonElement).attr('disabled', true).css('color', 'lightgray');
}
 
function cui_enableButton(buttonElement) {
     $(buttonElement).attr('disabled', false).css('color', 'black');
}
 
function cui_disableLink(element) {
     $(element).addClass('disabled');
}
 
function cui_enableLink(element) {
     $(element).removeClass('disabled');
}
 
 
function hideContextMenu(){
     $(".vs-context-menu").hide();
}
 
function preventEventDefaults(evt){
     evt.preventDefault();
     evt.stopPropagation();
}
 
function isPopupOrDailougeExists(){
     if($('#open-pop-up-box').is(':visible') || $(".messager-window").is(":visible")){
          return true;
     } else
          return false;
}
 
// for report filter list
 function commonUI_rList() {
      var targetElementList = [];
      var hideElementList = [];
      var activeReportListDiv = null;
      var parentOutputObj = window.outputObj;
      var getAjaxData = function(isProcedure, viewName, orderBy, whereCnd, urlParams) {
          var jsonParam =  {
                    "viewName" : typeof viewName === 'string' ? viewName : viewName.call(this)
                    };
          var url = this.preUrl;
          if(isProcedure) {
               url = url + '/getReportScreenDatawithprocedure';
               url = url + '?jasonParam=' +JSON.stringify(jsonParam);
               rl = url + '&procedure=' +viewName;
          } else {
               url = url + '/getReportScreenData';
               url = url + '?jasonParam=' +JSON.stringify(jsonParam);
          }
          var jsonWhereObj = {};
          if(whereCnd != null) {
              var whereObj = (typeof whereCnd === 'string' ? whereCnd : whereCnd.call(this))
              if(!jQuery.isEmptyObject(whereObj)) {
                      //url = url + '&jsonObjWhereClause='+JSON.stringify(whereObj);
              jsonWhereObj = {'jsonObjWhereClause':JSON.stringify(whereObj)}; 
              }
          }            
         
          if(urlParams != null) {
               url = url + (typeof urlParams === 'string' ? urlParams : urlParams.call(this));
          }
         
         
      /*   if(orderBy != null &&  orderBy.length > 0) {
               var orderByValue = (typeof orderBy === 'string' ? orderBy : orderBy.call(this))
                   if(!jQuery.isEmptyObject(orderByValue)) {
                           url = url + '&orderBy='+orderByValue;
                   }
          }*/
         
            if(orderBy != null &&  orderBy != '') {
                 var orderByValue = (typeof orderBy === 'string' ? orderBy : orderBy.call(this))
                    if(!jQuery.isEmptyObject(orderByValue)) {
                            url = url + '&orderBy='+orderByValue;
                        }
                }
           
           
            return $.ajax({
                   url: url,
                   method: 'POST',
               data: jsonWhereObj,
               cache: false,
               async: false,
          });
      };
     
      var getAjaxDataUrl = function(mList) {
          return $.ajax({
               url: mList['url'],
               method: 'POST',
               data: mList['urlData'],
               cache: false,
               async: false
          });
      };
     
      var parseOpenFunction = function(mList) {
          var obj = mList['openFunc'].call(null);
          mList['url'] = obj.url;
          mList['urlData'] = obj.urlData;
          mList['selectData'] = obj.selectData;
          if(obj.oParamName != null && obj.oParamName.length > 0){
               mList['oParamName'] = obj.oParamName;
          }
          mList['oParam'] = obj.oParam;
          mList['idIndex'] = obj.idIndex;
          mList['textIndex'] = obj.textIndex;
          mList['isProcedure'] = (obj.isProcedure == null) ? false: true;
          if(obj.data != null && obj.data.length > 0) {
               mList['data'] = obj.data;
          }
          if(obj.oParamType != null && obj.oParamType.length > 0) {
               mList['oParamType'] = obj.oParamType;
          }
          
	          if(obj.selectAll != null && obj.selectAll) {
	               mList.selectAll = obj.selectAll;
	          } else {
	        	  mList.selectAll = false;
	          }
      };

      var serachIdx = {};
      var data2Html = function(data, mList, selectedArray) {
    	  //setSelectedArray
    	  if(mList['selectedFunc'] != null) {
    		  selectedArray =  mList['selectedFunc'].call(mList,selectedArray);
          }
          var idIdx = mList['idIndex'];
          var textIdx = mList['textIndex'];
          var type = mList['oParam'];
          var dataToBeSelected = mList['selectData'];
          var dataToBeSelectedValues = (dataToBeSelected == null) ? [] : (dataToBeSelected != null && dataToBeSelected.constructor === Array) ? dataToBeSelected : dataToBeSelected.call(null);
          var str = '', idx=0, mLength = data.length;
          var counterVal = 1, firstChar;
          var searchObj = {};
          serachIdx = {};
          for(;idx<mLength; idx++) {
               var ele = data[idx];
      //   $.each(data, function(idx, ele) {
               if(idx != 0 || mList['isProcedure'] === true) {
                    mList['totalCount']++;
                    var isSelected = '';
                    var selAll = false;
                    if(mList['selectAll_new'] === true) {
                    	selAll = true;
                    } else {
	                    if(mList.selectAll != null && mList.selectAll != '' ) {
	                    	selAll = (typeof mList.selectAll == 'boolean') ? mList.selectAll : mList.selectAll.call(this);
	                    }
                    }
                    if( selAll === true ){
                         isSelected = 'checked';
                         mList['selectedCount']++;
                    } else {
                         if(dataToBeSelectedValues != null && dataToBeSelectedValues.length > 0) {
                              if ($.inArray(ele[idIdx] ,dataToBeSelectedValues)  > -1) {
                                  isSelected = 'checked';
                                  mList['selectedCount']++;
                              }
                         }
                        
                         if(type == 'text') {
                              if ($.inArray(ele[textIdx] ,selectedArray)  > -1) {
                                  isSelected = 'checked';
                                  mList['selectedCount']++;
                              }
                         } else {
                              if ($.inArray(""+ele[idIdx] ,selectedArray)  > -1) {
                                  isSelected = 'checked';
                                  mList['selectedCount']++;
                              }
                         }
                    }
                    firstChar = ele[textIdx].charAt(0);
                    if(searchObj.hasOwnProperty(firstChar)) {
                    	searchObj[firstChar] = searchObj[firstChar] + 1;
                    }  else {
                    	searchObj[firstChar] = 1;
                    }
                    counterVal = firstChar+"-"+searchObj[firstChar];
                    var tempObj = JSON.stringify(searchObj);
                    serachIdx[idx] = tempObj;
                    if(idIdx == null){
                         str = str + '<div tabindex="-1" class="report-list-div" id="'+counterVal+'"><input class="report-list-chk" type="checkbox"  value="'+ele[textIdx]+'" '+isSelected+'><span class="report-list-span" style="font-weight:bold">'+ele[textIdx]+'</span></div>';
                    } else {
                         str = str + '<div tabindex="-1" class="report-list-div" id="'+counterVal+'"><input class="report-list-chk" id-value="'+ele[idIdx]+'" type="checkbox"  value="'+ele[idIdx]+'" '+isSelected+'><span class="report-list-span" style="font-weight:bold">'+ele[textIdx]+'</span></div>';
                    }
               }
          }
          //});
          if(str.length == 0) {
               str = '<div tabindex="-1" class="report-list-div"></div>';
          }
          return str;
      };
     
      var populateList = function(data, mList, selectedValue) {
          mList['totalCount'] = 0;
          mList['selectedCount'] = 0;
         
          var htmlStr = data2Html(data, mList, selectedValue);
         
          $('#'+mList['targetDiv']).find('.empty-div').html(htmlStr).animate({ scrollTop: 0 }, "fast");
          if(mList['hideDiv'] != null && mList['hideDiv'].length > 0) {
               $('#'+mList['hideDiv']).hide();
          }
         
          var selectAll = $('#'+mList['targetDiv']).find('input.textCheckbox');
         
          if(selectAll.length > 0 && mList['totalCount'] != 0) {
               if(mList['totalCount'] == mList['selectedCount']) {
            	   mList['selectAll_new'] = true;
                   selectAll[0].checked = true;
               } else {
            	   mList['selectAll_new'] = false;
                   selectAll[0].checked = false;
               }
          }
         
          if(mList['totalCount'] == 0) {
        	  showDiaplyAlertMessages("No Records Found", "error");  
          }
          $('#'+mList['targetDiv']).show();
          if( $('#'+mList['targetDiv']+'  .smlbox').length == 0){
        	  $('#'+mList['targetDiv']+' #nameLabel').append('<div style="border: 1px solid cyan;" class="smlbox"><div class="smlboxinside"></div></div>');
          }else{
        	  $('#'+mList['targetDiv']+'  .smlbox').replaceWith('<div style="border: 1px solid cyan;" class="smlbox"><div class="smlboxinside"></div></div>');
          }
          if(mList['search']) {
               $('#'+mList['targetDiv']).find('.report-list-search').val('').focus();
          } else {
               var firstDiv = $('#'+mList['targetDiv']).find('div.report-list-div:eq(0)').focus();
               if(firstDiv.length > 0) {
                    firstDiv.addClass('report-list-active').focus();
                    activeReportListDiv = firstDiv;
               }
          }
      };
     
      var targetClick = function(e) {
          if(activeReportListDiv != null && activeReportListDiv.length > 0) {
               activeReportListDiv.removeClass('report-list-active');
          }
         
          $(this).addClass('report-list-active');
          //lightsteelblue
          activeReportListDiv = $(this);
      };
     
      var activeListEvent = function(e) {
         
         
          var theEvent = e || window.event;
          var key = theEvent.keyCode || theEvent.which;
         
           if(key == 27) {
               var escEvent = $.Event('keydown');
               escEvent.which = 27;
               $(this).parent('div').parentsUntil('div.form-content-area').trigger(escEvent);
               (theEvent.preventDefault) ? theEvent.preventDefault() : theEvent.returnValue = false;
           theEvent.stopPropagation();
               return false;
          }
         
          var currentElement = $(this);
          var elementIdx = $(this).index()+1;
          var currentVal = String.fromCharCode(key).toUpperCase();
          if(/[^\w]/.test(currentVal)){
               return false;
          }
          
         // displayLoadingImage();
          var parentDiv = $(this).parent('div');
          var containEle = '';
         
           /*if(activeReportListDiv != null && activeReportListDiv.length > 0) {
               activeReportListDiv.removeClass('report-list-active');
          }*/
         
           if(currentVal.length == 0 ) {
               hideLoadingImage();
               return false;
          }
         
          
          
          /*var i=elementIdx+1, divLength = parentDiv.find('div.report-list-div').length;
          for( ; i<divLength; i++ ) {
               var span = parentDiv.find( "span.report-list-span:eq("+i+")" );
               if(span.text().toUpperCase().startsWith(currentVal)) {
                   containEle = span.parent('div');
                   break;
               } 
           }
         
           if(containEle.length == 0){
                i=0,divLength=elementIdx;
               for( ; i<divLength; i++ ) {
                   var span = parentDiv.find( "span.report-list-span:eq("+i+")" );
                   if(span.text().toUpperCase().startsWith(currentVal)) {
                       containEle = span.parent('div');
                       break;
                   } 
               }
          }*/
          
           var elementId = currentElement.attr("id");
           var tempArray = elementId.split("-");
           var defaultSearchId = currentVal+"-1";
           var searchId = defaultSearchId;
           if(tempArray[0] == currentVal){
        	   searchId = tempArray[0]+"-"+(parseInt(tempArray[1])+1);
           } else {
        	 //if current index contains the counter value for next element
        	  var tempObj = JSON.parse(serachIdx[elementIdx]);
        	  if(tempObj.hasOwnProperty(currentVal)){
        		  searchId = currentVal+"-"+(parseInt(tempObj[currentVal])+1);
        	  }
           }
           
           if(parentDiv.children("#"+searchId).length > 0){
        	   containEle = parentDiv.children("#"+searchId); 
           } else if(defaultSearchId != searchId && parentDiv.children("#"+defaultSearchId).length > 0){
        	   containEle = parentDiv.children("#"+defaultSearchId);
           }
           
           if(containEle.length > 0){
               if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                    activeReportListDiv.removeClass('report-list-active');
               }
               containEle.addClass('report-list-active').focus();
               var container = containEle.parent('div');
               /*container.scrollTop(
                         containEle.offset().top - container.offset().top + container.scrollTop()
               );*/
               activeReportListDiv = containEle;
          }
         
           //hideLoadingImage();
         
      };
     
      var sKeyEvent = function(e) {
          var theEvent = e || window.event;
          var key = theEvent.keyCode || theEvent.which;
           if(key == 40) {
               var listContainer = $(this).parent('div').next('div');
              
                var activeDiv = listContainer.find('div.report-list-active');
              
               if(activeDiv.length == 0) {
              
                    var firstDiv = listContainer.find('div.report-list-div:eq(0)');
                   
                    if(firstDiv.length > 0) {
                         if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                              activeReportListDiv.removeClass('report-list-active');
                         }
                         firstDiv.addClass('report-list-active').focus();
                        activeReportListDiv = firstDiv;
                    }
               } else {
                    activeDiv.focus();
               }
              
               return false;
          }
           var currentVal = $.trim($(this).val().toUpperCase());
          var parentDiv = $(this).parent('div').next('div');
          var containEle = '';
         
           if(activeReportListDiv != null && activeReportListDiv.length > 0) {
               activeReportListDiv.removeClass('report-list-active');
          }
         
           if(currentVal.length == 0 ) {
               activeReportListDiv = parentDiv.animate({ scrollTop: 0 }, "fast").find('div.report-list-div:eq(0)').addClass('report-list-active');
               return false;
          }
         
           parentDiv.find('span.report-list-span').each(function() {
               var spanTxt = $(this).text().toUpperCase();
               if(spanTxt.startsWith(currentVal)) {
                   containEle = $(this).parent('div');
                   return false;
               } 
           });
     
           if(containEle.length == 0){
              parentDiv.find('span.report-list-span').each(function() {
                   var spanTxt = $(this).text().toUpperCase();
                   if(spanTxt.indexOf(currentVal) > -1) {
                       containEle = $(this).parent('div');
                       return false;
                   } 
               });
          }
         
          
           if(containEle.length > 0){
               if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                    activeReportListDiv.removeClass('report-list-active');
               }
               containEle.addClass('report-list-active');
               var container = containEle.parent('div');
               container.scrollTop(
                         containEle.offset().top - container.offset().top + container.scrollTop()
               );
               activeReportListDiv = containEle;
          }
      };
      
      var clearBelowSelectionPopup = function( currentIdx ) {
          var i= currentIdx+1, maxSize = window.rParamArray.length;
          for( ;i<maxSize; i++) {
               var eList = window.rParamArray[ i ];
               if(eList.nonDependent != undefined && eList.nonDependent == true){
            	   return false;
               }
               eList.totalCount = 0;
               eList.selectedCount = 0;
			   eList.selectAll_new = false;
               var paramName = eList.oParamName;
               selectedValue[paramName] = [];
               parentOutputObj[paramName] = '';
               $('#' + eList.idName).prev('label').find('input').val(eList.defMsg);
          }
      };
     
      var that = this;
     
      var selectedValue = {};
      var afterSelectionEdit = {};
      $.each(window.rParamArray, function(idx, mList) {
    	// fix for page up/down inconsistency - start
    	  var emptyDiv = $( '#'+mList[ 'targetDiv' ] ).find( 'div.empty-div' );
		  if( emptyDiv.hasClass( 'ovrf-auto' ) ) {
					  emptyDiv.removeClass( 'ovrf-auto' );
					  emptyDiv.css( 'overflow-y', 'scroll' );
               }
		 // end
               mList['totalCount'] = 0;
               mList['selectedCount'] = 0;
         
               if(mList['oParamName'] != null && mList['oParamName'] != '') {
                    parentOutputObj[mList['oParamName']] = '';
               }
              
              
               //checkAll checkbox event
               var checkAllEvent = function(e) {
                    var parentDiv = $(this).parent('div').parent('div').next('div');
                    if(this.checked) {
                    	 mList['selectedCount'] = mList['totalCount'];
                      	 mList['selectAll_new'] = true;
                      	 
                         parentDiv.find('.report-list-chk').each(function() {
                              this.checked = true;
                              afterSelectionEdit[ mList.oParamName ] = true;
                         });
                    } else {
                    	 mList['selectedCount'] = 0;
                      	 mList['selectAll_new'] = false;
                      	 
                         parentDiv.find('.report-list-chk').each(function() {
                              this.checked = false;
                              afterSelectionEdit[ mList.oParamName ] = true;
                         });
                    }
               };
              
               // popup checkbox event
               var checkIndvEvent = function(e) {
                    var parentDiv = $(e.target).parent('div').parent('div');
                    if(this.checked) {
                         mList['selectedCount']++;
                    } else {
                         (mList['selectedCount'] > 0) ? mList['selectedCount']-- : 0;
                    }
                    afterSelectionEdit[ mList.oParamName ] = true;
                    var totalChk = mList['totalCount'];
                    var chkCnt = mList['selectedCount'];
                    var selectAll = parentDiv.prev('div').find('input.textCheckbox');
                   
                    if(selectAll.length > 0) {
                         if(totalChk == chkCnt) {
                              selectAll[0].checked = true;
                           	  mList['selectAll_new'] = true;
                         } else {
                              selectAll[0].checked = false;
                           	  mList['selectAll_new'] = false;
                         }
               }
                   
               };
              
               //popup navigation & enter
               var tKeyEvent = function(e) {
                    var theEvent = e || window.event;
                   var key = theEvent.keyCode || theEvent.which;
                   var rEvent = false;
                   if(key == 40) {
                        var nxt = $(this).next('div.report-list-div');
                        if(nxt.length > 0) {
                            if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                                   activeReportListDiv.removeClass('report-list-active');
                              }
                            nxt.addClass('report-list-active').focus();
                            activeReportListDiv = nxt;
                            rEvent = true;
                        }
                   } else if(key == 38) {
                        var pre = $(this).prev('div.report-list-div');
                        if(pre.length > 0) {
                            if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                                   activeReportListDiv.removeClass('report-list-active');
                              }
                            pre.addClass('report-list-active').focus();
                            activeReportListDiv = pre;
                            rEvent = true;
                        } else {
                            var searchElement = $(this).parent('div').prev('div').find('input.report-list-search');
                            if(searchElement.length > 0 ){
                                 searchElement.focus();
                                 rEvent = true;
                            }
                        }
                   } else if(key == 32) {
                            if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                                 if(activeReportListDiv.find('input')[0].checked) {
                                           activeReportListDiv.find('input')[0].checked = false;
                                           (mList['selectedCount'] > 0) ? mList['selectedCount']-- : 0;
                                 } else {
                                           activeReportListDiv.find('input')[0].checked = true;
                                           mList['selectedCount']++;
                                 }
                                
                                  afterSelectionEdit[ mList.oParamName ] = true;
                                 var parentDiv = $(e.target).parent('div');
                                 var totalChk = mList['totalCount'];
                                  var chkCnt = mList['selectedCount'];
                                
                                       var selectAll = parentDiv.prev('div').find('input.textCheckbox');
                                 if(selectAll.length > 0) {
                                      if(totalChk == chkCnt) {
                                           selectAll[0].checked = true;
                                           mList['selectAll_new'] = true;
                                      } else {
                                           selectAll[0].checked = false;
                                           mList['selectAll_new'] = false;
                                      }
                            }
                                
                                  rEvent = true;
                              }
                        }else if(key == 33) {
                            if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                            	
                          	  var container = $(this).parent('div');
  	                          var containerHeight = container.position().top;
  	                          var currEle = $(this);
  	                          
  	                        activeReportListDiv.removeClass('report-list-active');
	                            container.scrollTop(
	                            		currEle.offset().top - container.offset().top + container.scrollTop() - container.height() + currEle.height()
		                            );
	                            // avoiding while loop, assumed maximium 1000 record will be present in report list..
	   	                           for(var i = 0; i < 1000; i++) {
	   	                            	var nextEle = currEle.prev('div.report-list-div');
	   	                            	if(nextEle.length > 0) {
	   	                            		var elementHeight = nextEle.position().top;
	   	                            		console.log(elementHeight + 'elementHeight');
	   	                            		if (elementHeight <= containerHeight) {
	   	                            			break;
	   	                            		}
	   	                            		currEle = nextEle;
	   	                            	} else{
	   	                            		break;
	   	                            	}
	   	                            }
	                            
	   	                        currEle.addClass('report-list-active').focus();
	                            activeReportListDiv = currEle;
                              rEvent = true;
                           }
                     }else if(key == 34) {
                         if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                             var container = $(this).parent('div'),
                             scrollTo = $(this);
	                            container.scrollTop(
	                                scrollTo.offset().top - container.offset().top + container.scrollTop()
	                            );
	                            
	                            scrollTo.removeClass('report-list-active');

	                            var containerHeight = container.position().top + container.height();
	                            var currEle = $(this);
	                            console.log('con ' + containerHeight);
	                            // avoiding while loop, assumed maximium 1000 record will be present in report list..
	                            for(var i = 0; i < 1000; i++) {
	                            	var nextEle = currEle.next('div.report-list-div');
	                            	if(nextEle.length > 0) {
	                            		var elementHeight = nextEle.position().top + nextEle.height();
	                            		console.log(elementHeight + 'elementHeight');
	                            		if (elementHeight > containerHeight) {
	                            			break;
	                            		}
	                            		currEle = nextEle;
	                            	} else{
	                            		break;
	                            	}
	                            }
	                            
	                            currEle.addClass('report-list-active').focus();
	                            activeReportListDiv = currEle;
                              rEvent = true;
                          }
                    }else if(key == 9){
                    	if( typeof tabEventOnListSelection != undefined && typeof tabEventOnListSelection == "function" ){
                    		theEvent.preventDefault();
                    		theEvent.stopPropagation();
                    		tabEventOnListSelection(e);
                    		if( typeof global_keydown_blocker_for_list_popup != "undefined" ){
                    			global_keydown_blocker_for_list_popup = true;
                    		} 
                    		//return false;
                    	}
                    }
                  
                   
                    if(rEvent) {
                        (theEvent.preventDefault) ? theEvent.preventDefault() : theEvent.returnValue = false;
                    theEvent.stopPropagation();
                         return false;
                   }
               };
              
              
               //Open selection popup - click or spacebar
               var clickEvent = function(e){
                    var theEvent = e || window.event;
                    if(theEvent.type =='click' || (theEvent.type =='keydown' && (theEvent.which == 13 || theEvent.which == 32))) {
                         if(mList['validateFunc']!= null && !mList['validateFunc'].call(this)) {
                              return false;
                         }
                         var paramName = mList['oParamName'];
                         if(mList['data'] != null ) {
                              populateList(mList['data'], mList, selectedValue[paramName]);
                         } else if(mList['openFunc'] != null && mList['openFunc'] != '') {
                              parseOpenFunction(mList);
                              if(mList['data'] != null && mList['data'].length > 0) {
                                  populateList(mList['data'], mList, selectedValue[paramName]);
                              } else {
                              getAjaxDataUrl(mList).done(function(data) {
                                  if(mList['isProcedure'] === true) {
                                            populateList(data, mList, selectedValue[paramName]);
                                  } else {
                                            populateList(data[0], mList, selectedValue[paramName]);
                                  }
                         });
                    }
                    }else {
                    	//showDiaplyAlertMessages("Processing ..... Please wait !", "info");
	                    $( "body" ).append( '<div class="rsu-popup-spinner"><span><i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i></span></div>' );
	                      setTimeout(function(){
	                    		getAjaxData(mList['isProcedure'], mList['viewName'], mList['orderBy'], mList['whereCond']).done(function(data) {
	                          	 $(".rsu-popup-spinner").remove();
	                          	 populateList(data[0], mList, selectedValue[paramName]);
	                       });
	                      },300);       
                      
                         }
                        
                         afterSelectionEdit[ paramName ] = false;
                    }
               };
              
               // enter/space to open selection popup
               var inputkeyEvent = function(e){
                    var theEvent = e || window.event;
                    var key = theEvent.keyCode || theEvent.which;
                    var charCode = theEvent.charCode;
                    var ctrlDown = theEvent.ctrlKey||theEvent.metaKey;
                    if((charCode == 0 && $.inArray(key, [37, 38, 39, 40, 27, 9]) >= 0) || (ctrlDown && $.inArray(key, [65, 67, 69, 70, 71, 77, 79]) >= 0))
                   {
                       return true;
                   }
                  
                    if(key == 13 || key == 32) {
                         clickEvent(e);
                    }
                    
                    (theEvent.preventDefault) ? theEvent.preventDefault() : theEvent.returnValue = false;
                theEvent.stopPropagation();
                    return false;
               };
               
               // clear single filter based on index
               var singleClearFunction = function(e, params) {
            	   var idx = params.index;
            	   if(!isNaN(idx)) {
	            	   var filterConfig = window.rParamArray[idx];
	            	   filterConfig.totalCount = 0;
	            	   filterConfig.selectedCount = 0
	            	   filterConfig.selectAll_new = false;
	                   parentOutputObj[filterConfig.oParamName] = '';
	                   selectedValue[filterConfig.oParamName] = [];
	                       $('#'+filterConfig['idName']).prev('label').find('input').val(filterConfig['defMsg']);
	                       $('#'+filterConfig['targetDiv']).find('input.report-list-search').val('');
            	   }
               };
              
               // clear button - clear all selection popup data
               var clearFunction=function(e) {
                    //var length = window.rParamArray.length, i=0;
                   
               /*   for(;i<length;i++){
                         parentOutputObj[i] = '';
                         selectedValue[i] = [];
                    $('#'+window.rParamArray[i].idName).prev('label').find('input').val(window.rParamArray[i].defMsg);
                    }*/
                   
            	   
            	  // mList['selectedCount'] = mList['totalCount'];
                //	 mList['selectAll'] = true;
                	 $.each(window.rParamArray, function(k, v) {
                		 v.totalCount = 0;
                		 v.selectedCount = 0
                		 v.selectAll_new = false;
                    });
                	 
                    $.each(parentOutputObj, function(k, v) {
                         parentOutputObj[k] = '';
                    });
                   
                    $.each(selectedValue, function(k, v) {
                         selectedValue[k] = [];
                    });
                   
                    $.each(window.rParamArray, function(oIndex, obj) {
                         $('#'+obj['idName']).prev('label').find('input').val(obj['defMsg']);
                         $('#'+obj['targetDiv']).find('input.report-list-search').val('');
                    });
               };
              
              
               //popup keyevent function - for tab & close
               var rListClose = function(e) {
                    // tab..
                    if(e.type =='keydown' && e.which == 9) {
                         var eventObj = $(e.target);
                         if(eventObj.is('input.report-list-search')) {
                              $('#'+mList['targetDiv']).find('input.textCheckbox').focus();
                         } else if(eventObj.is('input.textCheckbox')) {
                             
                              var activeDiv = $('#'+mList['targetDiv']).find('div.report-list-active');
                             
                              if(activeDiv.length == 0) {
                             
                                  var firstDiv = $('#'+mList['targetDiv']).find('div.report-list-div:eq(0)');
                                 
                                  if(firstDiv.length > 0) {
                                       if(activeReportListDiv != null && activeReportListDiv.length > 0) {
                                            activeReportListDiv.removeClass('report-list-active');
                                       }
                                       firstDiv.addClass('report-list-active').focus();
                                       activeReportListDiv = firstDiv;
                                  }
                              } else {
                                  activeDiv.focus();
                              }
                            
                         } else if(eventObj.is('div.report-list-div')) {
                              $('#'+mList['targetDiv']).find('input.report-list-search').focus();
                         }
                        
                         e.preventDefault;
                         return false;
                    }
                   
                    //close event
                    if(e.type == 'click' || (e.type = 'keydown' && e.which == 27)) {
                    var paramName = mList['oParamName'];
                    selectedValue[paramName] = [];
                    var chkValue = '';
                    var cnt = 0;
                    var singleSelectedText = '';
                    
                    // select All - empty logic
                    //if select all is selected then output param will be blank ""
                  /* if(mList['selectAll_new'] === true) {
                    	cnt = mList['selectedCount'];
                   		chkValue = '';
                    } else {*/
	                    $('#'+mList['targetDiv']).find('input.report-list-chk:checked').each(function() {
	                         if(this.checked) {
	                              cnt++;
	                              if(mList['oParam'] == 'text') {
	                                  var sText = $(this).parent('div').find('span').text();
	                                   selectedValue[paramName].push(sText);
	                                  if(chkValue.length == 0) {
	                                       singleSelectedText=sText;
	                                       chkValue =  sText;
	                                  }else{
	                                       if(mList.oParamType != null && mList.oParamType === 'int') {
	                                            chkValue = chkValue + ',' + sText;
	                                       } else {
	                                            chkValue = chkValue + "','" + sText;
	                                       }
	                                  }
	                              } else {
	                                  var sId = ""+$(this).attr('id-value');
	                                   selectedValue[paramName].push(sId);
	                                  if(chkValue.length == 0) {
	                                       chkValue =  sId;
	                                       singleSelectedText = $(this).parent('div').find('span').text();
	                                  }else{
	                                       if(mList.oParamType != null && mList.oParamType === 'text') {
	                                            chkValue = chkValue + "','" + sId;
	                                       } else {
	                                            chkValue = chkValue + ',' + sId;
	                                       }
	                                  }
	                              }
	                         }
	                    });
                 //   }
                   
                    parentOutputObj[paramName] = chkValue;
                   
                    $('#'+mList['targetDiv']).hide();
                    if(mList['hideDiv'] != null && mList['hideDiv'].length > 0) {
                         $('#'+mList['hideDiv']).show();
                    }
                   
                    if(cnt == 0) {
                         var preLabel = $('#'+mList['idName']).prev('label');
                         preLabel.find('input').val(mList['defMsg']);
                    /*   if(mList['oParam'] == 'text') {
                              var textArr = $('#'+mList['targetDiv']).find('.report-list-span').map( function( index, element ) {
                                      return $(element).text();
                                  }).get();
                              parentOutputObj[mList['oParamName']] = textArr.join(", ");
                         }    else {
                              var textArr = $('#'+mList['targetDiv']).find('.report-list-chk').map( function( index, element ) {
                                  return $(element).attr('id-value');
                              }).get();
                             
                              parentOutputObj[mList['oParamName']] = textArr.join(", ");
                         }*/
                        
                         parentOutputObj[paramName] = '';
                    }
                    else if(cnt == 1) {
                         var preLabel = $('#'+mList['idName']).prev('label');
                              preLabel.find('input').val(singleSelectedText);
                    } else  if(cnt > 1) {
                    	if(mList['selectAll_new'] === true) {
                        	//cnt = mList['selectedCount'];
                    		chkValue = '';
                    	mList['selectAll_new'] = false;
                    	parentOutputObj[paramName] = '';
                    	
                        }
                         var preLabel = $('#'+mList['idName']).prev('label');
                         preLabel.find('input').val(mList['defMsg']);
                         
                    }
                   
                    if(afterSelectionEdit[ paramName ] === true) {
                         afterSelectionEdit[ paramName ] = false;
                         clearBelowSelectionPopup(idx);
                    }
                   
                    // navigate to next selection popup
                    var nextInput = $('#'+mList.idName).next('label').find('input');
                    if(nextInput.length == 0)
                    	nextInput = $('#'+mList.idName).parent().next('div').find('input:text:first');
                    if(nextInput.length == 0)
                    	nextInput = $('#'+mList.idName).parents().find('.pnl-footer input:button:first');
                    if(nextInput.length > 0) {
                         nextInput.focus();
                    }else {
                         $('#'+mList.idName).prev('label').find('input').focus();
                    }
                   
                    if(mList['closeFunc']!= null) {
                         mList['closeFunc'].call(mList);
                    }
                    e.stopPropagation();
                    }
                   
               };
              
               $('#'+mList['idName']).off('click').on('click', clickEvent);
          $('#'+mList['idName']).prev('label').find('input').off('keydown').on('keydown', inputkeyEvent);
              
               if($.inArray(mList['targetDiv'], targetElementList) == -1){
                    targetElementList.push(mList['targetDiv']);
                    $('#'+mList['targetDiv']).on('click', 'div.report-list-div', targetClick);
                    $('#'+mList['targetDiv']).on('keydown','div.report-list-div',  tKeyEvent);
                    $('#'+mList['targetDiv']).on('keyup', 'input.report-list-search', sKeyEvent);
                    $('#'+mList['targetDiv']).on('keydown', 'div.report-list-active', activeListEvent);
                    $('#'+mList['targetDiv']).on('click', 'input.textCheckbox', checkAllEvent);
                    $('#'+mList['targetDiv']).on('click', 'input.report-list-chk', checkIndvEvent);
                    $('#'+mList['targetDiv']).on('click', 'div.smlboxinside', rListClose);
                    $('#'+mList['targetDiv']).on('keydown', rListClose);
               }
               if($.inArray(mList['hideDiv'], hideElementList) == -1){
                         hideElementList.push(mList['hideDiv']);
                         $('#'+mList['hideDiv']).on('report-list-clearEve', clearFunction);
                         $('#'+mList['hideDiv']).on('report-list-singleClearEve', singleClearFunction);
                   }
          });
      
 }
function getRsInformationReports(contextPath){
     var rsInfo = {};
     var jsonObj = {"viewName" : "RS_INFORMATION"};
	 $.ajax({
	      method : "POST",
	      url : contextPath+"/app/reportsController/getReportScreenData.do?jasonParam="+JSON.stringify(jsonObj),
	      async: false,
	      success : function(data) {
	          $.each( data,function(key, card) {
	               for(var i=1;i<card.length;i++){
	                    rsInfo.rsCode=(card[i][1]);
	                    rsInfo.rsAgencies=(card[i][2]);
	                    rsInfo.dimAddress1=(card[i][3]);
	                    rsInfo.dimAddress2=(card[i][4]);
	                    rsInfo.dimAddress3=(card[i][5]);
	                    rsInfo.dimState=(card[i][6]);
			            rsInfo.tinNumber=(card[i][7]);
			            rsInfo.pinCode=(card[i][8]);
	               }
	          });
	      }
	 });
	 jsonObj = {"viewName" : "RS_BUSINESS_INFORMATION"};
	 $.ajax({
	      method : "POST",
	      url : contextPath+"/app/reportsController/getReportScreenData.do?jasonParam="+JSON.stringify(jsonObj),
          async: false,
          success : function(data) {
              $.each( data,function(key, card) {
                   for(var i=1;i<card.length;i++){
                        rsInfo.rsBusiness=(card[i][1]);
                   }
              });
          }
     });
     return rsInfo;
}
 
function getRSFinancialYear(contextPath, fincancialYear){
     var rsFinanceObj = {};
     if(fincancialYear == undefined || fincancialYear == null || fincancialYear.length <= 0){
          fincancialYear = new Date().getFullYear();
     }
     var jsonObj = {"viewName" : "RS_FINANCIAL_YEAR_INFO"};
 var ajaxURL = contextPath+"/app/reportsController/getReportScreenData.do?jasonParam="+JSON.stringify(jsonObj);
 //ajaxURL += "&FISCALYEAR="+fincancialYear;
 $.ajax({
      method : "POST",
          url : ajaxURL,
          async: false,
          success : function(data) {
              var isDataAvailable = false;
              if(data != undefined && data.length >= 2){
                   var innerArray = data[0];
                   if(innerArray.length >= 2 && innerArray[1].length >= 3){
                        //rsFinanceObj.financeYear = innerArray[1][1];
                        rsFinanceObj.financeStartDate = formatDateToString(innerArray[1][1]);
                        rsFinanceObj.financeEndDate = formatDateToString(innerArray[1][2]);
                        isDataAvailable = true;
                   }
              }
              if(!isDataAvailable){
                   rsFinanceObj.financeYear = fincancialYear;
                   var todayDate = formatDateObjToString(new Date());
                   rsFinanceObj.financeStartDate = todayDate;
                   rsFinanceObj.financeEndDate = todayDate;
              }
          }
     });
     return rsFinanceObj;
}
 
function getRSCurrentMOCInfo(contextPath){
     var rsMocObj = {};
     var jsonObj = {"viewName" : "RS_CURRENT_MOC_INFO"};
 var ajaxURL = contextPath+"/app/reportsController/getReportScreenData.do?jasonParam="+JSON.stringify(jsonObj);
 $.ajax({
      method : "POST",
          url : ajaxURL,
          async: false,
          success : function(data) {
              if(data != undefined && data.length >= 2){
                   var innerArray = data[0];
                   if(innerArray.length >= 2 && innerArray[1].length >= 3){
                        rsMocObj.jmcStartDate = formatDateToString(innerArray[1][1]);
                        rsMocObj.jmcEndDate = formatDateToString(innerArray[1][2]);
                   }
              }
          }
     });
     return rsMocObj;
}
 
function parseStringToDate(value){
     var valArray = value.split("/");
     if(valArray.length >= 2){
    	 var date = new Date(parseInt(valArray[2]), parseInt(valArray[1])-1, parseInt(valArray[0]));
          return isNaN(date.getTime()) ? null: date;
     } else
          return null;
}
//validate From To Date - Format dd/MM/yyyy
function validateFromToDate(fromDate, toDate){
     var returnVal = "INVALID";
 var fromObject = parseStringToDate(fromDate);
 var toObject = parseStringToDate(toDate);
 if(fromObject != null && toObject != null){
      if(fromObject.getTime() > toObject.getTime()){
          returnVal = "GREATER";
      } else
          returnVal = "VALID";
 } else
      returnVal = "INVALID"
     return returnVal;
}
//To select current Date After deleteing date field .

   
function applyInputFocusMessage(screenID, focusMessages){
     $("#"+screenID+" input").focusin(function(){
      var focusedID = $(this).attr("id");
      if(focusedID != undefined && focusMessages[focusedID] != undefined)
          showDiaplyAlertMessages(focusMessages[focusedID], "info");
     });
}

	
$(document).on('focusin', 'a.dp-choose-date', function() {	
    if($(this).prev("input:text").val()==""){
	        console.log($(this).prev("input:text").val());
	        $(this).prev("input:text").dpSetSelected(today);
	        $(this).prev("input:text").val(today);
	}

	else{
	        $(this).prev("input:text").dpSetSelected($(this).prev("input:text").val());
	        $(this).prev("input:text").val($(this).prev("input:text").val());
	    }

	}); 

function applyArrowKeysForReports(reportScreenID){
     var screenInputsArry = $("#"+reportScreenID+" input[type='text']:visible,#"+reportScreenID+" select:visible, #"+reportScreenID+" input[type='button']:visible");
 $(document).on("keydown",function(e){
      var event = e || window.event;
      var key = event.keyCode || event.which;
      if(key == 38 || key == 9 || key == 13 || key == 40){
    	 
      //up & down arrrow
          var inputTarget = event.target;
          var targetindex = $.inArray(inputTarget, screenInputsArry);
          if(targetindex >= 0){
               if((key == 38 || (event.shiftKey && key == 9))){
            	   if(targetindex > 0){
            		   $(screenInputsArry[--targetindex]).focus().select();
            	   } else {
            		   $(screenInputsArry[screenInputsArry.length-1]).focus().select();
            	   }
                    preventEventDefaults(event);
               } else if((key == 40 || (key == 9 && !event.shiftKey) ||
                         (key == 13 && !$(inputTarget).is(":button")))){
                   if(targetindex < (screenInputsArry.length-1)){
                	   $(screenInputsArry[++targetindex]).focus().select();
                   } else {
                	   $(screenInputsArry[0]).focus().select();
                   }
                    preventEventDefaults(event);
               	}
              }
          }   
     });
}
 
function commonUI_getDataFromDB(contextPath, viewName) {
     var jsonObj = {"viewName" : viewName};
 var dataArray = [];
 var ajaxURL = contextPath+"/app/reportsController/getReportScreenData.do?jasonParam="+JSON.stringify(jsonObj);
 $.ajax({
      method : "POST",
          url : ajaxURL,
          async: false,
          cache: false
     }).done(function(data) {
          var content = data[0].splice(1,1);
          dataArray = content;
     });
     return dataArray;
}

function cui_gstValidation(gstValue) {
	var returns = false;
	var regExp = /^([0-9]){2}([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}([1-9]){1}([a-zA-Z]){1}([0-9]){1}$/; 
	try{
		if( gstValue.match(regExp) ){ 
			returns = true;
		} 
	}catch(err) {
	}
	
	return returns;
}

function cui_report_beforeGenerate() {
	$(':focus').blur();
	 displayLoadingImage();
	 showDiaplyAlertMessages("Generating Report....", "info");
}

function cui_report_afterGenerate(status) {
	hideLoadingImage();
	$('.report-generate').focus();
	if(status === 'N') {
		 showDiaplyAlertMessages("No Record found.", "info");
	} else {
		showDiaplyAlertMessages("Report Generated Successfully.", "info");
	}
}
function showMessageWindowConfirmBox(title, userMessage, alertWidth, yesCallBack, noCallBack, cancelCallback){
	if(alertWidth == null)
		alertWidth = '350px';
	var buttonsArr = [];
	buttonsArr.push({
		text: 'Yes',
		onClick: function(){
			dlgObject.dialog('destroy');
			callCallbackFunctionIfExist(yesCallBack);
		}
	});
	buttonsArr.push({
		text: 'No',
		onClick: function(){
			dlgObject.dialog('destroy');
			callCallbackFunctionIfExist(noCallBack);
		}
	});
	if(cancelCallback != false){
		buttonsArr.push({
			text: 'Cancel',
			onClick: function(){
				dlgObject.dialog('destroy');
				callCallbackFunctionIfExist(cancelCallback);
			}
		});
	}
	var dlgObject = $.messager.confirm({title: 'Confirm', msg: userMessage, width: alertWidth,
		buttons:buttonsArr
	});
	return dlgObject;
}
function showMessageWindowAlertBox(title, userMessage, destroyCallBack, alertWidth, iconStyle){
	if(alertWidth == null)
		alertWidth = '350px';
	if(iconStyle == null)
		iconStyle = "info";
	var dlgObject = $.messager.alert({title: title, msg: userMessage, width: alertWidth,
		icon: iconStyle,
		buttons:[{
			text: 'Ok',
			onClick: function(){
				dlgObject.dialog("destroy");
			}
		}],
		onDestroy:function(){
			callCallbackFunctionIfExist(destroyCallBack);
		}
	});
	return dlgObject;
}

function callCallbackFunctionIfExist(callBackName){
	if(checkCallbackIsFunction(callBackName)){
		callBackName.call(this);
	}
}

function checkCallbackIsFunction(callBackName){
	return (callBackName != null && callBackName && typeof(callBackName) === "function") ? true : false;
}
